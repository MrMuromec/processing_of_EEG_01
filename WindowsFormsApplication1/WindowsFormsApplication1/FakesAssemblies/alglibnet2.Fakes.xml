<?xml version="1.0"?>
<doc>
    <assembly>
        <name>alglibnet2.Fakes</name>
    </assembly>
    <members>
        <member name="T:Global.Fakes.Shimalglib">
            <summary>Тип оболочки совместимости для alglib</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.#ctor(alglib)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.deallocateimmediatelyOf1M0Ref``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``0})">
            <summary>Задает оболочка совместимости alglib.deallocateimmediately(!!0&amp; obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Constructor">
            <summary>Задает оболочка совместимости alglib.alglib()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.airyDoubleDoubleOutDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.airy(Double x, Double&amp; ai, Double&amp; aip, Double&amp; bi, Double&amp; bip)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.alloc_counter">
            <summary>Задает оболочка совместимости alglib.alloc_counter()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.alloc_counter_activate">
            <summary>Задает оболочка совместимости alglib.alloc_counter_activate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.autogkintegratealglibautogkstatealglibintegrator1_funcObject">
            <summary>Задает оболочка совместимости alglib.autogkintegrate(autogkstate state, integrator1_func func, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.autogkiterationalglibautogkstate">
            <summary>Задает оболочка совместимости alglib.autogkiteration(autogkstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.autogkresultsalglibautogkstateDoubleOutalglibautogkreportOut">
            <summary>Задает оболочка совместимости alglib.autogkresults(autogkstate state, Double&amp; v, autogkreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.autogksingularDoubleDoubleDoubleDoublealglibautogkstateOut">
            <summary>Задает оболочка совместимости alglib.autogksingular(Double a, Double b, Double alpha, Double beta, autogkstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.autogksmoothDoubleDoublealglibautogkstateOut">
            <summary>Задает оболочка совместимости alglib.autogksmooth(Double a, Double b, autogkstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.autogksmoothwDoubleDoubleDoublealglibautogkstateOut">
            <summary>Задает оболочка совместимости alglib.autogksmoothw(Double a, Double b, Double xwidth, autogkstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.barycentricbuildfloaterhormannDoubleArrayDoubleArrayInt32Int32alglibbarycentricinterpolantOut">
            <summary>Задает оболочка совместимости alglib.barycentricbuildfloaterhormann(Double[] x, Double[] y, Int32 n, Int32 d, barycentricinterpolant&amp; b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.barycentricbuildxywDoubleArrayDoubleArrayDoubleArrayInt32alglibbarycentricinterpolantOut">
            <summary>Задает оболочка совместимости alglib.barycentricbuildxyw(Double[] x, Double[] y, Double[] w, Int32 n, barycentricinterpolant&amp; b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.barycentriccalcalglibbarycentricinterpolantDouble">
            <summary>Задает оболочка совместимости alglib.barycentriccalc(barycentricinterpolant b, Double t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.barycentricdiff1alglibbarycentricinterpolantDoubleDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.barycentricdiff1(barycentricinterpolant b, Double t, Double&amp; f, Double&amp; df)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.barycentricdiff2alglibbarycentricinterpolantDoubleDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.barycentricdiff2(barycentricinterpolant b, Double t, Double&amp; f, Double&amp; df, Double&amp; d2f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.barycentricfitfloaterhormannDoubleArrayDoubleArrayInt32Int32Int32OutalglibbarycentricinterpolantOutalglibbarycentricfitreportOut">
            <summary>Задает оболочка совместимости alglib.barycentricfitfloaterhormann(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, barycentricinterpolant&amp; b, barycentricfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.barycentricfitfloaterhormannwcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32OutalglibbarycentricinterpolantOutalglibbarycentricfitreportOut">
            <summary>Задает оболочка совместимости alglib.barycentricfitfloaterhormannwc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, barycentricinterpolant&amp; b, barycentricfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.barycentriclintransxalglibbarycentricinterpolantDoubleDouble">
            <summary>Задает оболочка совместимости alglib.barycentriclintransx(barycentricinterpolant b, Double ca, Double cb)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.barycentriclintransyalglibbarycentricinterpolantDoubleDouble">
            <summary>Задает оболочка совместимости alglib.barycentriclintransy(barycentricinterpolant b, Double ca, Double cb)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.barycentricunpackalglibbarycentricinterpolantInt32OutDoubleArrayOutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.barycentricunpack(barycentricinterpolant b, Int32&amp; n, Double[]&amp; x, Double[]&amp; y, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.besseli0Double">
            <summary>Задает оболочка совместимости alglib.besseli0(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.besseli1Double">
            <summary>Задает оболочка совместимости alglib.besseli1(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.besselj0Double">
            <summary>Задает оболочка совместимости alglib.besselj0(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.besselj1Double">
            <summary>Задает оболочка совместимости alglib.besselj1(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.besseljnInt32Double">
            <summary>Задает оболочка совместимости alglib.besseljn(Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.besselk0Double">
            <summary>Задает оболочка совместимости alglib.besselk0(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.besselk1Double">
            <summary>Задает оболочка совместимости alglib.besselk1(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.besselknInt32Double">
            <summary>Задает оболочка совместимости alglib.besselkn(Int32 nn, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.bessely0Double">
            <summary>Задает оболочка совместимости alglib.bessely0(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.bessely1Double">
            <summary>Задает оболочка совместимости alglib.bessely1(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.besselynInt32Double">
            <summary>Задает оболочка совместимости alglib.besselyn(Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.betaDoubleDouble">
            <summary>Задает оболочка совместимости alglib.beta(Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.binomialcdistributionInt32Int32Double">
            <summary>Задает оболочка совместимости alglib.binomialcdistribution(Int32 k, Int32 n, Double p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.binomialdistributionInt32Int32Double">
            <summary>Задает оболочка совместимости alglib.binomialdistribution(Int32 k, Int32 n, Double p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.chebyshevcalculateInt32Int32Double">
            <summary>Задает оболочка совместимости alglib.chebyshevcalculate(Int32 r, Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.chebyshevcoefficientsInt32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.chebyshevcoefficients(Int32 n, Double[]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.chebyshevsumDoubleArrayInt32Int32Double">
            <summary>Задает оболочка совместимости alglib.chebyshevsum(Double[] c, Int32 r, Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.chisquarecdistributionDoubleDouble">
            <summary>Задает оболочка совместимости alglib.chisquarecdistribution(Double v, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.chisquaredistributionDoubleDouble">
            <summary>Задает оболочка совместимости alglib.chisquaredistribution(Double v, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.clusterizercreatealglibclusterizerstateOut">
            <summary>Задает оболочка совместимости alglib.clusterizercreate(clusterizerstate&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.clusterizergetdistancesDoubleMdArray2Int32Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.clusterizergetdistances(Double[,] xy, Int32 npoints, Int32 nfeatures, Int32 disttype, Double[,]&amp; d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.clusterizergetkclustersalglibahcreportInt32Int32ArrayOutInt32ArrayOut">
            <summary>Задает оболочка совместимости alglib.clusterizergetkclusters(ahcreport rep, Int32 k, Int32[]&amp; cidx, Int32[]&amp; cz)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.clusterizerrunahcalglibclusterizerstatealglibahcreportOut">
            <summary>Задает оболочка совместимости alglib.clusterizerrunahc(clusterizerstate s, ahcreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.clusterizerrunkmeansalglibclusterizerstateInt32alglibkmeansreportOut">
            <summary>Задает оболочка совместимости alglib.clusterizerrunkmeans(clusterizerstate s, Int32 k, kmeansreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.clusterizerseparatedbycorralglibahcreportDoubleInt32OutInt32ArrayOutInt32ArrayOut">
            <summary>Задает оболочка совместимости alglib.clusterizerseparatedbycorr(ahcreport rep, Double r, Int32&amp; k, Int32[]&amp; cidx, Int32[]&amp; cz)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.clusterizerseparatedbydistalglibahcreportDoubleInt32OutInt32ArrayOutInt32ArrayOut">
            <summary>Задает оболочка совместимости alglib.clusterizerseparatedbydist(ahcreport rep, Double r, Int32&amp; k, Int32[]&amp; cidx, Int32[]&amp; cz)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.clusterizersetahcalgoalglibclusterizerstateInt32">
            <summary>Задает оболочка совместимости alglib.clusterizersetahcalgo(clusterizerstate s, Int32 algo)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.clusterizersetdistancesalglibclusterizerstateDoubleMdArray2Boolean">
            <summary>Задает оболочка совместимости alglib.clusterizersetdistances(clusterizerstate s, Double[,] d, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.clusterizersetdistancesalglibclusterizerstateDoubleMdArray2Int32Boolean">
            <summary>Задает оболочка совместимости alglib.clusterizersetdistances(clusterizerstate s, Double[,] d, Int32 npoints, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.clusterizersetkmeanslimitsalglibclusterizerstateInt32Int32">
            <summary>Задает оболочка совместимости alglib.clusterizersetkmeanslimits(clusterizerstate s, Int32 restarts, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.clusterizersetpointsalglibclusterizerstateDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.clusterizersetpoints(clusterizerstate s, Double[,] xy, Int32 disttype)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.clusterizersetpointsalglibclusterizerstateDoubleMdArray2Int32Int32Int32">
            <summary>Задает оболочка совместимости alglib.clusterizersetpoints(clusterizerstate s, Double[,] xy, Int32 npoints, Int32 nfeatures, Int32 disttype)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixcopyInt32Int32alglibcomplexMdArray2Int32Int32alglibcomplexMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.cmatrixcopy(Int32 m, Int32 n, complex[,] a, Int32 ia, Int32 ja, complex[,]&amp; b, Int32 ib, Int32 jb)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixdetalglibcomplexMdArray2">
            <summary>Задает оболочка совместимости alglib.cmatrixdet(complex[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixdetalglibcomplexMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.cmatrixdet(complex[,] a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixgemmInt32Int32Int32alglibcomplexalglibcomplexMdArray2Int32Int32Int32alglibcomplexMdArray2Int32Int32Int32alglibcomplexalglibcomplexMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.cmatrixgemm(Int32 m, Int32 n, Int32 k, complex alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, complex[,] b, Int32 ib, Int32 jb, Int32 optypeb, complex beta, complex[,]&amp; c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixherkInt32Int32DoublealglibcomplexMdArray2Int32Int32Int32DoublealglibcomplexMdArray2RefInt32Int32Boolean">
            <summary>Задает оболочка совместимости alglib.cmatrixherk(Int32 n, Int32 k, Double alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, complex[,]&amp; c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixinversealglibcomplexMdArray2RefInt32Int32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.cmatrixinverse(complex[,]&amp; a, Int32 n, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixinversealglibcomplexMdArray2RefInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.cmatrixinverse(complex[,]&amp; a, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixlefttrsmInt32Int32alglibcomplexMdArray2Int32Int32BooleanBooleanInt32alglibcomplexMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.cmatrixlefttrsm(Int32 m, Int32 n, complex[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, complex[,]&amp; x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixlqalglibcomplexMdArray2RefInt32Int32alglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.cmatrixlq(complex[,]&amp; a, Int32 m, Int32 n, complex[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixlqunpacklalglibcomplexMdArray2Int32Int32alglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.cmatrixlqunpackl(complex[,] a, Int32 m, Int32 n, complex[,]&amp; l)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixlqunpackqalglibcomplexMdArray2Int32Int32alglibcomplexArrayInt32alglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.cmatrixlqunpackq(complex[,] a, Int32 m, Int32 n, complex[] tau, Int32 qrows, complex[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixlualglibcomplexMdArray2RefInt32Int32Int32ArrayOut">
            <summary>Задает оболочка совместимости alglib.cmatrixlu(complex[,]&amp; a, Int32 m, Int32 n, Int32[]&amp; pivots)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixludetalglibcomplexMdArray2Int32Array">
            <summary>Задает оболочка совместимости alglib.cmatrixludet(complex[,] a, Int32[] pivots)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixludetalglibcomplexMdArray2Int32ArrayInt32">
            <summary>Задает оболочка совместимости alglib.cmatrixludet(complex[,] a, Int32[] pivots, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixluinversealglibcomplexMdArray2RefInt32ArrayInt32Int32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.cmatrixluinverse(complex[,]&amp; a, Int32[] pivots, Int32 n, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixluinversealglibcomplexMdArray2RefInt32ArrayInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.cmatrixluinverse(complex[,]&amp; a, Int32[] pivots, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixlurcond1alglibcomplexMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.cmatrixlurcond1(complex[,] lua, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixlurcondinfalglibcomplexMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.cmatrixlurcondinf(complex[,] lua, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixlusolvealglibcomplexMdArray2Int32ArrayInt32alglibcomplexArrayInt32OutalglibdensesolverreportOutalglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.cmatrixlusolve(complex[,] lua, Int32[] p, Int32 n, complex[] b, Int32&amp; info, densesolverreport&amp; rep, complex[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixlusolvemalglibcomplexMdArray2Int32ArrayInt32alglibcomplexMdArray2Int32Int32OutalglibdensesolverreportOutalglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.cmatrixlusolvem(complex[,] lua, Int32[] p, Int32 n, complex[,] b, Int32 m, Int32&amp; info, densesolverreport&amp; rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixmixedsolvealglibcomplexMdArray2alglibcomplexMdArray2Int32ArrayInt32alglibcomplexArrayInt32OutalglibdensesolverreportOutalglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.cmatrixmixedsolve(complex[,] a, complex[,] lua, Int32[] p, Int32 n, complex[] b, Int32&amp; info, densesolverreport&amp; rep, complex[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixmixedsolvemalglibcomplexMdArray2alglibcomplexMdArray2Int32ArrayInt32alglibcomplexMdArray2Int32Int32OutalglibdensesolverreportOutalglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.cmatrixmixedsolvem(complex[,] a, complex[,] lua, Int32[] p, Int32 n, complex[,] b, Int32 m, Int32&amp; info, densesolverreport&amp; rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixmvInt32Int32alglibcomplexMdArray2Int32Int32Int32alglibcomplexArrayInt32alglibcomplexArrayRefInt32">
            <summary>Задает оболочка совместимости alglib.cmatrixmv(Int32 m, Int32 n, complex[,] a, Int32 ia, Int32 ja, Int32 opa, complex[] x, Int32 ix, complex[]&amp; y, Int32 iy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixqralglibcomplexMdArray2RefInt32Int32alglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.cmatrixqr(complex[,]&amp; a, Int32 m, Int32 n, complex[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixqrunpackqalglibcomplexMdArray2Int32Int32alglibcomplexArrayInt32alglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.cmatrixqrunpackq(complex[,] a, Int32 m, Int32 n, complex[] tau, Int32 qcolumns, complex[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixqrunpackralglibcomplexMdArray2Int32Int32alglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.cmatrixqrunpackr(complex[,] a, Int32 m, Int32 n, complex[,]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixrank1Int32Int32alglibcomplexMdArray2RefInt32Int32alglibcomplexArrayRefInt32alglibcomplexArrayRefInt32">
            <summary>Задает оболочка совместимости alglib.cmatrixrank1(Int32 m, Int32 n, complex[,]&amp; a, Int32 ia, Int32 ja, complex[]&amp; u, Int32 iu, complex[]&amp; v, Int32 iv)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixrcond1alglibcomplexMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.cmatrixrcond1(complex[,] a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixrcondinfalglibcomplexMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.cmatrixrcondinf(complex[,] a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixrighttrsmInt32Int32alglibcomplexMdArray2Int32Int32BooleanBooleanInt32alglibcomplexMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.cmatrixrighttrsm(Int32 m, Int32 n, complex[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, complex[,]&amp; x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixrndcondInt32DoublealglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.cmatrixrndcond(Int32 n, Double c, complex[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixrndorthogonalInt32alglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.cmatrixrndorthogonal(Int32 n, complex[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixrndorthogonalfromtheleftalglibcomplexMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.cmatrixrndorthogonalfromtheleft(complex[,]&amp; a, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixrndorthogonalfromtherightalglibcomplexMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.cmatrixrndorthogonalfromtheright(complex[,]&amp; a, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixsolvealglibcomplexMdArray2Int32alglibcomplexArrayInt32OutalglibdensesolverreportOutalglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.cmatrixsolve(complex[,] a, Int32 n, complex[] b, Int32&amp; info, densesolverreport&amp; rep, complex[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixsolvemalglibcomplexMdArray2Int32alglibcomplexMdArray2Int32BooleanInt32OutalglibdensesolverreportOutalglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.cmatrixsolvem(complex[,] a, Int32 n, complex[,] b, Int32 m, Boolean rfs, Int32&amp; info, densesolverreport&amp; rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixsyrkInt32Int32DoublealglibcomplexMdArray2Int32Int32Int32DoublealglibcomplexMdArray2RefInt32Int32Boolean">
            <summary>Задает оболочка совместимости alglib.cmatrixsyrk(Int32 n, Int32 k, Double alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, complex[,]&amp; c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixtransposeInt32Int32alglibcomplexMdArray2Int32Int32alglibcomplexMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.cmatrixtranspose(Int32 m, Int32 n, complex[,] a, Int32 ia, Int32 ja, complex[,]&amp; b, Int32 ib, Int32 jb)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixtrinversealglibcomplexMdArray2RefBooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.cmatrixtrinverse(complex[,]&amp; a, Boolean isupper, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixtrinversealglibcomplexMdArray2RefInt32BooleanBooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.cmatrixtrinverse(complex[,]&amp; a, Int32 n, Boolean isupper, Boolean isunit, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixtrrcond1alglibcomplexMdArray2Int32BooleanBoolean">
            <summary>Задает оболочка совместимости alglib.cmatrixtrrcond1(complex[,] a, Int32 n, Boolean isupper, Boolean isunit)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cmatrixtrrcondinfalglibcomplexMdArray2Int32BooleanBoolean">
            <summary>Задает оболочка совместимости alglib.cmatrixtrrcondinf(complex[,] a, Int32 n, Boolean isupper, Boolean isunit)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.convc1dalglibcomplexArrayInt32alglibcomplexArrayInt32alglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.convc1d(complex[] a, Int32 m, complex[] b, Int32 n, complex[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.convc1dcircularalglibcomplexArrayInt32alglibcomplexArrayInt32alglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.convc1dcircular(complex[] s, Int32 m, complex[] r, Int32 n, complex[]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.convc1dcircularinvalglibcomplexArrayInt32alglibcomplexArrayInt32alglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.convc1dcircularinv(complex[] a, Int32 m, complex[] b, Int32 n, complex[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.convc1dinvalglibcomplexArrayInt32alglibcomplexArrayInt32alglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.convc1dinv(complex[] a, Int32 m, complex[] b, Int32 n, complex[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.convr1dDoubleArrayInt32DoubleArrayInt32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.convr1d(Double[] a, Int32 m, Double[] b, Int32 n, Double[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.convr1dcircularDoubleArrayInt32DoubleArrayInt32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.convr1dcircular(Double[] s, Int32 m, Double[] r, Int32 n, Double[]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.convr1dcircularinvDoubleArrayInt32DoubleArrayInt32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.convr1dcircularinv(Double[] a, Int32 m, Double[] b, Int32 n, Double[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.convr1dinvDoubleArrayInt32DoubleArrayInt32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.convr1dinv(Double[] a, Int32 m, Double[] b, Int32 n, Double[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.corrc1dalglibcomplexArrayInt32alglibcomplexArrayInt32alglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.corrc1d(complex[] signal, Int32 n, complex[] pattern, Int32 m, complex[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.corrc1dcircularalglibcomplexArrayInt32alglibcomplexArrayInt32alglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.corrc1dcircular(complex[] signal, Int32 m, complex[] pattern, Int32 n, complex[]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.corrr1dDoubleArrayInt32DoubleArrayInt32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.corrr1d(Double[] signal, Int32 n, Double[] pattern, Int32 m, Double[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.corrr1dcircularDoubleArrayInt32DoubleArrayInt32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.corrr1dcircular(Double[] signal, Int32 m, Double[] pattern, Int32 n, Double[]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cov2DoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости alglib.cov2(Double[] x, Double[] y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.cov2DoubleArrayDoubleArrayInt32">
            <summary>Задает оболочка совместимости alglib.cov2(Double[] x, Double[] y, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.covm2DoubleMdArray2DoubleMdArray2DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.covm2(Double[,] x, Double[,] y, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.covm2DoubleMdArray2DoubleMdArray2Int32Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.covm2(Double[,] x, Double[,] y, Int32 n, Int32 m1, Int32 m2, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.covmDoubleMdArray2DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.covm(Double[,] x, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.covmDoubleMdArray2Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.covm(Double[,] x, Int32 n, Int32 m, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.dawsonintegralDouble">
            <summary>Задает оболочка совместимости alglib.dawsonintegral(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.dfavgcealglibdecisionforestDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.dfavgce(decisionforest df, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.dfavgerroralglibdecisionforestDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.dfavgerror(decisionforest df, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.dfavgrelerroralglibdecisionforestDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.dfavgrelerror(decisionforest df, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.dfbuildrandomdecisionforestDoubleMdArray2Int32Int32Int32Int32DoubleInt32OutalglibdecisionforestOutalglibdfreportOut">
            <summary>Задает оболочка совместимости alglib.dfbuildrandomdecisionforest(Double[,] xy, Int32 npoints, Int32 nvars, Int32 nclasses, Int32 ntrees, Double r, Int32&amp; info, decisionforest&amp; df, dfreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.dfbuildrandomdecisionforestx1DoubleMdArray2Int32Int32Int32Int32Int32DoubleInt32OutalglibdecisionforestOutalglibdfreportOut">
            <summary>Задает оболочка совместимости alglib.dfbuildrandomdecisionforestx1(Double[,] xy, Int32 npoints, Int32 nvars, Int32 nclasses, Int32 ntrees, Int32 nrndvars, Double r, Int32&amp; info, decisionforest&amp; df, dfreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.dfprocessalglibdecisionforestDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.dfprocess(decisionforest df, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.dfprocessialglibdecisionforestDoubleArrayDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.dfprocessi(decisionforest df, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.dfrelclserroralglibdecisionforestDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.dfrelclserror(decisionforest df, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.dfrmserroralglibdecisionforestDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.dfrmserror(decisionforest df, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.dfserializealglibdecisionforestStringOut">
            <summary>Задает оболочка совместимости alglib.dfserialize(decisionforest obj, String&amp; s_out)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.dfunserializeStringalglibdecisionforestOut">
            <summary>Задает оболочка совместимости alglib.dfunserialize(String s_in, decisionforest&amp; obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.dsoptimalsplit2DoubleArrayInt32ArrayInt32Int32OutDoubleOutDoubleOutDoubleOutDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.dsoptimalsplit2(Double[] a, Int32[] c, Int32 n, Int32&amp; info, Double&amp; threshold, Double&amp; pal, Double&amp; pbl, Double&amp; par, Double&amp; pbr, Double&amp; cve)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.dsoptimalsplit2fastDoubleArrayRefInt32ArrayRefInt32ArrayRefInt32ArrayRefDoubleArrayRefInt32ArrayRefInt32Int32DoubleInt32OutDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.dsoptimalsplit2fast(Double[]&amp; a, Int32[]&amp; c, Int32[]&amp; tiesbuf, Int32[]&amp; cntbuf, Double[]&amp; bufr, Int32[]&amp; bufi, Int32 n, Int32 nc, Double alpha, Int32&amp; info, Double&amp; threshold, Double&amp; rms, Double&amp; cvrms)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.ellipticintegraleDouble">
            <summary>Задает оболочка совместимости alglib.ellipticintegrale(Double m)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.ellipticintegralkDouble">
            <summary>Задает оболочка совместимости alglib.ellipticintegralk(Double m)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.ellipticintegralkhighprecisionDouble">
            <summary>Задает оболочка совместимости alglib.ellipticintegralkhighprecision(Double m1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.errorfunctionDouble">
            <summary>Задает оболочка совместимости alglib.errorfunction(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.errorfunctioncDouble">
            <summary>Задает оболочка совместимости alglib.errorfunctionc(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.exponentialintegraleiDouble">
            <summary>Задает оболочка совместимости alglib.exponentialintegralei(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.exponentialintegralenDoubleInt32">
            <summary>Задает оболочка совместимости alglib.exponentialintegralen(Double x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fcdistributionInt32Int32Double">
            <summary>Задает оболочка совместимости alglib.fcdistribution(Int32 a, Int32 b, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fdistributionInt32Int32Double">
            <summary>Задает оболочка совместимости alglib.fdistribution(Int32 a, Int32 b, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fftc1dalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости alglib.fftc1d(complex[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fftc1dalglibcomplexArrayRefInt32">
            <summary>Задает оболочка совместимости alglib.fftc1d(complex[]&amp; a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fftc1dinvalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости alglib.fftc1dinv(complex[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fftc1dinvalglibcomplexArrayRefInt32">
            <summary>Задает оболочка совместимости alglib.fftc1dinv(complex[]&amp; a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fftr1dDoubleArrayInt32alglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.fftr1d(Double[] a, Int32 n, complex[]&amp; f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fftr1dDoubleArrayalglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.fftr1d(Double[] a, complex[]&amp; f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fftr1dinvalglibcomplexArrayDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.fftr1dinv(complex[] f, Double[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fftr1dinvalglibcomplexArrayInt32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.fftr1dinv(complex[] f, Int32 n, Double[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fhtr1dDoubleArrayRefInt32">
            <summary>Задает оболочка совместимости alglib.fhtr1d(Double[]&amp; a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fhtr1dinvDoubleArrayRefInt32">
            <summary>Задает оболочка совместимости alglib.fhtr1dinv(Double[]&amp; a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.filteremaDoubleArrayRefDouble">
            <summary>Задает оболочка совместимости alglib.filterema(Double[]&amp; x, Double alpha)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.filteremaDoubleArrayRefInt32Double">
            <summary>Задает оболочка совместимости alglib.filterema(Double[]&amp; x, Int32 n, Double alpha)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.filterlrmaDoubleArrayRefInt32">
            <summary>Задает оболочка совместимости alglib.filterlrma(Double[]&amp; x, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.filterlrmaDoubleArrayRefInt32Int32">
            <summary>Задает оболочка совместимости alglib.filterlrma(Double[]&amp; x, Int32 n, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.filtersmaDoubleArrayRefInt32">
            <summary>Задает оболочка совместимости alglib.filtersma(Double[]&amp; x, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.filtersmaDoubleArrayRefInt32Int32">
            <summary>Задает оболочка совместимости alglib.filtersma(Double[]&amp; x, Int32 n, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fisherldaDoubleMdArray2Int32Int32Int32Int32OutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.fisherlda(Double[,] xy, Int32 npoints, Int32 nvars, Int32 nclasses, Int32&amp; info, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fisherldanDoubleMdArray2Int32Int32Int32Int32OutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.fisherldan(Double[,] xy, Int32 npoints, Int32 nvars, Int32 nclasses, Int32&amp; info, Double[,]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fresnelintegralDoubleDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости alglib.fresnelintegral(Double x, Double&amp; c, Double&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.fromchebyshevDoubleArrayInt32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.fromchebyshev(Double[] a, Int32 n, Double[]&amp; b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.ftestDoubleArrayInt32DoubleArrayInt32DoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.ftest(Double[] x, Int32 n, Double[] y, Int32 m, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.gammafunctionDouble">
            <summary>Задает оболочка совместимости alglib.gammafunction(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.gkqgenerategaussjacobiInt32DoubleDoubleInt32OutDoubleArrayOutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.gkqgenerategaussjacobi(Int32 n, Double alpha, Double beta, Int32&amp; info, Double[]&amp; x, Double[]&amp; wkronrod, Double[]&amp; wgauss)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.gkqgenerategausslegendreInt32Int32OutDoubleArrayOutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.gkqgenerategausslegendre(Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; wkronrod, Double[]&amp; wgauss)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.gkqgeneraterecDoubleArrayDoubleArrayDoubleInt32Int32OutDoubleArrayOutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.gkqgeneraterec(Double[] alpha, Double[] beta, Double mu0, Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; wkronrod, Double[]&amp; wgauss)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.gkqlegendrecalcInt32Int32OutDoubleArrayOutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.gkqlegendrecalc(Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; wkronrod, Double[]&amp; wgauss)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.gkqlegendretblInt32DoubleArrayOutDoubleArrayOutDoubleArrayOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.gkqlegendretbl(Int32 n, Double[]&amp; x, Double[]&amp; wkronrod, Double[]&amp; wgauss, Double&amp; eps)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.gqgenerategausshermiteInt32Int32OutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.gqgenerategausshermite(Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.gqgenerategaussjacobiInt32DoubleDoubleInt32OutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.gqgenerategaussjacobi(Int32 n, Double alpha, Double beta, Int32&amp; info, Double[]&amp; x, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.gqgenerategausslaguerreInt32DoubleInt32OutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.gqgenerategausslaguerre(Int32 n, Double alpha, Int32&amp; info, Double[]&amp; x, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.gqgenerategausslegendreInt32Int32OutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.gqgenerategausslegendre(Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.gqgenerategausslobattorecDoubleArrayDoubleArrayDoubleDoubleDoubleInt32Int32OutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.gqgenerategausslobattorec(Double[] alpha, Double[] beta, Double mu0, Double a, Double b, Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.gqgenerategaussradaurecDoubleArrayDoubleArrayDoubleDoubleInt32Int32OutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.gqgenerategaussradaurec(Double[] alpha, Double[] beta, Double mu0, Double a, Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.gqgeneraterecDoubleArrayDoubleArrayDoubleInt32Int32OutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.gqgeneraterec(Double[] alpha, Double[] beta, Double mu0, Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hermitecalculateInt32Double">
            <summary>Задает оболочка совместимости alglib.hermitecalculate(Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hermitecoefficientsInt32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.hermitecoefficients(Int32 n, Double[]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hermitesumDoubleArrayInt32Double">
            <summary>Задает оболочка совместимости alglib.hermitesum(Double[] c, Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hmatrixevdalglibcomplexMdArray2Int32Int32BooleanDoubleArrayOutalglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.hmatrixevd(complex[,] a, Int32 n, Int32 zneeded, Boolean isupper, Double[]&amp; d, complex[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hmatrixevdialglibcomplexMdArray2Int32Int32BooleanInt32Int32DoubleArrayOutalglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.hmatrixevdi(complex[,] a, Int32 n, Int32 zneeded, Boolean isupper, Int32 i1, Int32 i2, Double[]&amp; w, complex[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hmatrixevdralglibcomplexMdArray2Int32Int32BooleanDoubleDoubleInt32OutDoubleArrayOutalglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.hmatrixevdr(complex[,] a, Int32 n, Int32 zneeded, Boolean isupper, Double b1, Double b2, Int32&amp; m, Double[]&amp; w, complex[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hmatrixrndcondInt32DoublealglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.hmatrixrndcond(Int32 n, Double c, complex[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hmatrixrndmultiplyalglibcomplexMdArray2RefInt32">
            <summary>Задает оболочка совместимости alglib.hmatrixrndmultiply(complex[,]&amp; a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hmatrixtdalglibcomplexMdArray2RefInt32BooleanalglibcomplexArrayOutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.hmatrixtd(complex[,]&amp; a, Int32 n, Boolean isupper, complex[]&amp; tau, Double[]&amp; d, Double[]&amp; e)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hmatrixtdunpackqalglibcomplexMdArray2Int32BooleanalglibcomplexArrayalglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.hmatrixtdunpackq(complex[,] a, Int32 n, Boolean isupper, complex[] tau, complex[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hpdmatrixcholeskyalglibcomplexMdArray2RefInt32Boolean">
            <summary>Задает оболочка совместимости alglib.hpdmatrixcholesky(complex[,]&amp; a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hpdmatrixcholeskyinversealglibcomplexMdArray2RefInt32BooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.hpdmatrixcholeskyinverse(complex[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hpdmatrixcholeskyinversealglibcomplexMdArray2RefInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.hpdmatrixcholeskyinverse(complex[,]&amp; a, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hpdmatrixcholeskyrcondalglibcomplexMdArray2Int32Boolean">
            <summary>Задает оболочка совместимости alglib.hpdmatrixcholeskyrcond(complex[,] a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hpdmatrixcholeskysolvealglibcomplexMdArray2Int32BooleanalglibcomplexArrayInt32OutalglibdensesolverreportOutalglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.hpdmatrixcholeskysolve(complex[,] cha, Int32 n, Boolean isupper, complex[] b, Int32&amp; info, densesolverreport&amp; rep, complex[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hpdmatrixcholeskysolvemalglibcomplexMdArray2Int32BooleanalglibcomplexMdArray2Int32Int32OutalglibdensesolverreportOutalglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.hpdmatrixcholeskysolvem(complex[,] cha, Int32 n, Boolean isupper, complex[,] b, Int32 m, Int32&amp; info, densesolverreport&amp; rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hpdmatrixinversealglibcomplexMdArray2RefInt32BooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.hpdmatrixinverse(complex[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hpdmatrixinversealglibcomplexMdArray2RefInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.hpdmatrixinverse(complex[,]&amp; a, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hpdmatrixrcondalglibcomplexMdArray2Int32Boolean">
            <summary>Задает оболочка совместимости alglib.hpdmatrixrcond(complex[,] a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hpdmatrixrndcondInt32DoublealglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.hpdmatrixrndcond(Int32 n, Double c, complex[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hpdmatrixsolvealglibcomplexMdArray2Int32BooleanalglibcomplexArrayInt32OutalglibdensesolverreportOutalglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.hpdmatrixsolve(complex[,] a, Int32 n, Boolean isupper, complex[] b, Int32&amp; info, densesolverreport&amp; rep, complex[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hpdmatrixsolvemalglibcomplexMdArray2Int32BooleanalglibcomplexMdArray2Int32Int32OutalglibdensesolverreportOutalglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.hpdmatrixsolvem(complex[,] a, Int32 n, Boolean isupper, complex[,] b, Int32 m, Int32&amp; info, densesolverreport&amp; rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hqrndcontinuousalglibhqrndstateDoubleArrayInt32">
            <summary>Задает оболочка совместимости alglib.hqrndcontinuous(hqrndstate state, Double[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hqrnddiscretealglibhqrndstateDoubleArrayInt32">
            <summary>Задает оболочка совместимости alglib.hqrnddiscrete(hqrndstate state, Double[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hqrndexponentialalglibhqrndstateDouble">
            <summary>Задает оболочка совместимости alglib.hqrndexponential(hqrndstate state, Double lambdav)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hqrndnormal2alglibhqrndstateDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.hqrndnormal2(hqrndstate state, Double&amp; x1, Double&amp; x2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hqrndnormalalglibhqrndstate">
            <summary>Задает оболочка совместимости alglib.hqrndnormal(hqrndstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hqrndrandomizealglibhqrndstateOut">
            <summary>Задает оболочка совместимости alglib.hqrndrandomize(hqrndstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hqrndseedInt32Int32alglibhqrndstateOut">
            <summary>Задает оболочка совместимости alglib.hqrndseed(Int32 s1, Int32 s2, hqrndstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hqrnduniformialglibhqrndstateInt32">
            <summary>Задает оболочка совместимости alglib.hqrnduniformi(hqrndstate state, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hqrnduniformralglibhqrndstate">
            <summary>Задает оболочка совместимости alglib.hqrnduniformr(hqrndstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hqrndunit2alglibhqrndstateDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.hqrndunit2(hqrndstate state, Double&amp; x, Double&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.hyperbolicsinecosineintegralsDoubleDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.hyperbolicsinecosineintegrals(Double x, Double&amp; shi, Double&amp; chi)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.idwbuildmodifiedshepardDoubleMdArray2Int32Int32Int32Int32Int32alglibidwinterpolantOut">
            <summary>Задает оболочка совместимости alglib.idwbuildmodifiedshepard(Double[,] xy, Int32 n, Int32 nx, Int32 d, Int32 nq, Int32 nw, idwinterpolant&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.idwbuildmodifiedshepardrDoubleMdArray2Int32Int32DoublealglibidwinterpolantOut">
            <summary>Задает оболочка совместимости alglib.idwbuildmodifiedshepardr(Double[,] xy, Int32 n, Int32 nx, Double r, idwinterpolant&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.idwbuildnoisyDoubleMdArray2Int32Int32Int32Int32Int32alglibidwinterpolantOut">
            <summary>Задает оболочка совместимости alglib.idwbuildnoisy(Double[,] xy, Int32 n, Int32 nx, Int32 d, Int32 nq, Int32 nw, idwinterpolant&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.idwcalcalglibidwinterpolantDoubleArray">
            <summary>Задает оболочка совместимости alglib.idwcalc(idwinterpolant z, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.incompletebetaDoubleDoubleDouble">
            <summary>Задает оболочка совместимости alglib.incompletebeta(Double a, Double b, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.incompleteellipticintegraleDoubleDouble">
            <summary>Задает оболочка совместимости alglib.incompleteellipticintegrale(Double phi, Double m)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.incompleteellipticintegralkDoubleDouble">
            <summary>Задает оболочка совместимости alglib.incompleteellipticintegralk(Double phi, Double m)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.incompletegammaDoubleDouble">
            <summary>Задает оболочка совместимости alglib.incompletegamma(Double a, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.incompletegammacDoubleDouble">
            <summary>Задает оболочка совместимости alglib.incompletegammac(Double a, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.invbinomialdistributionInt32Int32Double">
            <summary>Задает оболочка совместимости alglib.invbinomialdistribution(Int32 k, Int32 n, Double y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.invchisquaredistributionDoubleDouble">
            <summary>Задает оболочка совместимости alglib.invchisquaredistribution(Double v, Double y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.inverfDouble">
            <summary>Задает оболочка совместимости alglib.inverf(Double e)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.invfdistributionInt32Int32Double">
            <summary>Задает оболочка совместимости alglib.invfdistribution(Int32 a, Int32 b, Double y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.invincompletebetaDoubleDoubleDouble">
            <summary>Задает оболочка совместимости alglib.invincompletebeta(Double a, Double b, Double y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.invincompletegammacDoubleDouble">
            <summary>Задает оболочка совместимости alglib.invincompletegammac(Double a, Double y0)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.invnormaldistributionDouble">
            <summary>Задает оболочка совместимости alglib.invnormaldistribution(Double y0)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.invpoissondistributionInt32Double">
            <summary>Задает оболочка совместимости alglib.invpoissondistribution(Int32 k, Double y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.invstudenttdistributionInt32Double">
            <summary>Задает оболочка совместимости alglib.invstudenttdistribution(Int32 k, Double p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.jacobianellipticfunctionsDoubleDoubleDoubleOutDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.jacobianellipticfunctions(Double u, Double m, Double&amp; sn, Double&amp; cn, Double&amp; dn, Double&amp; ph)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.jarqueberatestDoubleArrayInt32DoubleOut">
            <summary>Задает оболочка совместимости alglib.jarqueberatest(Double[] x, Int32 n, Double&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreebuildDoubleMdArray2Int32Int32Int32Int32alglibkdtreeOut">
            <summary>Задает оболочка совместимости alglib.kdtreebuild(Double[,] xy, Int32 n, Int32 nx, Int32 ny, Int32 normtype, kdtree&amp; kdt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreebuildDoubleMdArray2Int32Int32Int32alglibkdtreeOut">
            <summary>Задает оболочка совместимости alglib.kdtreebuild(Double[,] xy, Int32 nx, Int32 ny, Int32 normtype, kdtree&amp; kdt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreebuildtaggedDoubleMdArray2Int32ArrayInt32Int32Int32Int32alglibkdtreeOut">
            <summary>Задает оболочка совместимости alglib.kdtreebuildtagged(Double[,] xy, Int32[] tags, Int32 n, Int32 nx, Int32 ny, Int32 normtype, kdtree&amp; kdt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreebuildtaggedDoubleMdArray2Int32ArrayInt32Int32Int32alglibkdtreeOut">
            <summary>Задает оболочка совместимости alglib.kdtreebuildtagged(Double[,] xy, Int32[] tags, Int32 nx, Int32 ny, Int32 normtype, kdtree&amp; kdt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreequeryaknnalglibkdtreeDoubleArrayInt32BooleanDouble">
            <summary>Задает оболочка совместимости alglib.kdtreequeryaknn(kdtree kdt, Double[] x, Int32 k, Boolean selfmatch, Double eps)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreequeryaknnalglibkdtreeDoubleArrayInt32Double">
            <summary>Задает оболочка совместимости alglib.kdtreequeryaknn(kdtree kdt, Double[] x, Int32 k, Double eps)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreequeryknnalglibkdtreeDoubleArrayInt32">
            <summary>Задает оболочка совместимости alglib.kdtreequeryknn(kdtree kdt, Double[] x, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreequeryknnalglibkdtreeDoubleArrayInt32Boolean">
            <summary>Задает оболочка совместимости alglib.kdtreequeryknn(kdtree kdt, Double[] x, Int32 k, Boolean selfmatch)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreequeryresultsdistancesalglibkdtreeDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.kdtreequeryresultsdistances(kdtree kdt, Double[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreequeryresultsdistancesialglibkdtreeDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.kdtreequeryresultsdistancesi(kdtree kdt, Double[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreequeryresultstagsalglibkdtreeInt32ArrayRef">
            <summary>Задает оболочка совместимости alglib.kdtreequeryresultstags(kdtree kdt, Int32[]&amp; tags)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreequeryresultstagsialglibkdtreeInt32ArrayOut">
            <summary>Задает оболочка совместимости alglib.kdtreequeryresultstagsi(kdtree kdt, Int32[]&amp; tags)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreequeryresultsxalglibkdtreeDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.kdtreequeryresultsx(kdtree kdt, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreequeryresultsxialglibkdtreeDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.kdtreequeryresultsxi(kdtree kdt, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreequeryresultsxyalglibkdtreeDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.kdtreequeryresultsxy(kdtree kdt, Double[,]&amp; xy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreequeryresultsxyialglibkdtreeDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.kdtreequeryresultsxyi(kdtree kdt, Double[,]&amp; xy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreequeryrnnalglibkdtreeDoubleArrayDouble">
            <summary>Задает оболочка совместимости alglib.kdtreequeryrnn(kdtree kdt, Double[] x, Double r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreequeryrnnalglibkdtreeDoubleArrayDoubleBoolean">
            <summary>Задает оболочка совместимости alglib.kdtreequeryrnn(kdtree kdt, Double[] x, Double r, Boolean selfmatch)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreeserializealglibkdtreeStringOut">
            <summary>Задает оболочка совместимости alglib.kdtreeserialize(kdtree obj, String&amp; s_out)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kdtreeunserializeStringalglibkdtreeOut">
            <summary>Задает оболочка совместимости alglib.kdtreeunserialize(String s_in, kdtree&amp; obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.kmeansgenerateDoubleMdArray2Int32Int32Int32Int32Int32OutDoubleMdArray2OutInt32ArrayOut">
            <summary>Задает оболочка совместимости alglib.kmeansgenerate(Double[,] xy, Int32 npoints, Int32 nvars, Int32 k, Int32 restarts, Int32&amp; info, Double[,]&amp; c, Int32[]&amp; xyc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.laguerrecalculateInt32Double">
            <summary>Задает оболочка совместимости alglib.laguerrecalculate(Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.laguerrecoefficientsInt32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.laguerrecoefficients(Int32 n, Double[]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.laguerresumDoubleArrayInt32Double">
            <summary>Задает оболочка совместимости alglib.laguerresum(Double[] c, Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.legendrecalculateInt32Double">
            <summary>Задает оболочка совместимости alglib.legendrecalculate(Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.legendrecoefficientsInt32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.legendrecoefficients(Int32 n, Double[]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.legendresumDoubleArrayInt32Double">
            <summary>Задает оболочка совместимости alglib.legendresum(Double[] c, Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lincgcreateInt32algliblincgstateOut">
            <summary>Задает оболочка совместимости alglib.lincgcreate(Int32 n, lincgstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lincgresultsalgliblincgstateDoubleArrayOutalgliblincgreportOut">
            <summary>Задает оболочка совместимости alglib.lincgresults(lincgstate state, Double[]&amp; x, lincgreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lincgsetcondalgliblincgstateDoubleInt32">
            <summary>Задает оболочка совместимости alglib.lincgsetcond(lincgstate state, Double epsf, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lincgsetprecdiagalgliblincgstate">
            <summary>Задает оболочка совместимости alglib.lincgsetprecdiag(lincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lincgsetprecunitalgliblincgstate">
            <summary>Задает оболочка совместимости alglib.lincgsetprecunit(lincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lincgsetrestartfreqalgliblincgstateInt32">
            <summary>Задает оболочка совместимости alglib.lincgsetrestartfreq(lincgstate state, Int32 srf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lincgsetrupdatefreqalgliblincgstateInt32">
            <summary>Задает оболочка совместимости alglib.lincgsetrupdatefreq(lincgstate state, Int32 freq)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lincgsetstartingpointalgliblincgstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.lincgsetstartingpoint(lincgstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lincgsetxrepalgliblincgstateBoolean">
            <summary>Задает оболочка совместимости alglib.lincgsetxrep(lincgstate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lincgsolvesparsealgliblincgstatealglibsparsematrixBooleanDoubleArray">
            <summary>Задает оболочка совместимости alglib.lincgsolvesparse(lincgstate state, sparsematrix a, Boolean isupper, Double[] b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.linlsqrcreateInt32Int32algliblinlsqrstateOut">
            <summary>Задает оболочка совместимости alglib.linlsqrcreate(Int32 m, Int32 n, linlsqrstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.linlsqrresultsalgliblinlsqrstateDoubleArrayOutalgliblinlsqrreportOut">
            <summary>Задает оболочка совместимости alglib.linlsqrresults(linlsqrstate state, Double[]&amp; x, linlsqrreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.linlsqrsetcondalgliblinlsqrstateDoubleDoubleInt32">
            <summary>Задает оболочка совместимости alglib.linlsqrsetcond(linlsqrstate state, Double epsa, Double epsb, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.linlsqrsetlambdaialgliblinlsqrstateDouble">
            <summary>Задает оболочка совместимости alglib.linlsqrsetlambdai(linlsqrstate state, Double lambdai)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.linlsqrsetprecdiagalgliblinlsqrstate">
            <summary>Задает оболочка совместимости alglib.linlsqrsetprecdiag(linlsqrstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.linlsqrsetprecunitalgliblinlsqrstate">
            <summary>Задает оболочка совместимости alglib.linlsqrsetprecunit(linlsqrstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.linlsqrsetxrepalgliblinlsqrstateBoolean">
            <summary>Задает оболочка совместимости alglib.linlsqrsetxrep(linlsqrstate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.linlsqrsolvesparsealgliblinlsqrstatealglibsparsematrixDoubleArray">
            <summary>Задает оболочка совместимости alglib.linlsqrsolvesparse(linlsqrstate state, sparsematrix a, Double[] b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lngammaDoubleDoubleOut">
            <summary>Задает оболочка совместимости alglib.lngamma(Double x, Double&amp; sgngam)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.logisticcalc4DoubleDoubleDoubleDoubleDouble">
            <summary>Задает оболочка совместимости alglib.logisticcalc4(Double x, Double a, Double b, Double c, Double d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.logisticcalc5DoubleDoubleDoubleDoubleDoubleDouble">
            <summary>Задает оболочка совместимости alglib.logisticcalc5(Double x, Double a, Double b, Double c, Double d, Double g)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.logisticfit45xDoubleArrayDoubleArrayInt32DoubleDoubleBooleanDoubleDoubleInt32DoubleOutDoubleOutDoubleOutDoubleOutDoubleOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.logisticfit45x(Double[] x, Double[] y, Int32 n, Double cnstrleft, Double cnstrright, Boolean is4pl, Double lambdav, Double epsx, Int32 rscnt, Double&amp; a, Double&amp; b, Double&amp; c, Double&amp; d, Double&amp; g, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.logisticfit4DoubleArrayDoubleArrayInt32DoubleOutDoubleOutDoubleOutDoubleOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.logisticfit4(Double[] x, Double[] y, Int32 n, Double&amp; a, Double&amp; b, Double&amp; c, Double&amp; d, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.logisticfit4ecDoubleArrayDoubleArrayInt32DoubleDoubleDoubleOutDoubleOutDoubleOutDoubleOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.logisticfit4ec(Double[] x, Double[] y, Int32 n, Double cnstrleft, Double cnstrright, Double&amp; a, Double&amp; b, Double&amp; c, Double&amp; d, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.logisticfit5DoubleArrayDoubleArrayInt32DoubleOutDoubleOutDoubleOutDoubleOutDoubleOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.logisticfit5(Double[] x, Double[] y, Int32 n, Double&amp; a, Double&amp; b, Double&amp; c, Double&amp; d, Double&amp; g, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.logisticfit5ecDoubleArrayDoubleArrayInt32DoubleDoubleDoubleOutDoubleOutDoubleOutDoubleOutDoubleOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.logisticfit5ec(Double[] x, Double[] y, Int32 n, Double cnstrleft, Double cnstrright, Double&amp; a, Double&amp; b, Double&amp; c, Double&amp; d, Double&amp; g, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lravgerroralgliblinearmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.lravgerror(linearmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lravgrelerroralgliblinearmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.lravgrelerror(linearmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lrbuildDoubleMdArray2Int32Int32Int32OutalgliblinearmodelOutalgliblrreportOut">
            <summary>Задает оболочка совместимости alglib.lrbuild(Double[,] xy, Int32 npoints, Int32 nvars, Int32&amp; info, linearmodel&amp; lm, lrreport&amp; ar)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lrbuildsDoubleMdArray2DoubleArrayInt32Int32Int32OutalgliblinearmodelOutalgliblrreportOut">
            <summary>Задает оболочка совместимости alglib.lrbuilds(Double[,] xy, Double[] s, Int32 npoints, Int32 nvars, Int32&amp; info, linearmodel&amp; lm, lrreport&amp; ar)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lrbuildzDoubleMdArray2Int32Int32Int32OutalgliblinearmodelOutalgliblrreportOut">
            <summary>Задает оболочка совместимости alglib.lrbuildz(Double[,] xy, Int32 npoints, Int32 nvars, Int32&amp; info, linearmodel&amp; lm, lrreport&amp; ar)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lrbuildzsDoubleMdArray2DoubleArrayInt32Int32Int32OutalgliblinearmodelOutalgliblrreportOut">
            <summary>Задает оболочка совместимости alglib.lrbuildzs(Double[,] xy, Double[] s, Int32 npoints, Int32 nvars, Int32&amp; info, linearmodel&amp; lm, lrreport&amp; ar)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lrpackDoubleArrayInt32algliblinearmodelOut">
            <summary>Задает оболочка совместимости alglib.lrpack(Double[] v, Int32 nvars, linearmodel&amp; lm)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lrprocessalgliblinearmodelDoubleArray">
            <summary>Задает оболочка совместимости alglib.lrprocess(linearmodel lm, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lrrmserroralgliblinearmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.lrrmserror(linearmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lrunpackalgliblinearmodelDoubleArrayOutInt32Out">
            <summary>Задает оболочка совместимости alglib.lrunpack(linearmodel lm, Double[]&amp; v, Int32&amp; nvars)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitcreatefDoubleMdArray2DoubleArrayDoubleArrayDoublealgliblsfitstateOut">
            <summary>Задает оболочка совместимости alglib.lsfitcreatef(Double[,] x, Double[] y, Double[] c, Double diffstep, lsfitstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitcreatefDoubleMdArray2DoubleArrayDoubleArrayInt32Int32Int32DoublealgliblsfitstateOut">
            <summary>Задает оболочка совместимости alglib.lsfitcreatef(Double[,] x, Double[] y, Double[] c, Int32 n, Int32 m, Int32 k, Double diffstep, lsfitstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitcreatefgDoubleMdArray2DoubleArrayDoubleArrayBooleanalgliblsfitstateOut">
            <summary>Задает оболочка совместимости alglib.lsfitcreatefg(Double[,] x, Double[] y, Double[] c, Boolean cheapfg, lsfitstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitcreatefgDoubleMdArray2DoubleArrayDoubleArrayInt32Int32Int32BooleanalgliblsfitstateOut">
            <summary>Задает оболочка совместимости alglib.lsfitcreatefg(Double[,] x, Double[] y, Double[] c, Int32 n, Int32 m, Int32 k, Boolean cheapfg, lsfitstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitcreatefghDoubleMdArray2DoubleArrayDoubleArrayInt32Int32Int32algliblsfitstateOut">
            <summary>Задает оболочка совместимости alglib.lsfitcreatefgh(Double[,] x, Double[] y, Double[] c, Int32 n, Int32 m, Int32 k, lsfitstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitcreatefghDoubleMdArray2DoubleArrayDoubleArrayalgliblsfitstateOut">
            <summary>Задает оболочка совместимости alglib.lsfitcreatefgh(Double[,] x, Double[] y, Double[] c, lsfitstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitcreatewfDoubleMdArray2DoubleArrayDoubleArrayDoubleArrayDoublealgliblsfitstateOut">
            <summary>Задает оболочка совместимости alglib.lsfitcreatewf(Double[,] x, Double[] y, Double[] w, Double[] c, Double diffstep, lsfitstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitcreatewfDoubleMdArray2DoubleArrayDoubleArrayDoubleArrayInt32Int32Int32DoublealgliblsfitstateOut">
            <summary>Задает оболочка совместимости alglib.lsfitcreatewf(Double[,] x, Double[] y, Double[] w, Double[] c, Int32 n, Int32 m, Int32 k, Double diffstep, lsfitstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitcreatewfgDoubleMdArray2DoubleArrayDoubleArrayDoubleArrayBooleanalgliblsfitstateOut">
            <summary>Задает оболочка совместимости alglib.lsfitcreatewfg(Double[,] x, Double[] y, Double[] w, Double[] c, Boolean cheapfg, lsfitstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitcreatewfgDoubleMdArray2DoubleArrayDoubleArrayDoubleArrayInt32Int32Int32BooleanalgliblsfitstateOut">
            <summary>Задает оболочка совместимости alglib.lsfitcreatewfg(Double[,] x, Double[] y, Double[] w, Double[] c, Int32 n, Int32 m, Int32 k, Boolean cheapfg, lsfitstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitcreatewfghDoubleMdArray2DoubleArrayDoubleArrayDoubleArrayInt32Int32Int32algliblsfitstateOut">
            <summary>Задает оболочка совместимости alglib.lsfitcreatewfgh(Double[,] x, Double[] y, Double[] w, Double[] c, Int32 n, Int32 m, Int32 k, lsfitstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitcreatewfghDoubleMdArray2DoubleArrayDoubleArrayDoubleArrayalgliblsfitstateOut">
            <summary>Задает оболочка совместимости alglib.lsfitcreatewfgh(Double[,] x, Double[] y, Double[] w, Double[] c, lsfitstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitfitalgliblsfitstatealglibndimensional_pfuncalglibndimensional_pgradalglibndimensional_phessalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.lsfitfit(lsfitstate state, ndimensional_pfunc func, ndimensional_pgrad grad, ndimensional_phess hess, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitfitalgliblsfitstatealglibndimensional_pfuncalglibndimensional_pgradalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.lsfitfit(lsfitstate state, ndimensional_pfunc func, ndimensional_pgrad grad, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitfitalgliblsfitstatealglibndimensional_pfuncalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.lsfitfit(lsfitstate state, ndimensional_pfunc func, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfititerationalgliblsfitstate">
            <summary>Задает оболочка совместимости alglib.lsfititeration(lsfitstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitlinearDoubleArrayDoubleMdArray2Int32Int32Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.lsfitlinear(Double[] y, Double[,] fmatrix, Int32 n, Int32 m, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitlinearDoubleArrayDoubleMdArray2Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.lsfitlinear(Double[] y, Double[,] fmatrix, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitlinearcDoubleArrayDoubleMdArray2DoubleMdArray2Int32Int32Int32Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.lsfitlinearc(Double[] y, Double[,] fmatrix, Double[,] cmatrix, Int32 n, Int32 m, Int32 k, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitlinearcDoubleArrayDoubleMdArray2DoubleMdArray2Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.lsfitlinearc(Double[] y, Double[,] fmatrix, Double[,] cmatrix, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitlinearwDoubleArrayDoubleArrayDoubleMdArray2Int32Int32Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.lsfitlinearw(Double[] y, Double[] w, Double[,] fmatrix, Int32 n, Int32 m, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitlinearwDoubleArrayDoubleArrayDoubleMdArray2Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.lsfitlinearw(Double[] y, Double[] w, Double[,] fmatrix, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitlinearwcDoubleArrayDoubleArrayDoubleMdArray2DoubleMdArray2Int32Int32Int32Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.lsfitlinearwc(Double[] y, Double[] w, Double[,] fmatrix, Double[,] cmatrix, Int32 n, Int32 m, Int32 k, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitlinearwcDoubleArrayDoubleArrayDoubleMdArray2DoubleMdArray2Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.lsfitlinearwc(Double[] y, Double[] w, Double[,] fmatrix, Double[,] cmatrix, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitresultsalgliblsfitstateInt32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.lsfitresults(lsfitstate state, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitsetbcalgliblsfitstateDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости alglib.lsfitsetbc(lsfitstate state, Double[] bndl, Double[] bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitsetcondalgliblsfitstateDoubleDoubleInt32">
            <summary>Задает оболочка совместимости alglib.lsfitsetcond(lsfitstate state, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitsetgradientcheckalgliblsfitstateDouble">
            <summary>Задает оболочка совместимости alglib.lsfitsetgradientcheck(lsfitstate state, Double teststep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitsetscalealgliblsfitstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.lsfitsetscale(lsfitstate state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitsetstpmaxalgliblsfitstateDouble">
            <summary>Задает оболочка совместимости alglib.lsfitsetstpmax(lsfitstate state, Double stpmax)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lsfitsetxrepalgliblsfitstateBoolean">
            <summary>Задает оболочка совместимости alglib.lsfitsetxrep(lsfitstate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lstfitpiecewiselinearrdpDoubleArrayDoubleArrayInt32DoubleDoubleArrayOutDoubleArrayOutInt32Out">
            <summary>Задает оболочка совместимости alglib.lstfitpiecewiselinearrdp(Double[] x, Double[] y, Int32 n, Double eps, Double[]&amp; x2, Double[]&amp; y2, Int32&amp; nsections)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.lstfitpiecewiselinearrdpfixedDoubleArrayDoubleArrayInt32Int32DoubleArrayOutDoubleArrayOutInt32Out">
            <summary>Задает оболочка совместимости alglib.lstfitpiecewiselinearrdpfixed(Double[] x, Double[] y, Int32 n, Int32 m, Double[]&amp; x2, Double[]&amp; y2, Int32&amp; nsections)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mannwhitneyutestDoubleArrayInt32DoubleArrayInt32DoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.mannwhitneyutest(Double[] x, Int32 n, Double[] y, Int32 m, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdaddbcalglibmcpdstateInt32Int32DoubleDouble">
            <summary>Задает оболочка совместимости alglib.mcpdaddbc(mcpdstate s, Int32 i, Int32 j, Double bndl, Double bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdaddecalglibmcpdstateInt32Int32Double">
            <summary>Задает оболочка совместимости alglib.mcpdaddec(mcpdstate s, Int32 i, Int32 j, Double c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdaddtrackalglibmcpdstateDoubleMdArray2">
            <summary>Задает оболочка совместимости alglib.mcpdaddtrack(mcpdstate s, Double[,] xy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdaddtrackalglibmcpdstateDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mcpdaddtrack(mcpdstate s, Double[,] xy, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdcreateInt32alglibmcpdstateOut">
            <summary>Задает оболочка совместимости alglib.mcpdcreate(Int32 n, mcpdstate&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdcreateentryInt32Int32alglibmcpdstateOut">
            <summary>Задает оболочка совместимости alglib.mcpdcreateentry(Int32 n, Int32 entrystate, mcpdstate&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdcreateentryexitInt32Int32Int32alglibmcpdstateOut">
            <summary>Задает оболочка совместимости alglib.mcpdcreateentryexit(Int32 n, Int32 entrystate, Int32 exitstate, mcpdstate&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdcreateexitInt32Int32alglibmcpdstateOut">
            <summary>Задает оболочка совместимости alglib.mcpdcreateexit(Int32 n, Int32 exitstate, mcpdstate&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdresultsalglibmcpdstateDoubleMdArray2OutalglibmcpdreportOut">
            <summary>Задает оболочка совместимости alglib.mcpdresults(mcpdstate s, Double[,]&amp; p, mcpdreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdsetbcalglibmcpdstateDoubleMdArray2DoubleMdArray2">
            <summary>Задает оболочка совместимости alglib.mcpdsetbc(mcpdstate s, Double[,] bndl, Double[,] bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdsetecalglibmcpdstateDoubleMdArray2">
            <summary>Задает оболочка совместимости alglib.mcpdsetec(mcpdstate s, Double[,] ec)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdsetlcalglibmcpdstateDoubleMdArray2Int32Array">
            <summary>Задает оболочка совместимости alglib.mcpdsetlc(mcpdstate s, Double[,] c, Int32[] ct)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdsetlcalglibmcpdstateDoubleMdArray2Int32ArrayInt32">
            <summary>Задает оболочка совместимости alglib.mcpdsetlc(mcpdstate s, Double[,] c, Int32[] ct, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdsetpredictionweightsalglibmcpdstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.mcpdsetpredictionweights(mcpdstate s, Double[] pw)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdsetprioralglibmcpdstateDoubleMdArray2">
            <summary>Задает оболочка совместимости alglib.mcpdsetprior(mcpdstate s, Double[,] pp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdsettikhonovregularizeralglibmcpdstateDouble">
            <summary>Задает оболочка совместимости alglib.mcpdsettikhonovregularizer(mcpdstate s, Double v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mcpdsolvealglibmcpdstate">
            <summary>Задает оболочка совместимости alglib.mcpdsolve(mcpdstate s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minasacreateDoubleArrayDoubleArrayDoubleArrayalglibminasastateOut">
            <summary>Задает оболочка совместимости alglib.minasacreate(Double[] x, Double[] bndl, Double[] bndu, minasastate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minasacreateInt32DoubleArrayDoubleArrayDoubleArrayalglibminasastateOut">
            <summary>Задает оболочка совместимости alglib.minasacreate(Int32 n, Double[] x, Double[] bndl, Double[] bndu, minasastate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minasaiterationalglibminasastate">
            <summary>Задает оболочка совместимости alglib.minasaiteration(minasastate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minasaoptimizealglibminasastatealglibndimensional_gradalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.minasaoptimize(minasastate state, ndimensional_grad grad, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minasarestartfromalglibminasastateDoubleArrayDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости alglib.minasarestartfrom(minasastate state, Double[] x, Double[] bndl, Double[] bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minasaresultsalglibminasastateDoubleArrayOutalglibminasareportOut">
            <summary>Задает оболочка совместимости alglib.minasaresults(minasastate state, Double[]&amp; x, minasareport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minasaresultsbufalglibminasastateDoubleArrayRefalglibminasareport">
            <summary>Задает оболочка совместимости alglib.minasaresultsbuf(minasastate state, Double[]&amp; x, minasareport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minasasetalgorithmalglibminasastateInt32">
            <summary>Задает оболочка совместимости alglib.minasasetalgorithm(minasastate state, Int32 algotype)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minasasetcondalglibminasastateDoubleDoubleDoubleInt32">
            <summary>Задает оболочка совместимости alglib.minasasetcond(minasastate state, Double epsg, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minasasetstpmaxalglibminasastateDouble">
            <summary>Задает оболочка совместимости alglib.minasasetstpmax(minasastate state, Double stpmax)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minasasetxrepalglibminasastateBoolean">
            <summary>Задает оболочка совместимости alglib.minasasetxrep(minasastate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleiccreateDoubleArrayalglibminbleicstateOut">
            <summary>Задает оболочка совместимости alglib.minbleiccreate(Double[] x, minbleicstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleiccreateInt32DoubleArrayalglibminbleicstateOut">
            <summary>Задает оболочка совместимости alglib.minbleiccreate(Int32 n, Double[] x, minbleicstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleiccreatefDoubleArrayDoublealglibminbleicstateOut">
            <summary>Задает оболочка совместимости alglib.minbleiccreatef(Double[] x, Double diffstep, minbleicstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleiccreatefInt32DoubleArrayDoublealglibminbleicstateOut">
            <summary>Задает оболочка совместимости alglib.minbleiccreatef(Int32 n, Double[] x, Double diffstep, minbleicstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleiciterationalglibminbleicstate">
            <summary>Задает оболочка совместимости alglib.minbleiciteration(minbleicstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicoptimizealglibminbleicstatealglibndimensional_funcalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.minbleicoptimize(minbleicstate state, ndimensional_func func, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicoptimizealglibminbleicstatealglibndimensional_gradalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.minbleicoptimize(minbleicstate state, ndimensional_grad grad, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicrequestterminationalglibminbleicstate">
            <summary>Задает оболочка совместимости alglib.minbleicrequesttermination(minbleicstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicrestartfromalglibminbleicstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.minbleicrestartfrom(minbleicstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicresultsalglibminbleicstateDoubleArrayOutalglibminbleicreportOut">
            <summary>Задает оболочка совместимости alglib.minbleicresults(minbleicstate state, Double[]&amp; x, minbleicreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicresultsbufalglibminbleicstateDoubleArrayRefalglibminbleicreport">
            <summary>Задает оболочка совместимости alglib.minbleicresultsbuf(minbleicstate state, Double[]&amp; x, minbleicreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicsetbarrierdecayalglibminbleicstateDouble">
            <summary>Задает оболочка совместимости alglib.minbleicsetbarrierdecay(minbleicstate state, Double mudecay)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicsetbarrierwidthalglibminbleicstateDouble">
            <summary>Задает оболочка совместимости alglib.minbleicsetbarrierwidth(minbleicstate state, Double mu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicsetbcalglibminbleicstateDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости alglib.minbleicsetbc(minbleicstate state, Double[] bndl, Double[] bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicsetcondalglibminbleicstateDoubleDoubleDoubleInt32">
            <summary>Задает оболочка совместимости alglib.minbleicsetcond(minbleicstate state, Double epsg, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicsetgradientcheckalglibminbleicstateDouble">
            <summary>Задает оболочка совместимости alglib.minbleicsetgradientcheck(minbleicstate state, Double teststep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicsetlcalglibminbleicstateDoubleMdArray2Int32Array">
            <summary>Задает оболочка совместимости alglib.minbleicsetlc(minbleicstate state, Double[,] c, Int32[] ct)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicsetlcalglibminbleicstateDoubleMdArray2Int32ArrayInt32">
            <summary>Задает оболочка совместимости alglib.minbleicsetlc(minbleicstate state, Double[,] c, Int32[] ct, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicsetprecdefaultalglibminbleicstate">
            <summary>Задает оболочка совместимости alglib.minbleicsetprecdefault(minbleicstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicsetprecdiagalglibminbleicstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.minbleicsetprecdiag(minbleicstate state, Double[] d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicsetprecscalealglibminbleicstate">
            <summary>Задает оболочка совместимости alglib.minbleicsetprecscale(minbleicstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicsetscalealglibminbleicstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.minbleicsetscale(minbleicstate state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicsetstpmaxalglibminbleicstateDouble">
            <summary>Задает оболочка совместимости alglib.minbleicsetstpmax(minbleicstate state, Double stpmax)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minbleicsetxrepalglibminbleicstateBoolean">
            <summary>Задает оболочка совместимости alglib.minbleicsetxrep(minbleicstate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgcreateDoubleArrayalglibmincgstateOut">
            <summary>Задает оболочка совместимости alglib.mincgcreate(Double[] x, mincgstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgcreateInt32DoubleArrayalglibmincgstateOut">
            <summary>Задает оболочка совместимости alglib.mincgcreate(Int32 n, Double[] x, mincgstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgcreatefDoubleArrayDoublealglibmincgstateOut">
            <summary>Задает оболочка совместимости alglib.mincgcreatef(Double[] x, Double diffstep, mincgstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgcreatefInt32DoubleArrayDoublealglibmincgstateOut">
            <summary>Задает оболочка совместимости alglib.mincgcreatef(Int32 n, Double[] x, Double diffstep, mincgstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgiterationalglibmincgstate">
            <summary>Задает оболочка совместимости alglib.mincgiteration(mincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgoptimizealglibmincgstatealglibndimensional_funcalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.mincgoptimize(mincgstate state, ndimensional_func func, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgoptimizealglibmincgstatealglibndimensional_gradalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.mincgoptimize(mincgstate state, ndimensional_grad grad, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgrequestterminationalglibmincgstate">
            <summary>Задает оболочка совместимости alglib.mincgrequesttermination(mincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgrestartfromalglibmincgstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.mincgrestartfrom(mincgstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgresultsalglibmincgstateDoubleArrayOutalglibmincgreportOut">
            <summary>Задает оболочка совместимости alglib.mincgresults(mincgstate state, Double[]&amp; x, mincgreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgresultsbufalglibmincgstateDoubleArrayRefalglibmincgreport">
            <summary>Задает оболочка совместимости alglib.mincgresultsbuf(mincgstate state, Double[]&amp; x, mincgreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgsetcgtypealglibmincgstateInt32">
            <summary>Задает оболочка совместимости alglib.mincgsetcgtype(mincgstate state, Int32 cgtype)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgsetcondalglibmincgstateDoubleDoubleDoubleInt32">
            <summary>Задает оболочка совместимости alglib.mincgsetcond(mincgstate state, Double epsg, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgsetgradientcheckalglibmincgstateDouble">
            <summary>Задает оболочка совместимости alglib.mincgsetgradientcheck(mincgstate state, Double teststep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgsetprecdefaultalglibmincgstate">
            <summary>Задает оболочка совместимости alglib.mincgsetprecdefault(mincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgsetprecdiagalglibmincgstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.mincgsetprecdiag(mincgstate state, Double[] d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgsetprecscalealglibmincgstate">
            <summary>Задает оболочка совместимости alglib.mincgsetprecscale(mincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgsetscalealglibmincgstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.mincgsetscale(mincgstate state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgsetstpmaxalglibmincgstateDouble">
            <summary>Задает оболочка совместимости alglib.mincgsetstpmax(mincgstate state, Double stpmax)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgsetxrepalglibmincgstateBoolean">
            <summary>Задает оболочка совместимости alglib.mincgsetxrep(mincgstate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mincgsuggeststepalglibmincgstateDouble">
            <summary>Задает оболочка совместимости alglib.mincgsuggeststep(mincgstate state, Double stp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgscreateInt32DoubleArrayalglibminlbfgsstateOut">
            <summary>Задает оболочка совместимости alglib.minlbfgscreate(Int32 m, Double[] x, minlbfgsstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgscreateInt32Int32DoubleArrayalglibminlbfgsstateOut">
            <summary>Задает оболочка совместимости alglib.minlbfgscreate(Int32 n, Int32 m, Double[] x, minlbfgsstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgscreatefInt32DoubleArrayDoublealglibminlbfgsstateOut">
            <summary>Задает оболочка совместимости alglib.minlbfgscreatef(Int32 m, Double[] x, Double diffstep, minlbfgsstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgscreatefInt32Int32DoubleArrayDoublealglibminlbfgsstateOut">
            <summary>Задает оболочка совместимости alglib.minlbfgscreatef(Int32 n, Int32 m, Double[] x, Double diffstep, minlbfgsstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgsiterationalglibminlbfgsstate">
            <summary>Задает оболочка совместимости alglib.minlbfgsiteration(minlbfgsstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgsoptimizealglibminlbfgsstatealglibndimensional_funcalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.minlbfgsoptimize(minlbfgsstate state, ndimensional_func func, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgsoptimizealglibminlbfgsstatealglibndimensional_gradalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.minlbfgsoptimize(minlbfgsstate state, ndimensional_grad grad, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgsrequestterminationalglibminlbfgsstate">
            <summary>Задает оболочка совместимости alglib.minlbfgsrequesttermination(minlbfgsstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgsrestartfromalglibminlbfgsstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.minlbfgsrestartfrom(minlbfgsstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgsresultsalglibminlbfgsstateDoubleArrayOutalglibminlbfgsreportOut">
            <summary>Задает оболочка совместимости alglib.minlbfgsresults(minlbfgsstate state, Double[]&amp; x, minlbfgsreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgsresultsbufalglibminlbfgsstateDoubleArrayRefalglibminlbfgsreport">
            <summary>Задает оболочка совместимости alglib.minlbfgsresultsbuf(minlbfgsstate state, Double[]&amp; x, minlbfgsreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgssetcholeskypreconditioneralglibminlbfgsstateDoubleMdArray2Boolean">
            <summary>Задает оболочка совместимости alglib.minlbfgssetcholeskypreconditioner(minlbfgsstate state, Double[,] p, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgssetcondalglibminlbfgsstateDoubleDoubleDoubleInt32">
            <summary>Задает оболочка совместимости alglib.minlbfgssetcond(minlbfgsstate state, Double epsg, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgssetdefaultpreconditioneralglibminlbfgsstate">
            <summary>Задает оболочка совместимости alglib.minlbfgssetdefaultpreconditioner(minlbfgsstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgssetgradientcheckalglibminlbfgsstateDouble">
            <summary>Задает оболочка совместимости alglib.minlbfgssetgradientcheck(minlbfgsstate state, Double teststep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgssetpreccholeskyalglibminlbfgsstateDoubleMdArray2Boolean">
            <summary>Задает оболочка совместимости alglib.minlbfgssetpreccholesky(minlbfgsstate state, Double[,] p, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgssetprecdefaultalglibminlbfgsstate">
            <summary>Задает оболочка совместимости alglib.minlbfgssetprecdefault(minlbfgsstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgssetprecdiagalglibminlbfgsstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.minlbfgssetprecdiag(minlbfgsstate state, Double[] d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgssetprecscalealglibminlbfgsstate">
            <summary>Задает оболочка совместимости alglib.minlbfgssetprecscale(minlbfgsstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgssetscalealglibminlbfgsstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.minlbfgssetscale(minlbfgsstate state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgssetstpmaxalglibminlbfgsstateDouble">
            <summary>Задает оболочка совместимости alglib.minlbfgssetstpmax(minlbfgsstate state, Double stpmax)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlbfgssetxrepalglibminlbfgsstateBoolean">
            <summary>Задает оболочка совместимости alglib.minlbfgssetxrep(minlbfgsstate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmcreatefghDoubleArrayalglibminlmstateOut">
            <summary>Задает оболочка совместимости alglib.minlmcreatefgh(Double[] x, minlmstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmcreatefghInt32DoubleArrayalglibminlmstateOut">
            <summary>Задает оболочка совместимости alglib.minlmcreatefgh(Int32 n, Double[] x, minlmstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmcreatefgjInt32DoubleArrayalglibminlmstateOut">
            <summary>Задает оболочка совместимости alglib.minlmcreatefgj(Int32 m, Double[] x, minlmstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmcreatefgjInt32Int32DoubleArrayalglibminlmstateOut">
            <summary>Задает оболочка совместимости alglib.minlmcreatefgj(Int32 n, Int32 m, Double[] x, minlmstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmcreatefjInt32DoubleArrayalglibminlmstateOut">
            <summary>Задает оболочка совместимости alglib.minlmcreatefj(Int32 m, Double[] x, minlmstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmcreatefjInt32Int32DoubleArrayalglibminlmstateOut">
            <summary>Задает оболочка совместимости alglib.minlmcreatefj(Int32 n, Int32 m, Double[] x, minlmstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmcreatevInt32DoubleArrayDoublealglibminlmstateOut">
            <summary>Задает оболочка совместимости alglib.minlmcreatev(Int32 m, Double[] x, Double diffstep, minlmstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmcreatevInt32Int32DoubleArrayDoublealglibminlmstateOut">
            <summary>Задает оболочка совместимости alglib.minlmcreatev(Int32 n, Int32 m, Double[] x, Double diffstep, minlmstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmcreatevgjInt32DoubleArrayalglibminlmstateOut">
            <summary>Задает оболочка совместимости alglib.minlmcreatevgj(Int32 m, Double[] x, minlmstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmcreatevgjInt32Int32DoubleArrayalglibminlmstateOut">
            <summary>Задает оболочка совместимости alglib.minlmcreatevgj(Int32 n, Int32 m, Double[] x, minlmstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmcreatevjInt32DoubleArrayalglibminlmstateOut">
            <summary>Задает оболочка совместимости alglib.minlmcreatevj(Int32 m, Double[] x, minlmstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmcreatevjInt32Int32DoubleArrayalglibminlmstateOut">
            <summary>Задает оболочка совместимости alglib.minlmcreatevj(Int32 n, Int32 m, Double[] x, minlmstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmiterationalglibminlmstate">
            <summary>Задает оболочка совместимости alglib.minlmiteration(minlmstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmoptimizealglibminlmstatealglibndimensional_funcalglibndimensional_gradalglibndimensional_hessalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.minlmoptimize(minlmstate state, ndimensional_func func, ndimensional_grad grad, ndimensional_hess hess, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmoptimizealglibminlmstatealglibndimensional_funcalglibndimensional_gradalglibndimensional_jacalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.minlmoptimize(minlmstate state, ndimensional_func func, ndimensional_grad grad, ndimensional_jac jac, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmoptimizealglibminlmstatealglibndimensional_funcalglibndimensional_jacalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.minlmoptimize(minlmstate state, ndimensional_func func, ndimensional_jac jac, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmoptimizealglibminlmstatealglibndimensional_fvecalglibndimensional_jacalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.minlmoptimize(minlmstate state, ndimensional_fvec fvec, ndimensional_jac jac, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmoptimizealglibminlmstatealglibndimensional_fvecalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.minlmoptimize(minlmstate state, ndimensional_fvec fvec, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmrequestterminationalglibminlmstate">
            <summary>Задает оболочка совместимости alglib.minlmrequesttermination(minlmstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmrestartfromalglibminlmstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.minlmrestartfrom(minlmstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmresultsalglibminlmstateDoubleArrayOutalglibminlmreportOut">
            <summary>Задает оболочка совместимости alglib.minlmresults(minlmstate state, Double[]&amp; x, minlmreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmresultsbufalglibminlmstateDoubleArrayRefalglibminlmreport">
            <summary>Задает оболочка совместимости alglib.minlmresultsbuf(minlmstate state, Double[]&amp; x, minlmreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmsetacctypealglibminlmstateInt32">
            <summary>Задает оболочка совместимости alglib.minlmsetacctype(minlmstate state, Int32 acctype)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmsetbcalglibminlmstateDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости alglib.minlmsetbc(minlmstate state, Double[] bndl, Double[] bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmsetcondalglibminlmstateDoubleDoubleDoubleInt32">
            <summary>Задает оболочка совместимости alglib.minlmsetcond(minlmstate state, Double epsg, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmsetgradientcheckalglibminlmstateDouble">
            <summary>Задает оболочка совместимости alglib.minlmsetgradientcheck(minlmstate state, Double teststep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmsetscalealglibminlmstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.minlmsetscale(minlmstate state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmsetstpmaxalglibminlmstateDouble">
            <summary>Задает оболочка совместимости alglib.minlmsetstpmax(minlmstate state, Double stpmax)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minlmsetxrepalglibminlmstateBoolean">
            <summary>Задает оболочка совместимости alglib.minlmsetxrep(minlmstate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlccreateDoubleArrayalglibminnlcstateOut">
            <summary>Задает оболочка совместимости alglib.minnlccreate(Double[] x, minnlcstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlccreateInt32DoubleArrayalglibminnlcstateOut">
            <summary>Задает оболочка совместимости alglib.minnlccreate(Int32 n, Double[] x, minnlcstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlccreatefDoubleArrayDoublealglibminnlcstateOut">
            <summary>Задает оболочка совместимости alglib.minnlccreatef(Double[] x, Double diffstep, minnlcstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlccreatefInt32DoubleArrayDoublealglibminnlcstateOut">
            <summary>Задает оболочка совместимости alglib.minnlccreatef(Int32 n, Double[] x, Double diffstep, minnlcstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlciterationalglibminnlcstate">
            <summary>Задает оболочка совместимости alglib.minnlciteration(minnlcstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcoptimizealglibminnlcstatealglibndimensional_fvecalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.minnlcoptimize(minnlcstate state, ndimensional_fvec fvec, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcoptimizealglibminnlcstatealglibndimensional_jacalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.minnlcoptimize(minnlcstate state, ndimensional_jac jac, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcrestartfromalglibminnlcstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.minnlcrestartfrom(minnlcstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcresultsalglibminnlcstateDoubleArrayOutalglibminnlcreportOut">
            <summary>Задает оболочка совместимости alglib.minnlcresults(minnlcstate state, Double[]&amp; x, minnlcreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcresultsbufalglibminnlcstateDoubleArrayRefalglibminnlcreport">
            <summary>Задает оболочка совместимости alglib.minnlcresultsbuf(minnlcstate state, Double[]&amp; x, minnlcreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcsetalgoaulalglibminnlcstateDoubleInt32">
            <summary>Задает оболочка совместимости alglib.minnlcsetalgoaul(minnlcstate state, Double rho, Int32 itscnt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcsetbcalglibminnlcstateDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости alglib.minnlcsetbc(minnlcstate state, Double[] bndl, Double[] bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcsetcondalglibminnlcstateDoubleDoubleDoubleInt32">
            <summary>Задает оболочка совместимости alglib.minnlcsetcond(minnlcstate state, Double epsg, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcsetgradientcheckalglibminnlcstateDouble">
            <summary>Задает оболочка совместимости alglib.minnlcsetgradientcheck(minnlcstate state, Double teststep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcsetlcalglibminnlcstateDoubleMdArray2Int32Array">
            <summary>Задает оболочка совместимости alglib.minnlcsetlc(minnlcstate state, Double[,] c, Int32[] ct)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcsetlcalglibminnlcstateDoubleMdArray2Int32ArrayInt32">
            <summary>Задает оболочка совместимости alglib.minnlcsetlc(minnlcstate state, Double[,] c, Int32[] ct, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcsetnlcalglibminnlcstateInt32Int32">
            <summary>Задает оболочка совместимости alglib.minnlcsetnlc(minnlcstate state, Int32 nlec, Int32 nlic)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcsetprecexactlowrankalglibminnlcstateInt32">
            <summary>Задает оболочка совместимости alglib.minnlcsetprecexactlowrank(minnlcstate state, Int32 updatefreq)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcsetprecinexactalglibminnlcstate">
            <summary>Задает оболочка совместимости alglib.minnlcsetprecinexact(minnlcstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcsetprecnonealglibminnlcstate">
            <summary>Задает оболочка совместимости alglib.minnlcsetprecnone(minnlcstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcsetscalealglibminnlcstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.minnlcsetscale(minnlcstate state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minnlcsetxrepalglibminnlcstateBoolean">
            <summary>Задает оболочка совместимости alglib.minnlcsetxrep(minnlcstate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpcreateInt32alglibminqpstateOut">
            <summary>Задает оболочка совместимости alglib.minqpcreate(Int32 n, minqpstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpoptimizealglibminqpstate">
            <summary>Задает оболочка совместимости alglib.minqpoptimize(minqpstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpresultsalglibminqpstateDoubleArrayOutalglibminqpreportOut">
            <summary>Задает оболочка совместимости alglib.minqpresults(minqpstate state, Double[]&amp; x, minqpreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpresultsbufalglibminqpstateDoubleArrayRefalglibminqpreport">
            <summary>Задает оболочка совместимости alglib.minqpresultsbuf(minqpstate state, Double[]&amp; x, minqpreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpsetalgobleicalglibminqpstateDoubleDoubleDoubleInt32">
            <summary>Задает оболочка совместимости alglib.minqpsetalgobleic(minqpstate state, Double epsg, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpsetalgocholeskyalglibminqpstate">
            <summary>Задает оболочка совместимости alglib.minqpsetalgocholesky(minqpstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpsetalgoquickqpalglibminqpstateDoubleDoubleDoubleInt32Boolean">
            <summary>Задает оболочка совместимости alglib.minqpsetalgoquickqp(minqpstate state, Double epsg, Double epsf, Double epsx, Int32 maxouterits, Boolean usenewton)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpsetbcalglibminqpstateDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости alglib.minqpsetbc(minqpstate state, Double[] bndl, Double[] bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpsetlcalglibminqpstateDoubleMdArray2Int32Array">
            <summary>Задает оболочка совместимости alglib.minqpsetlc(minqpstate state, Double[,] c, Int32[] ct)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpsetlcalglibminqpstateDoubleMdArray2Int32ArrayInt32">
            <summary>Задает оболочка совместимости alglib.minqpsetlc(minqpstate state, Double[,] c, Int32[] ct, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpsetlineartermalglibminqpstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.minqpsetlinearterm(minqpstate state, Double[] b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpsetoriginalglibminqpstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.minqpsetorigin(minqpstate state, Double[] xorigin)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpsetquadratictermalglibminqpstateDoubleMdArray2">
            <summary>Задает оболочка совместимости alglib.minqpsetquadraticterm(minqpstate state, Double[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpsetquadratictermalglibminqpstateDoubleMdArray2Boolean">
            <summary>Задает оболочка совместимости alglib.minqpsetquadraticterm(minqpstate state, Double[,] a, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpsetquadratictermsparsealglibminqpstatealglibsparsematrixBoolean">
            <summary>Задает оболочка совместимости alglib.minqpsetquadratictermsparse(minqpstate state, sparsematrix a, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpsetscalealglibminqpstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.minqpsetscale(minqpstate state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.minqpsetstartingpointalglibminqpstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.minqpsetstartingpoint(minqpstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpactivationfunctionDoubleInt32DoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.mlpactivationfunction(Double net, Int32 k, Double&amp; f, Double&amp; df, Double&amp; d2f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpallerrorssparsesubsetalglibmultilayerperceptronalglibsparsematrixInt32Int32ArrayInt32alglibmodelerrorsOut">
            <summary>Задает оболочка совместимости alglib.mlpallerrorssparsesubset(multilayerperceptron network, sparsematrix xy, Int32 setsize, Int32[] subset, Int32 subsetsize, modelerrors&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpallerrorssubsetalglibmultilayerperceptronDoubleMdArray2Int32Int32ArrayInt32alglibmodelerrorsOut">
            <summary>Задает оболочка совместимости alglib.mlpallerrorssubset(multilayerperceptron network, Double[,] xy, Int32 setsize, Int32[] subset, Int32 subsetsize, modelerrors&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpavgcealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mlpavgce(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpavgcesparsealglibmultilayerperceptronalglibsparsematrixInt32">
            <summary>Задает оболочка совместимости alglib.mlpavgcesparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpavgerroralglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mlpavgerror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpavgerrorsparsealglibmultilayerperceptronalglibsparsematrixInt32">
            <summary>Задает оболочка совместимости alglib.mlpavgerrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpavgrelerroralglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mlpavgrelerror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpavgrelerrorsparsealglibmultilayerperceptronalglibsparsematrixInt32">
            <summary>Задает оболочка совместимости alglib.mlpavgrelerrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpclserroralglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mlpclserror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcontinuetrainingalglibmlptraineralglibmultilayerperceptron">
            <summary>Задает оболочка совместимости alglib.mlpcontinuetraining(mlptrainer s, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcopyalglibmultilayerperceptronalglibmultilayerperceptronOut">
            <summary>Задает оболочка совместимости alglib.mlpcopy(multilayerperceptron network1, multilayerperceptron&amp; network2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcopytunableparametersalglibmultilayerperceptronalglibmultilayerperceptron">
            <summary>Задает оболочка совместимости alglib.mlpcopytunableparameters(multilayerperceptron network1, multilayerperceptron network2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcreate0Int32Int32alglibmultilayerperceptronOut">
            <summary>Задает оболочка совместимости alglib.mlpcreate0(Int32 nin, Int32 nout, multilayerperceptron&amp; network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcreate1Int32Int32Int32alglibmultilayerperceptronOut">
            <summary>Задает оболочка совместимости alglib.mlpcreate1(Int32 nin, Int32 nhid, Int32 nout, multilayerperceptron&amp; network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcreate2Int32Int32Int32Int32alglibmultilayerperceptronOut">
            <summary>Задает оболочка совместимости alglib.mlpcreate2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, multilayerperceptron&amp; network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcreateb0Int32Int32DoubleDoublealglibmultilayerperceptronOut">
            <summary>Задает оболочка совместимости alglib.mlpcreateb0(Int32 nin, Int32 nout, Double b, Double d, multilayerperceptron&amp; network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcreateb1Int32Int32Int32DoubleDoublealglibmultilayerperceptronOut">
            <summary>Задает оболочка совместимости alglib.mlpcreateb1(Int32 nin, Int32 nhid, Int32 nout, Double b, Double d, multilayerperceptron&amp; network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcreateb2Int32Int32Int32Int32DoubleDoublealglibmultilayerperceptronOut">
            <summary>Задает оболочка совместимости alglib.mlpcreateb2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, Double b, Double d, multilayerperceptron&amp; network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcreatec0Int32Int32alglibmultilayerperceptronOut">
            <summary>Задает оболочка совместимости alglib.mlpcreatec0(Int32 nin, Int32 nout, multilayerperceptron&amp; network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcreatec1Int32Int32Int32alglibmultilayerperceptronOut">
            <summary>Задает оболочка совместимости alglib.mlpcreatec1(Int32 nin, Int32 nhid, Int32 nout, multilayerperceptron&amp; network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcreatec2Int32Int32Int32Int32alglibmultilayerperceptronOut">
            <summary>Задает оболочка совместимости alglib.mlpcreatec2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, multilayerperceptron&amp; network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcreater0Int32Int32DoubleDoublealglibmultilayerperceptronOut">
            <summary>Задает оболочка совместимости alglib.mlpcreater0(Int32 nin, Int32 nout, Double a, Double b, multilayerperceptron&amp; network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcreater1Int32Int32Int32DoubleDoublealglibmultilayerperceptronOut">
            <summary>Задает оболочка совместимости alglib.mlpcreater1(Int32 nin, Int32 nhid, Int32 nout, Double a, Double b, multilayerperceptron&amp; network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcreater2Int32Int32Int32Int32DoubleDoublealglibmultilayerperceptronOut">
            <summary>Задает оболочка совместимости alglib.mlpcreater2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, Double a, Double b, multilayerperceptron&amp; network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcreatetrainerInt32Int32alglibmlptrainerOut">
            <summary>Задает оболочка совместимости alglib.mlpcreatetrainer(Int32 nin, Int32 nout, mlptrainer&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpcreatetrainerclsInt32Int32alglibmlptrainerOut">
            <summary>Задает оболочка совместимости alglib.mlpcreatetrainercls(Int32 nin, Int32 nclasses, mlptrainer&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpeavgcealglibmlpensembleDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mlpeavgce(mlpensemble ensemble, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpeavgerroralglibmlpensembleDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mlpeavgerror(mlpensemble ensemble, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpeavgrelerroralglibmlpensembleDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mlpeavgrelerror(mlpensemble ensemble, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpebagginglbfgsalglibmlpensembleDoubleMdArray2Int32DoubleInt32DoubleInt32Int32OutalglibmlpreportOutalglibmlpcvreportOut">
            <summary>Задает оболочка совместимости alglib.mlpebagginglbfgs(mlpensemble ensemble, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Double wstep, Int32 maxits, Int32&amp; info, mlpreport&amp; rep, mlpcvreport&amp; ooberrors)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpebagginglmalglibmlpensembleDoubleMdArray2Int32DoubleInt32Int32OutalglibmlpreportOutalglibmlpcvreportOut">
            <summary>Задает оболочка совместимости alglib.mlpebagginglm(mlpensemble ensemble, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Int32&amp; info, mlpreport&amp; rep, mlpcvreport&amp; ooberrors)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpecreate0Int32Int32Int32alglibmlpensembleOut">
            <summary>Задает оболочка совместимости alglib.mlpecreate0(Int32 nin, Int32 nout, Int32 ensemblesize, mlpensemble&amp; ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpecreate1Int32Int32Int32Int32alglibmlpensembleOut">
            <summary>Задает оболочка совместимости alglib.mlpecreate1(Int32 nin, Int32 nhid, Int32 nout, Int32 ensemblesize, mlpensemble&amp; ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpecreate2Int32Int32Int32Int32Int32alglibmlpensembleOut">
            <summary>Задает оболочка совместимости alglib.mlpecreate2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, Int32 ensemblesize, mlpensemble&amp; ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpecreateb0Int32Int32DoubleDoubleInt32alglibmlpensembleOut">
            <summary>Задает оболочка совместимости alglib.mlpecreateb0(Int32 nin, Int32 nout, Double b, Double d, Int32 ensemblesize, mlpensemble&amp; ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpecreateb1Int32Int32Int32DoubleDoubleInt32alglibmlpensembleOut">
            <summary>Задает оболочка совместимости alglib.mlpecreateb1(Int32 nin, Int32 nhid, Int32 nout, Double b, Double d, Int32 ensemblesize, mlpensemble&amp; ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpecreateb2Int32Int32Int32Int32DoubleDoubleInt32alglibmlpensembleOut">
            <summary>Задает оболочка совместимости alglib.mlpecreateb2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, Double b, Double d, Int32 ensemblesize, mlpensemble&amp; ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpecreatec0Int32Int32Int32alglibmlpensembleOut">
            <summary>Задает оболочка совместимости alglib.mlpecreatec0(Int32 nin, Int32 nout, Int32 ensemblesize, mlpensemble&amp; ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpecreatec1Int32Int32Int32Int32alglibmlpensembleOut">
            <summary>Задает оболочка совместимости alglib.mlpecreatec1(Int32 nin, Int32 nhid, Int32 nout, Int32 ensemblesize, mlpensemble&amp; ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpecreatec2Int32Int32Int32Int32Int32alglibmlpensembleOut">
            <summary>Задает оболочка совместимости alglib.mlpecreatec2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, Int32 ensemblesize, mlpensemble&amp; ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpecreatefromnetworkalglibmultilayerperceptronInt32alglibmlpensembleOut">
            <summary>Задает оболочка совместимости alglib.mlpecreatefromnetwork(multilayerperceptron network, Int32 ensemblesize, mlpensemble&amp; ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpecreater0Int32Int32DoubleDoubleInt32alglibmlpensembleOut">
            <summary>Задает оболочка совместимости alglib.mlpecreater0(Int32 nin, Int32 nout, Double a, Double b, Int32 ensemblesize, mlpensemble&amp; ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpecreater1Int32Int32Int32DoubleDoubleInt32alglibmlpensembleOut">
            <summary>Задает оболочка совместимости alglib.mlpecreater1(Int32 nin, Int32 nhid, Int32 nout, Double a, Double b, Int32 ensemblesize, mlpensemble&amp; ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpecreater2Int32Int32Int32Int32DoubleDoubleInt32alglibmlpensembleOut">
            <summary>Задает оболочка совместимости alglib.mlpecreater2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, Double a, Double b, Int32 ensemblesize, mlpensemble&amp; ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpeissoftmaxalglibmlpensemble">
            <summary>Задает оболочка совместимости alglib.mlpeissoftmax(mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpeprocessalglibmlpensembleDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.mlpeprocess(mlpensemble ensemble, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpeprocessialglibmlpensembleDoubleArrayDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.mlpeprocessi(mlpensemble ensemble, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpepropertiesalglibmlpensembleInt32OutInt32Out">
            <summary>Задает оболочка совместимости alglib.mlpeproperties(mlpensemble ensemble, Int32&amp; nin, Int32&amp; nout)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlperandomizealglibmlpensemble">
            <summary>Задает оболочка совместимости alglib.mlperandomize(mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlperelclserroralglibmlpensembleDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mlperelclserror(mlpensemble ensemble, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpermserroralglibmlpensembleDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mlpermserror(mlpensemble ensemble, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlperroralglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mlperror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlperrornalglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mlperrorn(multilayerperceptron network, Double[,] xy, Int32 ssize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlperrorsparsealglibmultilayerperceptronalglibsparsematrixInt32">
            <summary>Задает оболочка совместимости alglib.mlperrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlperrorsparsesubsetalglibmultilayerperceptronalglibsparsematrixInt32Int32ArrayInt32">
            <summary>Задает оболочка совместимости alglib.mlperrorsparsesubset(multilayerperceptron network, sparsematrix xy, Int32 setsize, Int32[] subset, Int32 subsetsize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlperrorsubsetalglibmultilayerperceptronDoubleMdArray2Int32Int32ArrayInt32">
            <summary>Задает оболочка совместимости alglib.mlperrorsubset(multilayerperceptron network, Double[,] xy, Int32 setsize, Int32[] subset, Int32 subsetsize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpeserializealglibmlpensembleStringOut">
            <summary>Задает оболочка совместимости alglib.mlpeserialize(mlpensemble obj, String&amp; s_out)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpetrainesalglibmlpensembleDoubleMdArray2Int32DoubleInt32Int32OutalglibmlpreportOut">
            <summary>Задает оболочка совместимости alglib.mlpetraines(mlpensemble ensemble, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Int32&amp; info, mlpreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpeunserializeStringalglibmlpensembleOut">
            <summary>Задает оболочка совместимости alglib.mlpeunserialize(String s_in, mlpensemble&amp; obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgetinputscalingalglibmultilayerperceptronInt32DoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.mlpgetinputscaling(multilayerperceptron network, Int32 i, Double&amp; mean, Double&amp; sigma)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgetinputscountalglibmultilayerperceptron">
            <summary>Задает оболочка совместимости alglib.mlpgetinputscount(multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgetlayerscountalglibmultilayerperceptron">
            <summary>Задает оболочка совместимости alglib.mlpgetlayerscount(multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgetlayersizealglibmultilayerperceptronInt32">
            <summary>Задает оболочка совместимости alglib.mlpgetlayersize(multilayerperceptron network, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgetneuroninfoalglibmultilayerperceptronInt32Int32Int32OutDoubleOut">
            <summary>Задает оболочка совместимости alglib.mlpgetneuroninfo(multilayerperceptron network, Int32 k, Int32 i, Int32&amp; fkind, Double&amp; threshold)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgetoutputscalingalglibmultilayerperceptronInt32DoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.mlpgetoutputscaling(multilayerperceptron network, Int32 i, Double&amp; mean, Double&amp; sigma)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgetoutputscountalglibmultilayerperceptron">
            <summary>Задает оболочка совместимости alglib.mlpgetoutputscount(multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgetweightalglibmultilayerperceptronInt32Int32Int32Int32">
            <summary>Задает оболочка совместимости alglib.mlpgetweight(multilayerperceptron network, Int32 k0, Int32 i0, Int32 k1, Int32 i1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgetweightscountalglibmultilayerperceptron">
            <summary>Задает оболочка совместимости alglib.mlpgetweightscount(multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgradalglibmultilayerperceptronDoubleArrayDoubleArrayDoubleOutDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.mlpgrad(multilayerperceptron network, Double[] x, Double[] desiredy, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgradbatchalglibmultilayerperceptronDoubleMdArray2Int32DoubleOutDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.mlpgradbatch(multilayerperceptron network, Double[,] xy, Int32 ssize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgradbatchsparsealglibmultilayerperceptronalglibsparsematrixInt32DoubleOutDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.mlpgradbatchsparse(multilayerperceptron network, sparsematrix xy, Int32 ssize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgradbatchsparsesubsetalglibmultilayerperceptronalglibsparsematrixInt32Int32ArrayInt32DoubleOutDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.mlpgradbatchsparsesubset(multilayerperceptron network, sparsematrix xy, Int32 setsize, Int32[] idx, Int32 subsetsize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgradbatchsubsetalglibmultilayerperceptronDoubleMdArray2Int32Int32ArrayInt32DoubleOutDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.mlpgradbatchsubset(multilayerperceptron network, Double[,] xy, Int32 setsize, Int32[] idx, Int32 subsetsize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgradnalglibmultilayerperceptronDoubleArrayDoubleArrayDoubleOutDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.mlpgradn(multilayerperceptron network, Double[] x, Double[] desiredy, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpgradnbatchalglibmultilayerperceptronDoubleMdArray2Int32DoubleOutDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.mlpgradnbatch(multilayerperceptron network, Double[,] xy, Int32 ssize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlphessianbatchalglibmultilayerperceptronDoubleMdArray2Int32DoubleOutDoubleArrayRefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.mlphessianbatch(multilayerperceptron network, Double[,] xy, Int32 ssize, Double&amp; e, Double[]&amp; grad, Double[,]&amp; h)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlphessiannbatchalglibmultilayerperceptronDoubleMdArray2Int32DoubleOutDoubleArrayRefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.mlphessiannbatch(multilayerperceptron network, Double[,] xy, Int32 ssize, Double&amp; e, Double[]&amp; grad, Double[,]&amp; h)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpinitpreprocessoralglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mlpinitpreprocessor(multilayerperceptron network, Double[,] xy, Int32 ssize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpissoftmaxalglibmultilayerperceptron">
            <summary>Задает оболочка совместимости alglib.mlpissoftmax(multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpkfoldcvalglibmlptraineralglibmultilayerperceptronInt32Int32alglibmlpreportOut">
            <summary>Задает оболочка совместимости alglib.mlpkfoldcv(mlptrainer s, multilayerperceptron network, Int32 nrestarts, Int32 foldscount, mlpreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpkfoldcvlbfgsalglibmultilayerperceptronDoubleMdArray2Int32DoubleInt32DoubleInt32Int32Int32OutalglibmlpreportOutalglibmlpcvreportOut">
            <summary>Задает оболочка совместимости alglib.mlpkfoldcvlbfgs(multilayerperceptron network, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Double wstep, Int32 maxits, Int32 foldscount, Int32&amp; info, mlpreport&amp; rep, mlpcvreport&amp; cvrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpkfoldcvlmalglibmultilayerperceptronDoubleMdArray2Int32DoubleInt32Int32Int32OutalglibmlpreportOutalglibmlpcvreportOut">
            <summary>Задает оболочка совместимости alglib.mlpkfoldcvlm(multilayerperceptron network, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Int32 foldscount, Int32&amp; info, mlpreport&amp; rep, mlpcvreport&amp; cvrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpprocessalglibmultilayerperceptronDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.mlpprocess(multilayerperceptron network, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpprocessialglibmultilayerperceptronDoubleArrayDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.mlpprocessi(multilayerperceptron network, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlppropertiesalglibmultilayerperceptronInt32OutInt32OutInt32Out">
            <summary>Задает оболочка совместимости alglib.mlpproperties(multilayerperceptron network, Int32&amp; nin, Int32&amp; nout, Int32&amp; wcount)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlprandomizealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости alglib.mlprandomize(multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlprandomizefullalglibmultilayerperceptron">
            <summary>Задает оболочка совместимости alglib.mlprandomizefull(multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlprelclserroralglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mlprelclserror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlprelclserrorsparsealglibmultilayerperceptronalglibsparsematrixInt32">
            <summary>Задает оболочка совместимости alglib.mlprelclserrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlprmserroralglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mlprmserror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlprmserrorsparsealglibmultilayerperceptronalglibsparsematrixInt32">
            <summary>Задает оболочка совместимости alglib.mlprmserrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpserializealglibmultilayerperceptronStringOut">
            <summary>Задает оболочка совместимости alglib.mlpserialize(multilayerperceptron obj, String&amp; s_out)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpsetalgobatchalglibmlptrainer">
            <summary>Задает оболочка совместимости alglib.mlpsetalgobatch(mlptrainer s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpsetcondalglibmlptrainerDoubleInt32">
            <summary>Задает оболочка совместимости alglib.mlpsetcond(mlptrainer s, Double wstep, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpsetdatasetalglibmlptrainerDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mlpsetdataset(mlptrainer s, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpsetdecayalglibmlptrainerDouble">
            <summary>Задает оболочка совместимости alglib.mlpsetdecay(mlptrainer s, Double decay)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpsetinputscalingalglibmultilayerperceptronInt32DoubleDouble">
            <summary>Задает оболочка совместимости alglib.mlpsetinputscaling(multilayerperceptron network, Int32 i, Double mean, Double sigma)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpsetneuroninfoalglibmultilayerperceptronInt32Int32Int32Double">
            <summary>Задает оболочка совместимости alglib.mlpsetneuroninfo(multilayerperceptron network, Int32 k, Int32 i, Int32 fkind, Double threshold)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpsetoutputscalingalglibmultilayerperceptronInt32DoubleDouble">
            <summary>Задает оболочка совместимости alglib.mlpsetoutputscaling(multilayerperceptron network, Int32 i, Double mean, Double sigma)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpsetsparsedatasetalglibmlptraineralglibsparsematrixInt32">
            <summary>Задает оболочка совместимости alglib.mlpsetsparsedataset(mlptrainer s, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpsetweightalglibmultilayerperceptronInt32Int32Int32Int32Double">
            <summary>Задает оболочка совместимости alglib.mlpsetweight(multilayerperceptron network, Int32 k0, Int32 i0, Int32 k1, Int32 i1, Double w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpstarttrainingalglibmlptraineralglibmultilayerperceptronBoolean">
            <summary>Задает оболочка совместимости alglib.mlpstarttraining(mlptrainer s, multilayerperceptron network, Boolean randomstart)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlptrainensembleesalglibmlptraineralglibmlpensembleInt32alglibmlpreportOut">
            <summary>Задает оболочка совместимости alglib.mlptrainensemblees(mlptrainer s, mlpensemble ensemble, Int32 nrestarts, mlpreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlptrainesalglibmultilayerperceptronDoubleMdArray2Int32DoubleMdArray2Int32DoubleInt32Int32OutalglibmlpreportOut">
            <summary>Задает оболочка совместимости alglib.mlptraines(multilayerperceptron network, Double[,] trnxy, Int32 trnsize, Double[,] valxy, Int32 valsize, Double decay, Int32 restarts, Int32&amp; info, mlpreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlptrainlbfgsalglibmultilayerperceptronDoubleMdArray2Int32DoubleInt32DoubleInt32Int32OutalglibmlpreportOut">
            <summary>Задает оболочка совместимости alglib.mlptrainlbfgs(multilayerperceptron network, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Double wstep, Int32 maxits, Int32&amp; info, mlpreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlptrainlmalglibmultilayerperceptronDoubleMdArray2Int32DoubleInt32Int32OutalglibmlpreportOut">
            <summary>Задает оболочка совместимости alglib.mlptrainlm(multilayerperceptron network, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Int32&amp; info, mlpreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlptrainnetworkalglibmlptraineralglibmultilayerperceptronInt32alglibmlpreportOut">
            <summary>Задает оболочка совместимости alglib.mlptrainnetwork(mlptrainer s, multilayerperceptron network, Int32 nrestarts, mlpreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mlpunserializeStringalglibmultilayerperceptronOut">
            <summary>Задает оболочка совместимости alglib.mlpunserialize(String s_in, multilayerperceptron&amp; obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mnlavgcealgliblogitmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mnlavgce(logitmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mnlavgerroralgliblogitmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mnlavgerror(logitmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mnlavgrelerroralgliblogitmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mnlavgrelerror(logitmodel lm, Double[,] xy, Int32 ssize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mnlclserroralgliblogitmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mnlclserror(logitmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mnlpackDoubleMdArray2Int32Int32algliblogitmodelOut">
            <summary>Задает оболочка совместимости alglib.mnlpack(Double[,] a, Int32 nvars, Int32 nclasses, logitmodel&amp; lm)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mnlprocessalgliblogitmodelDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.mnlprocess(logitmodel lm, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mnlprocessialgliblogitmodelDoubleArrayDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.mnlprocessi(logitmodel lm, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mnlrelclserroralgliblogitmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mnlrelclserror(logitmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mnlrmserroralgliblogitmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.mnlrmserror(logitmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mnltrainhDoubleMdArray2Int32Int32Int32Int32OutalgliblogitmodelOutalglibmnlreportOut">
            <summary>Задает оболочка совместимости alglib.mnltrainh(Double[,] xy, Int32 npoints, Int32 nvars, Int32 nclasses, Int32&amp; info, logitmodel&amp; lm, mnlreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.mnlunpackalgliblogitmodelDoubleMdArray2OutInt32OutInt32Out">
            <summary>Задает оболочка совместимости alglib.mnlunpack(logitmodel lm, Double[,]&amp; a, Int32&amp; nvars, Int32&amp; nclasses)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.nleqcreatelmInt32DoubleArrayalglibnleqstateOut">
            <summary>Задает оболочка совместимости alglib.nleqcreatelm(Int32 m, Double[] x, nleqstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.nleqcreatelmInt32Int32DoubleArrayalglibnleqstateOut">
            <summary>Задает оболочка совместимости alglib.nleqcreatelm(Int32 n, Int32 m, Double[] x, nleqstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.nleqiterationalglibnleqstate">
            <summary>Задает оболочка совместимости alglib.nleqiteration(nleqstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.nleqrestartfromalglibnleqstateDoubleArray">
            <summary>Задает оболочка совместимости alglib.nleqrestartfrom(nleqstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.nleqresultsalglibnleqstateDoubleArrayOutalglibnleqreportOut">
            <summary>Задает оболочка совместимости alglib.nleqresults(nleqstate state, Double[]&amp; x, nleqreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.nleqresultsbufalglibnleqstateDoubleArrayRefalglibnleqreport">
            <summary>Задает оболочка совместимости alglib.nleqresultsbuf(nleqstate state, Double[]&amp; x, nleqreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.nleqsetcondalglibnleqstateDoubleInt32">
            <summary>Задает оболочка совместимости alglib.nleqsetcond(nleqstate state, Double epsf, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.nleqsetstpmaxalglibnleqstateDouble">
            <summary>Задает оболочка совместимости alglib.nleqsetstpmax(nleqstate state, Double stpmax)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.nleqsetxrepalglibnleqstateBoolean">
            <summary>Задает оболочка совместимости alglib.nleqsetxrep(nleqstate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.nleqsolvealglibnleqstatealglibndimensional_funcalglibndimensional_jacalglibndimensional_repObject">
            <summary>Задает оболочка совместимости alglib.nleqsolve(nleqstate state, ndimensional_func func, ndimensional_jac jac, ndimensional_rep rep, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.normaldistributionDouble">
            <summary>Задает оболочка совместимости alglib.normaldistribution(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.normestimatorcreateInt32Int32Int32Int32alglibnormestimatorstateOut">
            <summary>Задает оболочка совместимости alglib.normestimatorcreate(Int32 m, Int32 n, Int32 nstart, Int32 nits, normestimatorstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.normestimatorestimatesparsealglibnormestimatorstatealglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.normestimatorestimatesparse(normestimatorstate state, sparsematrix a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.normestimatorresultsalglibnormestimatorstateDoubleOut">
            <summary>Задает оболочка совместимости alglib.normestimatorresults(normestimatorstate state, Double&amp; nrm)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.normestimatorsetseedalglibnormestimatorstateInt32">
            <summary>Задает оболочка совместимости alglib.normestimatorsetseed(normestimatorstate state, Int32 seedval)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.odesolveriterationalglibodesolverstate">
            <summary>Задает оболочка совместимости alglib.odesolveriteration(odesolverstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.odesolverresultsalglibodesolverstateInt32OutDoubleArrayOutDoubleMdArray2OutalglibodesolverreportOut">
            <summary>Задает оболочка совместимости alglib.odesolverresults(odesolverstate state, Int32&amp; m, Double[]&amp; xtbl, Double[,]&amp; ytbl, odesolverreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.odesolverrkckDoubleArrayDoubleArrayDoubleDoublealglibodesolverstateOut">
            <summary>Задает оболочка совместимости alglib.odesolverrkck(Double[] y, Double[] x, Double eps, Double h, odesolverstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.odesolverrkckDoubleArrayInt32DoubleArrayInt32DoubleDoublealglibodesolverstateOut">
            <summary>Задает оболочка совместимости alglib.odesolverrkck(Double[] y, Int32 n, Double[] x, Int32 m, Double eps, Double h, odesolverstate&amp; state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.odesolversolvealglibodesolverstatealglibndimensional_ode_rpObject">
            <summary>Задает оболочка совместимости alglib.odesolversolve(odesolverstate state, ndimensional_ode_rp diff, Object obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.onesamplesigntestDoubleArrayInt32DoubleDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.onesamplesigntest(Double[] x, Int32 n, Double median, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.onesamplevariancetestDoubleArrayInt32DoubleDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.onesamplevariancetest(Double[] x, Int32 n, Double variance, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.parametricrdpfixedDoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2OutInt32ArrayOutInt32Out">
            <summary>Задает оболочка совместимости alglib.parametricrdpfixed(Double[,] x, Int32 n, Int32 d, Int32 stopm, Double stopeps, Double[,]&amp; x2, Int32[]&amp; idx2, Int32&amp; nsections)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pcabuildbasisDoubleMdArray2Int32Int32Int32OutDoubleArrayOutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.pcabuildbasis(Double[,] x, Int32 npoints, Int32 nvars, Int32&amp; info, Double[]&amp; s2, Double[,]&amp; v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pearsoncorr2DoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости alglib.pearsoncorr2(Double[] x, Double[] y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pearsoncorr2DoubleArrayDoubleArrayInt32">
            <summary>Задает оболочка совместимости alglib.pearsoncorr2(Double[] x, Double[] y, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pearsoncorrelationDoubleArrayDoubleArrayInt32">
            <summary>Задает оболочка совместимости alglib.pearsoncorrelation(Double[] x, Double[] y, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pearsoncorrelationsignificanceDoubleInt32DoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.pearsoncorrelationsignificance(Double r, Int32 n, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pearsoncorrm2DoubleMdArray2DoubleMdArray2DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.pearsoncorrm2(Double[,] x, Double[,] y, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pearsoncorrm2DoubleMdArray2DoubleMdArray2Int32Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.pearsoncorrm2(Double[,] x, Double[,] y, Int32 n, Int32 m1, Int32 m2, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pearsoncorrmDoubleMdArray2DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.pearsoncorrm(Double[,] x, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pearsoncorrmDoubleMdArray2Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.pearsoncorrm(Double[,] x, Int32 n, Int32 m, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.poissoncdistributionInt32Double">
            <summary>Задает оболочка совместимости alglib.poissoncdistribution(Int32 k, Double m)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.poissondistributionInt32Double">
            <summary>Задает оболочка совместимости alglib.poissondistribution(Int32 k, Double m)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialbar2chebalglibbarycentricinterpolantDoubleDoubleDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.polynomialbar2cheb(barycentricinterpolant p, Double a, Double b, Double[]&amp; t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialbar2powalglibbarycentricinterpolantDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.polynomialbar2pow(barycentricinterpolant p, Double[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialbar2powalglibbarycentricinterpolantDoubleDoubleDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.polynomialbar2pow(barycentricinterpolant p, Double c, Double s, Double[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialbuildDoubleArrayDoubleArrayInt32alglibbarycentricinterpolantOut">
            <summary>Задает оболочка совместимости alglib.polynomialbuild(Double[] x, Double[] y, Int32 n, barycentricinterpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialbuildDoubleArrayDoubleArrayalglibbarycentricinterpolantOut">
            <summary>Задает оболочка совместимости alglib.polynomialbuild(Double[] x, Double[] y, barycentricinterpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialbuildcheb1DoubleDoubleDoubleArrayInt32alglibbarycentricinterpolantOut">
            <summary>Задает оболочка совместимости alglib.polynomialbuildcheb1(Double a, Double b, Double[] y, Int32 n, barycentricinterpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialbuildcheb1DoubleDoubleDoubleArrayalglibbarycentricinterpolantOut">
            <summary>Задает оболочка совместимости alglib.polynomialbuildcheb1(Double a, Double b, Double[] y, barycentricinterpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialbuildcheb2DoubleDoubleDoubleArrayInt32alglibbarycentricinterpolantOut">
            <summary>Задает оболочка совместимости alglib.polynomialbuildcheb2(Double a, Double b, Double[] y, Int32 n, barycentricinterpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialbuildcheb2DoubleDoubleDoubleArrayalglibbarycentricinterpolantOut">
            <summary>Задает оболочка совместимости alglib.polynomialbuildcheb2(Double a, Double b, Double[] y, barycentricinterpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialbuildeqdistDoubleDoubleDoubleArrayInt32alglibbarycentricinterpolantOut">
            <summary>Задает оболочка совместимости alglib.polynomialbuildeqdist(Double a, Double b, Double[] y, Int32 n, barycentricinterpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialbuildeqdistDoubleDoubleDoubleArrayalglibbarycentricinterpolantOut">
            <summary>Задает оболочка совместимости alglib.polynomialbuildeqdist(Double a, Double b, Double[] y, barycentricinterpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialcalccheb1DoubleDoubleDoubleArrayDouble">
            <summary>Задает оболочка совместимости alglib.polynomialcalccheb1(Double a, Double b, Double[] f, Double t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialcalccheb1DoubleDoubleDoubleArrayInt32Double">
            <summary>Задает оболочка совместимости alglib.polynomialcalccheb1(Double a, Double b, Double[] f, Int32 n, Double t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialcalccheb2DoubleDoubleDoubleArrayDouble">
            <summary>Задает оболочка совместимости alglib.polynomialcalccheb2(Double a, Double b, Double[] f, Double t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialcalccheb2DoubleDoubleDoubleArrayInt32Double">
            <summary>Задает оболочка совместимости alglib.polynomialcalccheb2(Double a, Double b, Double[] f, Int32 n, Double t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialcalceqdistDoubleDoubleDoubleArrayDouble">
            <summary>Задает оболочка совместимости alglib.polynomialcalceqdist(Double a, Double b, Double[] f, Double t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialcalceqdistDoubleDoubleDoubleArrayInt32Double">
            <summary>Задает оболочка совместимости alglib.polynomialcalceqdist(Double a, Double b, Double[] f, Int32 n, Double t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialcheb2barDoubleArrayDoubleDoublealglibbarycentricinterpolantOut">
            <summary>Задает оболочка совместимости alglib.polynomialcheb2bar(Double[] t, Double a, Double b, barycentricinterpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialcheb2barDoubleArrayInt32DoubleDoublealglibbarycentricinterpolantOut">
            <summary>Задает оболочка совместимости alglib.polynomialcheb2bar(Double[] t, Int32 n, Double a, Double b, barycentricinterpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialfitDoubleArrayDoubleArrayInt32Int32Int32OutalglibbarycentricinterpolantOutalglibpolynomialfitreportOut">
            <summary>Задает оболочка совместимости alglib.polynomialfit(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, barycentricinterpolant&amp; p, polynomialfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialfitDoubleArrayDoubleArrayInt32Int32OutalglibbarycentricinterpolantOutalglibpolynomialfitreportOut">
            <summary>Задает оболочка совместимости alglib.polynomialfit(Double[] x, Double[] y, Int32 m, Int32&amp; info, barycentricinterpolant&amp; p, polynomialfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialfitwcDoubleArrayDoubleArrayDoubleArrayDoubleArrayDoubleArrayInt32ArrayInt32Int32OutalglibbarycentricinterpolantOutalglibpolynomialfitreportOut">
            <summary>Задает оболочка совместимости alglib.polynomialfitwc(Double[] x, Double[] y, Double[] w, Double[] xc, Double[] yc, Int32[] dc, Int32 m, Int32&amp; info, barycentricinterpolant&amp; p, polynomialfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialfitwcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32OutalglibbarycentricinterpolantOutalglibpolynomialfitreportOut">
            <summary>Задает оболочка совместимости alglib.polynomialfitwc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, barycentricinterpolant&amp; p, polynomialfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialpow2barDoubleArrayInt32DoubleDoublealglibbarycentricinterpolantOut">
            <summary>Задает оболочка совместимости alglib.polynomialpow2bar(Double[] a, Int32 n, Double c, Double s, barycentricinterpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialpow2barDoubleArrayalglibbarycentricinterpolantOut">
            <summary>Задает оболочка совместимости alglib.polynomialpow2bar(Double[] a, barycentricinterpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.polynomialsolveDoubleArrayInt32alglibcomplexArrayOutalglibpolynomialsolverreportOut">
            <summary>Задает оболочка совместимости alglib.polynomialsolve(Double[] a, Int32 n, complex[]&amp; x, polynomialsolverreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.psiDouble">
            <summary>Задает оболочка совместимости alglib.psi(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline2arclengthalglibpspline2interpolantDoubleDouble">
            <summary>Задает оболочка совместимости alglib.pspline2arclength(pspline2interpolant p, Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline2buildDoubleMdArray2Int32Int32Int32alglibpspline2interpolantOut">
            <summary>Задает оболочка совместимости alglib.pspline2build(Double[,] xy, Int32 n, Int32 st, Int32 pt, pspline2interpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline2buildperiodicDoubleMdArray2Int32Int32Int32alglibpspline2interpolantOut">
            <summary>Задает оболочка совместимости alglib.pspline2buildperiodic(Double[,] xy, Int32 n, Int32 st, Int32 pt, pspline2interpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline2calcalglibpspline2interpolantDoubleDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.pspline2calc(pspline2interpolant p, Double t, Double&amp; x, Double&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline2diff2alglibpspline2interpolantDoubleDoubleOutDoubleOutDoubleOutDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.pspline2diff2(pspline2interpolant p, Double t, Double&amp; x, Double&amp; dx, Double&amp; d2x, Double&amp; y, Double&amp; dy, Double&amp; d2y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline2diffalglibpspline2interpolantDoubleDoubleOutDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.pspline2diff(pspline2interpolant p, Double t, Double&amp; x, Double&amp; dx, Double&amp; y, Double&amp; dy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline2parametervaluesalglibpspline2interpolantInt32OutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.pspline2parametervalues(pspline2interpolant p, Int32&amp; n, Double[]&amp; t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline2tangentalglibpspline2interpolantDoubleDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.pspline2tangent(pspline2interpolant p, Double t, Double&amp; x, Double&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline3arclengthalglibpspline3interpolantDoubleDouble">
            <summary>Задает оболочка совместимости alglib.pspline3arclength(pspline3interpolant p, Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline3buildDoubleMdArray2Int32Int32Int32alglibpspline3interpolantOut">
            <summary>Задает оболочка совместимости alglib.pspline3build(Double[,] xy, Int32 n, Int32 st, Int32 pt, pspline3interpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline3buildperiodicDoubleMdArray2Int32Int32Int32alglibpspline3interpolantOut">
            <summary>Задает оболочка совместимости alglib.pspline3buildperiodic(Double[,] xy, Int32 n, Int32 st, Int32 pt, pspline3interpolant&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline3calcalglibpspline3interpolantDoubleDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.pspline3calc(pspline3interpolant p, Double t, Double&amp; x, Double&amp; y, Double&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline3diff2alglibpspline3interpolantDoubleDoubleOutDoubleOutDoubleOutDoubleOutDoubleOutDoubleOutDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.pspline3diff2(pspline3interpolant p, Double t, Double&amp; x, Double&amp; dx, Double&amp; d2x, Double&amp; y, Double&amp; dy, Double&amp; d2y, Double&amp; z, Double&amp; dz, Double&amp; d2z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline3diffalglibpspline3interpolantDoubleDoubleOutDoubleOutDoubleOutDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.pspline3diff(pspline3interpolant p, Double t, Double&amp; x, Double&amp; dx, Double&amp; y, Double&amp; dy, Double&amp; z, Double&amp; dz)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline3parametervaluesalglibpspline3interpolantInt32OutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.pspline3parametervalues(pspline3interpolant p, Int32&amp; n, Double[]&amp; t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.pspline3tangentalglibpspline3interpolantDoubleDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.pspline3tangent(pspline3interpolant p, Double t, Double&amp; x, Double&amp; y, Double&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rankdataDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.rankdata(Double[,]&amp; xy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rankdataDoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.rankdata(Double[,]&amp; xy, Int32 npoints, Int32 nfeatures)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rankdatacenteredDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.rankdatacentered(Double[,]&amp; xy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rankdatacenteredDoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.rankdatacentered(Double[,]&amp; xy, Int32 npoints, Int32 nfeatures)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfbuildmodelalglibrbfmodelalglibrbfreportOut">
            <summary>Задает оболочка совместимости alglib.rbfbuildmodel(rbfmodel s, rbfreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfcalc2alglibrbfmodelDoubleDouble">
            <summary>Задает оболочка совместимости alglib.rbfcalc2(rbfmodel s, Double x0, Double x1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfcalc3alglibrbfmodelDoubleDoubleDouble">
            <summary>Задает оболочка совместимости alglib.rbfcalc3(rbfmodel s, Double x0, Double x1, Double x2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfcalcalglibrbfmodelDoubleArrayDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.rbfcalc(rbfmodel s, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfcalcbufalglibrbfmodelDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.rbfcalcbuf(rbfmodel s, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfcreateInt32Int32alglibrbfmodelOut">
            <summary>Задает оболочка совместимости alglib.rbfcreate(Int32 nx, Int32 ny, rbfmodel&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfgridcalc2alglibrbfmodelDoubleArrayInt32DoubleArrayInt32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rbfgridcalc2(rbfmodel s, Double[] x0, Int32 n0, Double[] x1, Int32 n1, Double[,]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfserializealglibrbfmodelStringOut">
            <summary>Задает оболочка совместимости alglib.rbfserialize(rbfmodel obj, String&amp; s_out)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfsetalgomultilayeralglibrbfmodelDoubleInt32">
            <summary>Задает оболочка совместимости alglib.rbfsetalgomultilayer(rbfmodel s, Double rbase, Int32 nlayers)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfsetalgomultilayeralglibrbfmodelDoubleInt32Double">
            <summary>Задает оболочка совместимости alglib.rbfsetalgomultilayer(rbfmodel s, Double rbase, Int32 nlayers, Double lambdav)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfsetalgoqnnalglibrbfmodel">
            <summary>Задает оболочка совместимости alglib.rbfsetalgoqnn(rbfmodel s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfsetalgoqnnalglibrbfmodelDoubleDouble">
            <summary>Задает оболочка совместимости alglib.rbfsetalgoqnn(rbfmodel s, Double q, Double z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfsetconsttermalglibrbfmodel">
            <summary>Задает оболочка совместимости alglib.rbfsetconstterm(rbfmodel s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfsetlintermalglibrbfmodel">
            <summary>Задает оболочка совместимости alglib.rbfsetlinterm(rbfmodel s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfsetpointsalglibrbfmodelDoubleMdArray2">
            <summary>Задает оболочка совместимости alglib.rbfsetpoints(rbfmodel s, Double[,] xy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfsetpointsalglibrbfmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.rbfsetpoints(rbfmodel s, Double[,] xy, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfsetzerotermalglibrbfmodel">
            <summary>Задает оболочка совместимости alglib.rbfsetzeroterm(rbfmodel s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfunpackalglibrbfmodelInt32OutInt32OutDoubleMdArray2OutInt32OutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rbfunpack(rbfmodel s, Int32&amp; nx, Int32&amp; ny, Double[,]&amp; xwr, Int32&amp; nc, Double[,]&amp; v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rbfunserializeStringalglibrbfmodelOut">
            <summary>Задает оболочка совместимости alglib.rbfunserialize(String s_in, rbfmodel&amp; obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixbdDoubleMdArray2RefInt32Int32DoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.rmatrixbd(Double[,]&amp; a, Int32 m, Int32 n, Double[]&amp; tauq, Double[]&amp; taup)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixbdmultiplybypDoubleMdArray2Int32Int32DoubleArrayDoubleMdArray2RefInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости alglib.rmatrixbdmultiplybyp(Double[,] qp, Int32 m, Int32 n, Double[] taup, Double[,]&amp; z, Int32 zrows, Int32 zcolumns, Boolean fromtheright, Boolean dotranspose)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixbdmultiplybyqDoubleMdArray2Int32Int32DoubleArrayDoubleMdArray2RefInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости alglib.rmatrixbdmultiplybyq(Double[,] qp, Int32 m, Int32 n, Double[] tauq, Double[,]&amp; z, Int32 zrows, Int32 zcolumns, Boolean fromtheright, Boolean dotranspose)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixbdsvdDoubleArrayRefDoubleArrayInt32BooleanBooleanDoubleMdArray2RefInt32DoubleMdArray2RefInt32DoubleMdArray2RefInt32">
            <summary>Задает оболочка совместимости alglib.rmatrixbdsvd(Double[]&amp; d, Double[] e, Int32 n, Boolean isupper, Boolean isfractionalaccuracyrequired, Double[,]&amp; u, Int32 nru, Double[,]&amp; c, Int32 ncc, Double[,]&amp; vt, Int32 ncvt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixbdunpackdiagonalsDoubleMdArray2Int32Int32BooleanOutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.rmatrixbdunpackdiagonals(Double[,] b, Int32 m, Int32 n, Boolean&amp; isupper, Double[]&amp; d, Double[]&amp; e)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixbdunpackptDoubleMdArray2Int32Int32DoubleArrayInt32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixbdunpackpt(Double[,] qp, Int32 m, Int32 n, Double[] taup, Int32 ptrows, Double[,]&amp; pt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixbdunpackqDoubleMdArray2Int32Int32DoubleArrayInt32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixbdunpackq(Double[,] qp, Int32 m, Int32 n, Double[] tauq, Int32 qcolumns, Double[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixcopyInt32Int32DoubleMdArray2Int32Int32DoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.rmatrixcopy(Int32 m, Int32 n, Double[,] a, Int32 ia, Int32 ja, Double[,]&amp; b, Int32 ib, Int32 jb)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixdetDoubleMdArray2">
            <summary>Задает оболочка совместимости alglib.rmatrixdet(Double[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixdetDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.rmatrixdet(Double[,] a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixenforcesymmetricityDoubleMdArray2RefInt32Boolean">
            <summary>Задает оболочка совместимости alglib.rmatrixenforcesymmetricity(Double[,]&amp; a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixevdDoubleMdArray2Int32Int32DoubleArrayOutDoubleArrayOutDoubleMdArray2OutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixevd(Double[,] a, Int32 n, Int32 vneeded, Double[]&amp; wr, Double[]&amp; wi, Double[,]&amp; vl, Double[,]&amp; vr)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixgemmInt32Int32Int32DoubleDoubleMdArray2Int32Int32Int32DoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.rmatrixgemm(Int32 m, Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Int32 optypea, Double[,] b, Int32 ib, Int32 jb, Int32 optypeb, Double beta, Double[,]&amp; c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixhessenbergDoubleMdArray2RefInt32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.rmatrixhessenberg(Double[,]&amp; a, Int32 n, Double[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixhessenbergunpackhDoubleMdArray2Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixhessenbergunpackh(Double[,] a, Int32 n, Double[,]&amp; h)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixhessenbergunpackqDoubleMdArray2Int32DoubleArrayDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixhessenbergunpackq(Double[,] a, Int32 n, Double[] tau, Double[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixinverseDoubleMdArray2RefInt32Int32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.rmatrixinverse(Double[,]&amp; a, Int32 n, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixinverseDoubleMdArray2RefInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.rmatrixinverse(Double[,]&amp; a, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixinvupdatecolumnDoubleMdArray2RefInt32Int32DoubleArray">
            <summary>Задает оболочка совместимости alglib.rmatrixinvupdatecolumn(Double[,]&amp; inva, Int32 n, Int32 updcolumn, Double[] u)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixinvupdaterowDoubleMdArray2RefInt32Int32DoubleArray">
            <summary>Задает оболочка совместимости alglib.rmatrixinvupdaterow(Double[,]&amp; inva, Int32 n, Int32 updrow, Double[] v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixinvupdatesimpleDoubleMdArray2RefInt32Int32Int32Double">
            <summary>Задает оболочка совместимости alglib.rmatrixinvupdatesimple(Double[,]&amp; inva, Int32 n, Int32 updrow, Int32 updcolumn, Double updval)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixinvupdateuvDoubleMdArray2RefInt32DoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости alglib.rmatrixinvupdateuv(Double[,]&amp; inva, Int32 n, Double[] u, Double[] v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixlefttrsmInt32Int32DoubleMdArray2Int32Int32BooleanBooleanInt32DoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.rmatrixlefttrsm(Int32 m, Int32 n, Double[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, Double[,]&amp; x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixlqDoubleMdArray2RefInt32Int32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.rmatrixlq(Double[,]&amp; a, Int32 m, Int32 n, Double[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixlqunpacklDoubleMdArray2Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixlqunpackl(Double[,] a, Int32 m, Int32 n, Double[,]&amp; l)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixlqunpackqDoubleMdArray2Int32Int32DoubleArrayInt32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixlqunpackq(Double[,] a, Int32 m, Int32 n, Double[] tau, Int32 qrows, Double[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixluDoubleMdArray2RefInt32Int32Int32ArrayOut">
            <summary>Задает оболочка совместимости alglib.rmatrixlu(Double[,]&amp; a, Int32 m, Int32 n, Int32[]&amp; pivots)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixludetDoubleMdArray2Int32Array">
            <summary>Задает оболочка совместимости alglib.rmatrixludet(Double[,] a, Int32[] pivots)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixludetDoubleMdArray2Int32ArrayInt32">
            <summary>Задает оболочка совместимости alglib.rmatrixludet(Double[,] a, Int32[] pivots, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixluinverseDoubleMdArray2RefInt32ArrayInt32Int32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.rmatrixluinverse(Double[,]&amp; a, Int32[] pivots, Int32 n, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixluinverseDoubleMdArray2RefInt32ArrayInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.rmatrixluinverse(Double[,]&amp; a, Int32[] pivots, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixlurcond1DoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.rmatrixlurcond1(Double[,] lua, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixlurcondinfDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.rmatrixlurcondinf(Double[,] lua, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixlusolveDoubleMdArray2Int32ArrayInt32DoubleArrayInt32OutalglibdensesolverreportOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.rmatrixlusolve(Double[,] lua, Int32[] p, Int32 n, Double[] b, Int32&amp; info, densesolverreport&amp; rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixlusolvemDoubleMdArray2Int32ArrayInt32DoubleMdArray2Int32Int32OutalglibdensesolverreportOutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixlusolvem(Double[,] lua, Int32[] p, Int32 n, Double[,] b, Int32 m, Int32&amp; info, densesolverreport&amp; rep, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixmixedsolveDoubleMdArray2DoubleMdArray2Int32ArrayInt32DoubleArrayInt32OutalglibdensesolverreportOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.rmatrixmixedsolve(Double[,] a, Double[,] lua, Int32[] p, Int32 n, Double[] b, Int32&amp; info, densesolverreport&amp; rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixmixedsolvemDoubleMdArray2DoubleMdArray2Int32ArrayInt32DoubleMdArray2Int32Int32OutalglibdensesolverreportOutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixmixedsolvem(Double[,] a, Double[,] lua, Int32[] p, Int32 n, Double[,] b, Int32 m, Int32&amp; info, densesolverreport&amp; rep, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixmvInt32Int32DoubleMdArray2Int32Int32Int32DoubleArrayInt32DoubleArrayRefInt32">
            <summary>Задает оболочка совместимости alglib.rmatrixmv(Int32 m, Int32 n, Double[,] a, Int32 ia, Int32 ja, Int32 opa, Double[] x, Int32 ix, Double[]&amp; y, Int32 iy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixqrDoubleMdArray2RefInt32Int32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.rmatrixqr(Double[,]&amp; a, Int32 m, Int32 n, Double[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixqrunpackqDoubleMdArray2Int32Int32DoubleArrayInt32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixqrunpackq(Double[,] a, Int32 m, Int32 n, Double[] tau, Int32 qcolumns, Double[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixqrunpackrDoubleMdArray2Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixqrunpackr(Double[,] a, Int32 m, Int32 n, Double[,]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixrank1Int32Int32DoubleMdArray2RefInt32Int32DoubleArrayRefInt32DoubleArrayRefInt32">
            <summary>Задает оболочка совместимости alglib.rmatrixrank1(Int32 m, Int32 n, Double[,]&amp; a, Int32 ia, Int32 ja, Double[]&amp; u, Int32 iu, Double[]&amp; v, Int32 iv)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixrcond1DoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.rmatrixrcond1(Double[,] a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixrcondinfDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.rmatrixrcondinf(Double[,] a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixrighttrsmInt32Int32DoubleMdArray2Int32Int32BooleanBooleanInt32DoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.rmatrixrighttrsm(Int32 m, Int32 n, Double[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, Double[,]&amp; x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixrndcondInt32DoubleDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixrndcond(Int32 n, Double c, Double[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixrndorthogonalInt32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixrndorthogonal(Int32 n, Double[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixrndorthogonalfromtheleftDoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.rmatrixrndorthogonalfromtheleft(Double[,]&amp; a, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixrndorthogonalfromtherightDoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.rmatrixrndorthogonalfromtheright(Double[,]&amp; a, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixschurDoubleMdArray2RefInt32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixschur(Double[,]&amp; a, Int32 n, Double[,]&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixsolveDoubleMdArray2Int32DoubleArrayInt32OutalglibdensesolverreportOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.rmatrixsolve(Double[,] a, Int32 n, Double[] b, Int32&amp; info, densesolverreport&amp; rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixsolvelsDoubleMdArray2Int32Int32DoubleArrayDoubleInt32OutalglibdensesolverlsreportOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.rmatrixsolvels(Double[,] a, Int32 nrows, Int32 ncols, Double[] b, Double threshold, Int32&amp; info, densesolverlsreport&amp; rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixsolvemDoubleMdArray2Int32DoubleMdArray2Int32BooleanInt32OutalglibdensesolverreportOutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixsolvem(Double[,] a, Int32 n, Double[,] b, Int32 m, Boolean rfs, Int32&amp; info, densesolverreport&amp; rep, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixsvdDoubleMdArray2Int32Int32Int32Int32Int32DoubleArrayOutDoubleMdArray2OutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.rmatrixsvd(Double[,] a, Int32 m, Int32 n, Int32 uneeded, Int32 vtneeded, Int32 additionalmemory, Double[]&amp; w, Double[,]&amp; u, Double[,]&amp; vt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixsyrkInt32Int32DoubleDoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2RefInt32Int32Boolean">
            <summary>Задает оболочка совместимости alglib.rmatrixsyrk(Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, Double[,]&amp; c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixtransposeInt32Int32DoubleMdArray2Int32Int32DoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.rmatrixtranspose(Int32 m, Int32 n, Double[,] a, Int32 ia, Int32 ja, Double[,]&amp; b, Int32 ib, Int32 jb)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixtrinverseDoubleMdArray2RefBooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.rmatrixtrinverse(Double[,]&amp; a, Boolean isupper, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixtrinverseDoubleMdArray2RefInt32BooleanBooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.rmatrixtrinverse(Double[,]&amp; a, Int32 n, Boolean isupper, Boolean isunit, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixtrrcond1DoubleMdArray2Int32BooleanBoolean">
            <summary>Задает оболочка совместимости alglib.rmatrixtrrcond1(Double[,] a, Int32 n, Boolean isupper, Boolean isunit)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.rmatrixtrrcondinfDoubleMdArray2Int32BooleanBoolean">
            <summary>Задает оболочка совместимости alglib.rmatrixtrrcondinf(Double[,] a, Int32 n, Boolean isupper, Boolean isunit)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sampleadevDoubleArrayDoubleOut">
            <summary>Задает оболочка совместимости alglib.sampleadev(Double[] x, Double&amp; adev)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sampleadevDoubleArrayInt32DoubleOut">
            <summary>Задает оболочка совместимости alglib.sampleadev(Double[] x, Int32 n, Double&amp; adev)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.samplekurtosisDoubleArray">
            <summary>Задает оболочка совместимости alglib.samplekurtosis(Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.samplekurtosisDoubleArrayInt32">
            <summary>Задает оболочка совместимости alglib.samplekurtosis(Double[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.samplemeanDoubleArray">
            <summary>Задает оболочка совместимости alglib.samplemean(Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.samplemeanDoubleArrayInt32">
            <summary>Задает оболочка совместимости alglib.samplemean(Double[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.samplemedianDoubleArrayDoubleOut">
            <summary>Задает оболочка совместимости alglib.samplemedian(Double[] x, Double&amp; median)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.samplemedianDoubleArrayInt32DoubleOut">
            <summary>Задает оболочка совместимости alglib.samplemedian(Double[] x, Int32 n, Double&amp; median)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.samplemomentsDoubleArrayDoubleOutDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.samplemoments(Double[] x, Double&amp; mean, Double&amp; variance, Double&amp; skewness, Double&amp; kurtosis)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.samplemomentsDoubleArrayInt32DoubleOutDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.samplemoments(Double[] x, Int32 n, Double&amp; mean, Double&amp; variance, Double&amp; skewness, Double&amp; kurtosis)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.samplepercentileDoubleArrayDoubleDoubleOut">
            <summary>Задает оболочка совместимости alglib.samplepercentile(Double[] x, Double p, Double&amp; v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.samplepercentileDoubleArrayInt32DoubleDoubleOut">
            <summary>Задает оболочка совместимости alglib.samplepercentile(Double[] x, Int32 n, Double p, Double&amp; v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sampleskewnessDoubleArray">
            <summary>Задает оболочка совместимости alglib.sampleskewness(Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sampleskewnessDoubleArrayInt32">
            <summary>Задает оболочка совместимости alglib.sampleskewness(Double[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.samplevarianceDoubleArray">
            <summary>Задает оболочка совместимости alglib.samplevariance(Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.samplevarianceDoubleArrayInt32">
            <summary>Задает оболочка совместимости alglib.samplevariance(Double[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.setnworkersInt32">
            <summary>Задает оболочка совместимости alglib.setnworkers(Int32 nworkers)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sinecosineintegralsDoubleDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.sinecosineintegrals(Double x, Double&amp; si, Double&amp; ci)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smatrixevdDoubleMdArray2Int32Int32BooleanDoubleArrayOutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smatrixevd(Double[,] a, Int32 n, Int32 zneeded, Boolean isupper, Double[]&amp; d, Double[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smatrixevdiDoubleMdArray2Int32Int32BooleanInt32Int32DoubleArrayOutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smatrixevdi(Double[,] a, Int32 n, Int32 zneeded, Boolean isupper, Int32 i1, Int32 i2, Double[]&amp; w, Double[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smatrixevdrDoubleMdArray2Int32Int32BooleanDoubleDoubleInt32OutDoubleArrayOutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smatrixevdr(Double[,] a, Int32 n, Int32 zneeded, Boolean isupper, Double b1, Double b2, Int32&amp; m, Double[]&amp; w, Double[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smatrixgevdDoubleMdArray2Int32BooleanDoubleMdArray2BooleanInt32Int32DoubleArrayOutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smatrixgevd(Double[,] a, Int32 n, Boolean isuppera, Double[,] b, Boolean isupperb, Int32 zneeded, Int32 problemtype, Double[]&amp; d, Double[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smatrixgevdreduceDoubleMdArray2RefInt32BooleanDoubleMdArray2BooleanInt32DoubleMdArray2OutBooleanOut">
            <summary>Задает оболочка совместимости alglib.smatrixgevdreduce(Double[,]&amp; a, Int32 n, Boolean isuppera, Double[,] b, Boolean isupperb, Int32 problemtype, Double[,]&amp; r, Boolean&amp; isupperr)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smatrixrndcondInt32DoubleDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smatrixrndcond(Int32 n, Double c, Double[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smatrixrndmultiplyDoubleMdArray2RefInt32">
            <summary>Задает оболочка совместимости alglib.smatrixrndmultiply(Double[,]&amp; a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smatrixtdDoubleMdArray2RefInt32BooleanDoubleArrayOutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.smatrixtd(Double[,]&amp; a, Int32 n, Boolean isupper, Double[]&amp; tau, Double[]&amp; d, Double[]&amp; e)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smatrixtdevdDoubleArrayRefDoubleArrayInt32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.smatrixtdevd(Double[]&amp; d, Double[] e, Int32 n, Int32 zneeded, Double[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smatrixtdevdiDoubleArrayRefDoubleArrayInt32Int32Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.smatrixtdevdi(Double[]&amp; d, Double[] e, Int32 n, Int32 zneeded, Int32 i1, Int32 i2, Double[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smatrixtdevdrDoubleArrayRefDoubleArrayInt32Int32DoubleDoubleInt32OutDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.smatrixtdevdr(Double[]&amp; d, Double[] e, Int32 n, Int32 zneeded, Double a, Double b, Int32&amp; m, Double[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smatrixtdunpackqDoubleMdArray2Int32BooleanDoubleArrayDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smatrixtdunpackq(Double[,] a, Int32 n, Boolean isupper, Double[] tau, Double[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_barycentricfitfloaterhormannDoubleArrayDoubleArrayInt32Int32Int32OutalglibbarycentricinterpolantOutalglibbarycentricfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_barycentricfitfloaterhormann(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, barycentricinterpolant&amp; b, barycentricfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_barycentricfitfloaterhormannwcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32OutalglibbarycentricinterpolantOutalglibbarycentricfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_barycentricfitfloaterhormannwc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, barycentricinterpolant&amp; b, barycentricfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_clusterizergetdistancesDoubleMdArray2Int32Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_clusterizergetdistances(Double[,] xy, Int32 npoints, Int32 nfeatures, Int32 disttype, Double[,]&amp; d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_clusterizerrunahcalglibclusterizerstatealglibahcreportOut">
            <summary>Задает оболочка совместимости alglib.smp_clusterizerrunahc(clusterizerstate s, ahcreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixgemmInt32Int32Int32alglibcomplexalglibcomplexMdArray2Int32Int32Int32alglibcomplexMdArray2Int32Int32Int32alglibcomplexalglibcomplexMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixgemm(Int32 m, Int32 n, Int32 k, complex alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, complex[,] b, Int32 ib, Int32 jb, Int32 optypeb, complex beta, complex[,]&amp; c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixherkInt32Int32DoublealglibcomplexMdArray2Int32Int32Int32DoublealglibcomplexMdArray2RefInt32Int32Boolean">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixherk(Int32 n, Int32 k, Double alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, complex[,]&amp; c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixinversealglibcomplexMdArray2RefInt32Int32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixinverse(complex[,]&amp; a, Int32 n, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixinversealglibcomplexMdArray2RefInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixinverse(complex[,]&amp; a, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixlefttrsmInt32Int32alglibcomplexMdArray2Int32Int32BooleanBooleanInt32alglibcomplexMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixlefttrsm(Int32 m, Int32 n, complex[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, complex[,]&amp; x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixlqalglibcomplexMdArray2RefInt32Int32alglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixlq(complex[,]&amp; a, Int32 m, Int32 n, complex[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixlqunpackqalglibcomplexMdArray2Int32Int32alglibcomplexArrayInt32alglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixlqunpackq(complex[,] a, Int32 m, Int32 n, complex[] tau, Int32 qrows, complex[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixlualglibcomplexMdArray2RefInt32Int32Int32ArrayOut">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixlu(complex[,]&amp; a, Int32 m, Int32 n, Int32[]&amp; pivots)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixluinversealglibcomplexMdArray2RefInt32ArrayInt32Int32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixluinverse(complex[,]&amp; a, Int32[] pivots, Int32 n, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixluinversealglibcomplexMdArray2RefInt32ArrayInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixluinverse(complex[,]&amp; a, Int32[] pivots, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixqralglibcomplexMdArray2RefInt32Int32alglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixqr(complex[,]&amp; a, Int32 m, Int32 n, complex[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixqrunpackqalglibcomplexMdArray2Int32Int32alglibcomplexArrayInt32alglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixqrunpackq(complex[,] a, Int32 m, Int32 n, complex[] tau, Int32 qcolumns, complex[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixrighttrsmInt32Int32alglibcomplexMdArray2Int32Int32BooleanBooleanInt32alglibcomplexMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixrighttrsm(Int32 m, Int32 n, complex[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, complex[,]&amp; x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixsolvealglibcomplexMdArray2Int32alglibcomplexArrayInt32OutalglibdensesolverreportOutalglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixsolve(complex[,] a, Int32 n, complex[] b, Int32&amp; info, densesolverreport&amp; rep, complex[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixsolvemalglibcomplexMdArray2Int32alglibcomplexMdArray2Int32BooleanInt32OutalglibdensesolverreportOutalglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixsolvem(complex[,] a, Int32 n, complex[,] b, Int32 m, Boolean rfs, Int32&amp; info, densesolverreport&amp; rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixsyrkInt32Int32DoublealglibcomplexMdArray2Int32Int32Int32DoublealglibcomplexMdArray2RefInt32Int32Boolean">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixsyrk(Int32 n, Int32 k, Double alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, complex[,]&amp; c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixtrinversealglibcomplexMdArray2RefBooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixtrinverse(complex[,]&amp; a, Boolean isupper, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_cmatrixtrinversealglibcomplexMdArray2RefInt32BooleanBooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_cmatrixtrinverse(complex[,]&amp; a, Int32 n, Boolean isupper, Boolean isunit, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_covm2DoubleMdArray2DoubleMdArray2DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_covm2(Double[,] x, Double[,] y, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_covm2DoubleMdArray2DoubleMdArray2Int32Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_covm2(Double[,] x, Double[,] y, Int32 n, Int32 m1, Int32 m2, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_covmDoubleMdArray2DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_covm(Double[,] x, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_covmDoubleMdArray2Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_covm(Double[,] x, Int32 n, Int32 m, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_fisherldanDoubleMdArray2Int32Int32Int32Int32OutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_fisherldan(Double[,] xy, Int32 npoints, Int32 nvars, Int32 nclasses, Int32&amp; info, Double[,]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_hpdmatrixcholeskyalglibcomplexMdArray2RefInt32Boolean">
            <summary>Задает оболочка совместимости alglib.smp_hpdmatrixcholesky(complex[,]&amp; a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_hpdmatrixcholeskyinversealglibcomplexMdArray2RefInt32BooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_hpdmatrixcholeskyinverse(complex[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_hpdmatrixcholeskyinversealglibcomplexMdArray2RefInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_hpdmatrixcholeskyinverse(complex[,]&amp; a, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_hpdmatrixinversealglibcomplexMdArray2RefInt32BooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_hpdmatrixinverse(complex[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_hpdmatrixinversealglibcomplexMdArray2RefInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_hpdmatrixinverse(complex[,]&amp; a, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_hpdmatrixsolvealglibcomplexMdArray2Int32BooleanalglibcomplexArrayInt32OutalglibdensesolverreportOutalglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.smp_hpdmatrixsolve(complex[,] a, Int32 n, Boolean isupper, complex[] b, Int32&amp; info, densesolverreport&amp; rep, complex[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_hpdmatrixsolvemalglibcomplexMdArray2Int32BooleanalglibcomplexMdArray2Int32Int32OutalglibdensesolverreportOutalglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_hpdmatrixsolvem(complex[,] a, Int32 n, Boolean isupper, complex[,] b, Int32 m, Int32&amp; info, densesolverreport&amp; rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_lsfitlinearDoubleArrayDoubleMdArray2Int32Int32Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_lsfitlinear(Double[] y, Double[,] fmatrix, Int32 n, Int32 m, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_lsfitlinearDoubleArrayDoubleMdArray2Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_lsfitlinear(Double[] y, Double[,] fmatrix, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_lsfitlinearcDoubleArrayDoubleMdArray2DoubleMdArray2Int32Int32Int32Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_lsfitlinearc(Double[] y, Double[,] fmatrix, Double[,] cmatrix, Int32 n, Int32 m, Int32 k, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_lsfitlinearcDoubleArrayDoubleMdArray2DoubleMdArray2Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_lsfitlinearc(Double[] y, Double[,] fmatrix, Double[,] cmatrix, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_lsfitlinearwDoubleArrayDoubleArrayDoubleMdArray2Int32Int32Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_lsfitlinearw(Double[] y, Double[] w, Double[,] fmatrix, Int32 n, Int32 m, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_lsfitlinearwDoubleArrayDoubleArrayDoubleMdArray2Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_lsfitlinearw(Double[] y, Double[] w, Double[,] fmatrix, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_lsfitlinearwcDoubleArrayDoubleArrayDoubleMdArray2DoubleMdArray2Int32Int32Int32Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_lsfitlinearwc(Double[] y, Double[] w, Double[,] fmatrix, Double[,] cmatrix, Int32 n, Int32 m, Int32 k, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_lsfitlinearwcDoubleArrayDoubleArrayDoubleMdArray2DoubleMdArray2Int32OutDoubleArrayOutalgliblsfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_lsfitlinearwc(Double[] y, Double[] w, Double[,] fmatrix, Double[,] cmatrix, Int32&amp; info, Double[]&amp; c, lsfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlpallerrorssparsesubsetalglibmultilayerperceptronalglibsparsematrixInt32Int32ArrayInt32alglibmodelerrorsOut">
            <summary>Задает оболочка совместимости alglib.smp_mlpallerrorssparsesubset(multilayerperceptron network, sparsematrix xy, Int32 setsize, Int32[] subset, Int32 subsetsize, modelerrors&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlpallerrorssubsetalglibmultilayerperceptronDoubleMdArray2Int32Int32ArrayInt32alglibmodelerrorsOut">
            <summary>Задает оболочка совместимости alglib.smp_mlpallerrorssubset(multilayerperceptron network, Double[,] xy, Int32 setsize, Int32[] subset, Int32 subsetsize, modelerrors&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlpavgcealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.smp_mlpavgce(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlpavgcesparsealglibmultilayerperceptronalglibsparsematrixInt32">
            <summary>Задает оболочка совместимости alglib.smp_mlpavgcesparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlpavgerroralglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.smp_mlpavgerror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlpavgerrorsparsealglibmultilayerperceptronalglibsparsematrixInt32">
            <summary>Задает оболочка совместимости alglib.smp_mlpavgerrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlpavgrelerroralglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.smp_mlpavgrelerror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlpavgrelerrorsparsealglibmultilayerperceptronalglibsparsematrixInt32">
            <summary>Задает оболочка совместимости alglib.smp_mlpavgrelerrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlpclserroralglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.smp_mlpclserror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlpcontinuetrainingalglibmlptraineralglibmultilayerperceptron">
            <summary>Задает оболочка совместимости alglib.smp_mlpcontinuetraining(mlptrainer s, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlperroralglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.smp_mlperror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlperrorsparsealglibmultilayerperceptronalglibsparsematrixInt32">
            <summary>Задает оболочка совместимости alglib.smp_mlperrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlperrorsparsesubsetalglibmultilayerperceptronalglibsparsematrixInt32Int32ArrayInt32">
            <summary>Задает оболочка совместимости alglib.smp_mlperrorsparsesubset(multilayerperceptron network, sparsematrix xy, Int32 setsize, Int32[] subset, Int32 subsetsize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlperrorsubsetalglibmultilayerperceptronDoubleMdArray2Int32Int32ArrayInt32">
            <summary>Задает оболочка совместимости alglib.smp_mlperrorsubset(multilayerperceptron network, Double[,] xy, Int32 setsize, Int32[] subset, Int32 subsetsize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlpgradbatchalglibmultilayerperceptronDoubleMdArray2Int32DoubleOutDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.smp_mlpgradbatch(multilayerperceptron network, Double[,] xy, Int32 ssize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlpgradbatchsparsealglibmultilayerperceptronalglibsparsematrixInt32DoubleOutDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.smp_mlpgradbatchsparse(multilayerperceptron network, sparsematrix xy, Int32 ssize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlpgradbatchsparsesubsetalglibmultilayerperceptronalglibsparsematrixInt32Int32ArrayInt32DoubleOutDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.smp_mlpgradbatchsparsesubset(multilayerperceptron network, sparsematrix xy, Int32 setsize, Int32[] idx, Int32 subsetsize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlpgradbatchsubsetalglibmultilayerperceptronDoubleMdArray2Int32Int32ArrayInt32DoubleOutDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.smp_mlpgradbatchsubset(multilayerperceptron network, Double[,] xy, Int32 setsize, Int32[] idx, Int32 subsetsize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlpkfoldcvalglibmlptraineralglibmultilayerperceptronInt32Int32alglibmlpreportOut">
            <summary>Задает оболочка совместимости alglib.smp_mlpkfoldcv(mlptrainer s, multilayerperceptron network, Int32 nrestarts, Int32 foldscount, mlpreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlprelclserroralglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.smp_mlprelclserror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlprelclserrorsparsealglibmultilayerperceptronalglibsparsematrixInt32">
            <summary>Задает оболочка совместимости alglib.smp_mlprelclserrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlprmserroralglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.smp_mlprmserror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlprmserrorsparsealglibmultilayerperceptronalglibsparsematrixInt32">
            <summary>Задает оболочка совместимости alglib.smp_mlprmserrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlptrainensembleesalglibmlptraineralglibmlpensembleInt32alglibmlpreportOut">
            <summary>Задает оболочка совместимости alglib.smp_mlptrainensemblees(mlptrainer s, mlpensemble ensemble, Int32 nrestarts, mlpreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_mlptrainnetworkalglibmlptraineralglibmultilayerperceptronInt32alglibmlpreportOut">
            <summary>Задает оболочка совместимости alglib.smp_mlptrainnetwork(mlptrainer s, multilayerperceptron network, Int32 nrestarts, mlpreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_pearsoncorrm2DoubleMdArray2DoubleMdArray2DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_pearsoncorrm2(Double[,] x, Double[,] y, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_pearsoncorrm2DoubleMdArray2DoubleMdArray2Int32Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_pearsoncorrm2(Double[,] x, Double[,] y, Int32 n, Int32 m1, Int32 m2, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_pearsoncorrmDoubleMdArray2DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_pearsoncorrm(Double[,] x, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_pearsoncorrmDoubleMdArray2Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_pearsoncorrm(Double[,] x, Int32 n, Int32 m, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_polynomialfitDoubleArrayDoubleArrayInt32Int32Int32OutalglibbarycentricinterpolantOutalglibpolynomialfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_polynomialfit(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, barycentricinterpolant&amp; p, polynomialfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_polynomialfitDoubleArrayDoubleArrayInt32Int32OutalglibbarycentricinterpolantOutalglibpolynomialfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_polynomialfit(Double[] x, Double[] y, Int32 m, Int32&amp; info, barycentricinterpolant&amp; p, polynomialfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_polynomialfitwcDoubleArrayDoubleArrayDoubleArrayDoubleArrayDoubleArrayInt32ArrayInt32Int32OutalglibbarycentricinterpolantOutalglibpolynomialfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_polynomialfitwc(Double[] x, Double[] y, Double[] w, Double[] xc, Double[] yc, Int32[] dc, Int32 m, Int32&amp; info, barycentricinterpolant&amp; p, polynomialfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_polynomialfitwcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32OutalglibbarycentricinterpolantOutalglibpolynomialfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_polynomialfitwc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, barycentricinterpolant&amp; p, polynomialfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rankdataDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.smp_rankdata(Double[,]&amp; xy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rankdataDoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.smp_rankdata(Double[,]&amp; xy, Int32 npoints, Int32 nfeatures)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rankdatacenteredDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.smp_rankdatacentered(Double[,]&amp; xy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rankdatacenteredDoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.smp_rankdatacentered(Double[,]&amp; xy, Int32 npoints, Int32 nfeatures)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixgemmInt32Int32Int32DoubleDoubleMdArray2Int32Int32Int32DoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixgemm(Int32 m, Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Int32 optypea, Double[,] b, Int32 ib, Int32 jb, Int32 optypeb, Double beta, Double[,]&amp; c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixinverseDoubleMdArray2RefInt32Int32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixinverse(Double[,]&amp; a, Int32 n, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixinverseDoubleMdArray2RefInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixinverse(Double[,]&amp; a, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixlefttrsmInt32Int32DoubleMdArray2Int32Int32BooleanBooleanInt32DoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixlefttrsm(Int32 m, Int32 n, Double[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, Double[,]&amp; x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixlqDoubleMdArray2RefInt32Int32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixlq(Double[,]&amp; a, Int32 m, Int32 n, Double[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixlqunpackqDoubleMdArray2Int32Int32DoubleArrayInt32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixlqunpackq(Double[,] a, Int32 m, Int32 n, Double[] tau, Int32 qrows, Double[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixluDoubleMdArray2RefInt32Int32Int32ArrayOut">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixlu(Double[,]&amp; a, Int32 m, Int32 n, Int32[]&amp; pivots)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixluinverseDoubleMdArray2RefInt32ArrayInt32Int32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixluinverse(Double[,]&amp; a, Int32[] pivots, Int32 n, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixluinverseDoubleMdArray2RefInt32ArrayInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixluinverse(Double[,]&amp; a, Int32[] pivots, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixqrDoubleMdArray2RefInt32Int32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixqr(Double[,]&amp; a, Int32 m, Int32 n, Double[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixqrunpackqDoubleMdArray2Int32Int32DoubleArrayInt32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixqrunpackq(Double[,] a, Int32 m, Int32 n, Double[] tau, Int32 qcolumns, Double[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixrighttrsmInt32Int32DoubleMdArray2Int32Int32BooleanBooleanInt32DoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixrighttrsm(Int32 m, Int32 n, Double[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, Double[,]&amp; x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixsolveDoubleMdArray2Int32DoubleArrayInt32OutalglibdensesolverreportOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixsolve(Double[,] a, Int32 n, Double[] b, Int32&amp; info, densesolverreport&amp; rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixsolvelsDoubleMdArray2Int32Int32DoubleArrayDoubleInt32OutalglibdensesolverlsreportOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixsolvels(Double[,] a, Int32 nrows, Int32 ncols, Double[] b, Double threshold, Int32&amp; info, densesolverlsreport&amp; rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixsolvemDoubleMdArray2Int32DoubleMdArray2Int32BooleanInt32OutalglibdensesolverreportOutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixsolvem(Double[,] a, Int32 n, Double[,] b, Int32 m, Boolean rfs, Int32&amp; info, densesolverreport&amp; rep, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixsvdDoubleMdArray2Int32Int32Int32Int32Int32DoubleArrayOutDoubleMdArray2OutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixsvd(Double[,] a, Int32 m, Int32 n, Int32 uneeded, Int32 vtneeded, Int32 additionalmemory, Double[]&amp; w, Double[,]&amp; u, Double[,]&amp; vt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixsyrkInt32Int32DoubleDoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2RefInt32Int32Boolean">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixsyrk(Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, Double[,]&amp; c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixtrinverseDoubleMdArray2RefBooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixtrinverse(Double[,]&amp; a, Boolean isupper, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_rmatrixtrinverseDoubleMdArray2RefInt32BooleanBooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_rmatrixtrinverse(Double[,]&amp; a, Int32 n, Boolean isupper, Boolean isunit, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spdmatrixcholeskyDoubleMdArray2RefInt32Boolean">
            <summary>Задает оболочка совместимости alglib.smp_spdmatrixcholesky(Double[,]&amp; a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spdmatrixcholeskyinverseDoubleMdArray2RefInt32BooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spdmatrixcholeskyinverse(Double[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spdmatrixcholeskyinverseDoubleMdArray2RefInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spdmatrixcholeskyinverse(Double[,]&amp; a, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spdmatrixinverseDoubleMdArray2RefInt32BooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spdmatrixinverse(Double[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spdmatrixinverseDoubleMdArray2RefInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spdmatrixinverse(Double[,]&amp; a, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spdmatrixsolveDoubleMdArray2Int32BooleanDoubleArrayInt32OutalglibdensesolverreportOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.smp_spdmatrixsolve(Double[,] a, Int32 n, Boolean isupper, Double[] b, Int32&amp; info, densesolverreport&amp; rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spdmatrixsolvemDoubleMdArray2Int32BooleanDoubleMdArray2Int32Int32OutalglibdensesolverreportOutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_spdmatrixsolvem(Double[,] a, Int32 n, Boolean isupper, Double[,] b, Int32 m, Int32&amp; info, densesolverreport&amp; rep, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spearmancorrm2DoubleMdArray2DoubleMdArray2DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_spearmancorrm2(Double[,] x, Double[,] y, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spearmancorrm2DoubleMdArray2DoubleMdArray2Int32Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_spearmancorrm2(Double[,] x, Double[,] y, Int32 n, Int32 m1, Int32 m2, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spearmancorrmDoubleMdArray2DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_spearmancorrm(Double[,] x, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spearmancorrmDoubleMdArray2Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.smp_spearmancorrm(Double[,] x, Int32 n, Int32 m, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spline1dfitcubicDoubleArrayDoubleArrayInt32Int32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spline1dfitcubic(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spline1dfitcubicDoubleArrayDoubleArrayInt32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spline1dfitcubic(Double[] x, Double[] y, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spline1dfitcubicwcDoubleArrayDoubleArrayDoubleArrayDoubleArrayDoubleArrayInt32ArrayInt32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spline1dfitcubicwc(Double[] x, Double[] y, Double[] w, Double[] xc, Double[] yc, Int32[] dc, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spline1dfitcubicwcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spline1dfitcubicwc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spline1dfithermiteDoubleArrayDoubleArrayInt32Int32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spline1dfithermite(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spline1dfithermiteDoubleArrayDoubleArrayInt32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spline1dfithermite(Double[] x, Double[] y, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spline1dfithermitewcDoubleArrayDoubleArrayDoubleArrayDoubleArrayDoubleArrayInt32ArrayInt32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spline1dfithermitewc(Double[] x, Double[] y, Double[] w, Double[] xc, Double[] yc, Int32[] dc, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spline1dfithermitewcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spline1dfithermitewc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spline1dfitpenalizedDoubleArrayDoubleArrayInt32DoubleInt32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spline1dfitpenalized(Double[] x, Double[] y, Int32 m, Double rho, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spline1dfitpenalizedDoubleArrayDoubleArrayInt32Int32DoubleInt32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spline1dfitpenalized(Double[] x, Double[] y, Int32 n, Int32 m, Double rho, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spline1dfitpenalizedwDoubleArrayDoubleArrayDoubleArrayInt32DoubleInt32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spline1dfitpenalizedw(Double[] x, Double[] y, Double[] w, Int32 m, Double rho, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.smp_spline1dfitpenalizedwDoubleArrayDoubleArrayDoubleArrayInt32Int32DoubleInt32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.smp_spline1dfitpenalizedw(Double[] x, Double[] y, Double[] w, Int32 n, Int32 m, Double rho, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparseaddalglibsparsematrixInt32Int32Double">
            <summary>Задает оболочка совместимости alglib.sparseadd(sparsematrix s, Int32 i, Int32 j, Double v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecholeskyskylinealglibsparsematrixInt32Boolean">
            <summary>Задает оболочка совместимости alglib.sparsecholeskyskyline(sparsematrix a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparseconverttoalglibsparsematrixInt32">
            <summary>Задает оболочка совместимости alglib.sparseconvertto(sparsematrix s0, Int32 fmt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparseconverttocrsalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparseconverttocrs(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparseconverttohashalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparseconverttohash(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparseconverttosksalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparseconverttosks(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecopyalglibsparsematrixalglibsparsematrixOut">
            <summary>Задает оболочка совместимости alglib.sparsecopy(sparsematrix s0, sparsematrix&amp; s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecopybufalglibsparsematrixalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparsecopybuf(sparsematrix s0, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecopytobufalglibsparsematrixInt32alglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparsecopytobuf(sparsematrix s0, Int32 fmt, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecopytocrsalglibsparsematrixalglibsparsematrixOut">
            <summary>Задает оболочка совместимости alglib.sparsecopytocrs(sparsematrix s0, sparsematrix&amp; s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecopytocrsbufalglibsparsematrixalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparsecopytocrsbuf(sparsematrix s0, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecopytohashalglibsparsematrixalglibsparsematrixOut">
            <summary>Задает оболочка совместимости alglib.sparsecopytohash(sparsematrix s0, sparsematrix&amp; s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecopytohashbufalglibsparsematrixalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparsecopytohashbuf(sparsematrix s0, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecopytosksalglibsparsematrixalglibsparsematrixOut">
            <summary>Задает оболочка совместимости alglib.sparsecopytosks(sparsematrix s0, sparsematrix&amp; s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecopytosksbufalglibsparsematrixalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparsecopytosksbuf(sparsematrix s0, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecreateInt32Int32Int32alglibsparsematrixOut">
            <summary>Задает оболочка совместимости alglib.sparsecreate(Int32 m, Int32 n, Int32 k, sparsematrix&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecreateInt32Int32alglibsparsematrixOut">
            <summary>Задает оболочка совместимости alglib.sparsecreate(Int32 m, Int32 n, sparsematrix&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecreatebufInt32Int32Int32alglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparsecreatebuf(Int32 m, Int32 n, Int32 k, sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecreatebufInt32Int32alglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparsecreatebuf(Int32 m, Int32 n, sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecreatecrsInt32Int32Int32ArrayalglibsparsematrixOut">
            <summary>Задает оболочка совместимости alglib.sparsecreatecrs(Int32 m, Int32 n, Int32[] ner, sparsematrix&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecreatecrsbufInt32Int32Int32Arrayalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparsecreatecrsbuf(Int32 m, Int32 n, Int32[] ner, sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecreatesksInt32Int32Int32ArrayInt32ArrayalglibsparsematrixOut">
            <summary>Задает оболочка совместимости alglib.sparsecreatesks(Int32 m, Int32 n, Int32[] d, Int32[] u, sparsematrix&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsecreatesksbufInt32Int32Int32ArrayInt32Arrayalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparsecreatesksbuf(Int32 m, Int32 n, Int32[] d, Int32[] u, sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparseenumeratealglibsparsematrixInt32RefInt32RefInt32OutInt32OutDoubleOut">
            <summary>Задает оболочка совместимости alglib.sparseenumerate(sparsematrix s, Int32&amp; t0, Int32&amp; t1, Int32&amp; i, Int32&amp; j, Double&amp; v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsefreealglibsparsematrixOut">
            <summary>Задает оболочка совместимости alglib.sparsefree(sparsematrix&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsegetalglibsparsematrixInt32Int32">
            <summary>Задает оболочка совместимости alglib.sparseget(sparsematrix s, Int32 i, Int32 j)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsegetcompressedrowalglibsparsematrixInt32Int32ArrayRefDoubleArrayRefInt32Out">
            <summary>Задает оболочка совместимости alglib.sparsegetcompressedrow(sparsematrix s, Int32 i, Int32[]&amp; colidx, Double[]&amp; vals, Int32&amp; nzcnt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsegetdiagonalalglibsparsematrixInt32">
            <summary>Задает оболочка совместимости alglib.sparsegetdiagonal(sparsematrix s, Int32 i)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsegetlowercountalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparsegetlowercount(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsegetmatrixtypealglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparsegetmatrixtype(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsegetncolsalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparsegetncols(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsegetnrowsalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparsegetnrows(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsegetrowalglibsparsematrixInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.sparsegetrow(sparsematrix s, Int32 i, Double[]&amp; irow)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsegetuppercountalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparsegetuppercount(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparseiscrsalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparseiscrs(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparseishashalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparseishash(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparseissksalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparseissks(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsemm2alglibsparsematrixDoubleMdArray2Int32DoubleMdArray2RefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.sparsemm2(sparsematrix s, Double[,] a, Int32 k, Double[,]&amp; b0, Double[,]&amp; b1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsemmalglibsparsematrixDoubleMdArray2Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.sparsemm(sparsematrix s, Double[,] a, Int32 k, Double[,]&amp; b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsemtmalglibsparsematrixDoubleMdArray2Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.sparsemtm(sparsematrix s, Double[,] a, Int32 k, Double[,]&amp; b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsemtvalglibsparsematrixDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.sparsemtv(sparsematrix s, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsemv2alglibsparsematrixDoubleArrayDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.sparsemv2(sparsematrix s, Double[] x, Double[]&amp; y0, Double[]&amp; y1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsemvalglibsparsematrixDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.sparsemv(sparsematrix s, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparseresizematrixalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparseresizematrix(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparserewriteexistingalglibsparsematrixInt32Int32Double">
            <summary>Задает оболочка совместимости alglib.sparserewriteexisting(sparsematrix s, Int32 i, Int32 j, Double v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsesetalglibsparsematrixInt32Int32Double">
            <summary>Задает оболочка совместимости alglib.sparseset(sparsematrix s, Int32 i, Int32 j, Double v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsesmmalglibsparsematrixBooleanDoubleMdArray2Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.sparsesmm(sparsematrix s, Boolean isupper, Double[,] a, Int32 k, Double[,]&amp; b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsesmvalglibsparsematrixBooleanDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.sparsesmv(sparsematrix s, Boolean isupper, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparseswapalglibsparsematrixalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparseswap(sparsematrix s0, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsetransposesksalglibsparsematrix">
            <summary>Задает оболочка совместимости alglib.sparsetransposesks(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsetrmvalglibsparsematrixBooleanBooleanInt32DoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.sparsetrmv(sparsematrix s, Boolean isupper, Boolean isunit, Int32 optype, Double[]&amp; x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsetrsvalglibsparsematrixBooleanBooleanInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.sparsetrsv(sparsematrix s, Boolean isupper, Boolean isunit, Int32 optype, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.sparsevsmvalglibsparsematrixBooleanDoubleArray">
            <summary>Задает оболочка совместимости alglib.sparsevsmv(sparsematrix s, Boolean isupper, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixcholeskyDoubleMdArray2RefInt32Boolean">
            <summary>Задает оболочка совместимости alglib.spdmatrixcholesky(Double[,]&amp; a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixcholeskydetDoubleMdArray2">
            <summary>Задает оболочка совместимости alglib.spdmatrixcholeskydet(Double[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixcholeskydetDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости alglib.spdmatrixcholeskydet(Double[,] a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixcholeskyinverseDoubleMdArray2RefInt32BooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.spdmatrixcholeskyinverse(Double[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixcholeskyinverseDoubleMdArray2RefInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.spdmatrixcholeskyinverse(Double[,]&amp; a, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixcholeskyrcondDoubleMdArray2Int32Boolean">
            <summary>Задает оболочка совместимости alglib.spdmatrixcholeskyrcond(Double[,] a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixcholeskysolveDoubleMdArray2Int32BooleanDoubleArrayInt32OutalglibdensesolverreportOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.spdmatrixcholeskysolve(Double[,] cha, Int32 n, Boolean isupper, Double[] b, Int32&amp; info, densesolverreport&amp; rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixcholeskysolvemDoubleMdArray2Int32BooleanDoubleMdArray2Int32Int32OutalglibdensesolverreportOutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.spdmatrixcholeskysolvem(Double[,] cha, Int32 n, Boolean isupper, Double[,] b, Int32 m, Int32&amp; info, densesolverreport&amp; rep, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixcholeskyupdateadd1DoubleMdArray2RefInt32BooleanDoubleArray">
            <summary>Задает оболочка совместимости alglib.spdmatrixcholeskyupdateadd1(Double[,]&amp; a, Int32 n, Boolean isupper, Double[] u)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixcholeskyupdateadd1bufDoubleMdArray2RefInt32BooleanDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.spdmatrixcholeskyupdateadd1buf(Double[,]&amp; a, Int32 n, Boolean isupper, Double[] u, Double[]&amp; bufr)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixcholeskyupdatefixDoubleMdArray2RefInt32BooleanBooleanArray">
            <summary>Задает оболочка совместимости alglib.spdmatrixcholeskyupdatefix(Double[,]&amp; a, Int32 n, Boolean isupper, Boolean[] fix)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixcholeskyupdatefixbufDoubleMdArray2RefInt32BooleanBooleanArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.spdmatrixcholeskyupdatefixbuf(Double[,]&amp; a, Int32 n, Boolean isupper, Boolean[] fix, Double[]&amp; bufr)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixdetDoubleMdArray2">
            <summary>Задает оболочка совместимости alglib.spdmatrixdet(Double[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixdetDoubleMdArray2Int32Boolean">
            <summary>Задает оболочка совместимости alglib.spdmatrixdet(Double[,] a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixinverseDoubleMdArray2RefInt32BooleanInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.spdmatrixinverse(Double[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixinverseDoubleMdArray2RefInt32OutalglibmatinvreportOut">
            <summary>Задает оболочка совместимости alglib.spdmatrixinverse(Double[,]&amp; a, Int32&amp; info, matinvreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixrcondDoubleMdArray2Int32Boolean">
            <summary>Задает оболочка совместимости alglib.spdmatrixrcond(Double[,] a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixrndcondInt32DoubleDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.spdmatrixrndcond(Int32 n, Double c, Double[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixsolveDoubleMdArray2Int32BooleanDoubleArrayInt32OutalglibdensesolverreportOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.spdmatrixsolve(Double[,] a, Int32 n, Boolean isupper, Double[] b, Int32&amp; info, densesolverreport&amp; rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spdmatrixsolvemDoubleMdArray2Int32BooleanDoubleMdArray2Int32Int32OutalglibdensesolverreportOutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.spdmatrixsolvem(Double[,] a, Int32 n, Boolean isupper, Double[,] b, Int32 m, Int32&amp; info, densesolverreport&amp; rep, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spearmancorr2DoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости alglib.spearmancorr2(Double[] x, Double[] y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spearmancorr2DoubleArrayDoubleArrayInt32">
            <summary>Задает оболочка совместимости alglib.spearmancorr2(Double[] x, Double[] y, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spearmancorrm2DoubleMdArray2DoubleMdArray2DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.spearmancorrm2(Double[,] x, Double[,] y, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spearmancorrm2DoubleMdArray2DoubleMdArray2Int32Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.spearmancorrm2(Double[,] x, Double[,] y, Int32 n, Int32 m1, Int32 m2, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spearmancorrmDoubleMdArray2DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.spearmancorrm(Double[,] x, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spearmancorrmDoubleMdArray2Int32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.spearmancorrm(Double[,] x, Int32 n, Int32 m, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spearmanrankcorrelationDoubleArrayDoubleArrayInt32">
            <summary>Задает оболочка совместимости alglib.spearmanrankcorrelation(Double[] x, Double[] y, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spearmanrankcorrelationsignificanceDoubleInt32DoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.spearmanrankcorrelationsignificance(Double r, Int32 n, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dbuildakimaDoubleArrayDoubleArrayInt32alglibspline1dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline1dbuildakima(Double[] x, Double[] y, Int32 n, spline1dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dbuildakimaDoubleArrayDoubleArrayalglibspline1dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline1dbuildakima(Double[] x, Double[] y, spline1dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dbuildcatmullromDoubleArrayDoubleArrayInt32Int32Doublealglibspline1dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline1dbuildcatmullrom(Double[] x, Double[] y, Int32 n, Int32 boundtype, Double tension, spline1dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dbuildcatmullromDoubleArrayDoubleArrayalglibspline1dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline1dbuildcatmullrom(Double[] x, Double[] y, spline1dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dbuildcubicDoubleArrayDoubleArrayInt32Int32DoubleInt32Doublealglibspline1dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline1dbuildcubic(Double[] x, Double[] y, Int32 n, Int32 boundltype, Double boundl, Int32 boundrtype, Double boundr, spline1dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dbuildcubicDoubleArrayDoubleArrayalglibspline1dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline1dbuildcubic(Double[] x, Double[] y, spline1dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dbuildhermiteDoubleArrayDoubleArrayDoubleArrayInt32alglibspline1dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline1dbuildhermite(Double[] x, Double[] y, Double[] d, Int32 n, spline1dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dbuildhermiteDoubleArrayDoubleArrayDoubleArrayalglibspline1dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline1dbuildhermite(Double[] x, Double[] y, Double[] d, spline1dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dbuildlinearDoubleArrayDoubleArrayInt32alglibspline1dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline1dbuildlinear(Double[] x, Double[] y, Int32 n, spline1dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dbuildlinearDoubleArrayDoubleArrayalglibspline1dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline1dbuildlinear(Double[] x, Double[] y, spline1dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dbuildmonotoneDoubleArrayDoubleArrayInt32alglibspline1dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline1dbuildmonotone(Double[] x, Double[] y, Int32 n, spline1dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dbuildmonotoneDoubleArrayDoubleArrayalglibspline1dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline1dbuildmonotone(Double[] x, Double[] y, spline1dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dcalcalglibspline1dinterpolantDouble">
            <summary>Задает оболочка совместимости alglib.spline1dcalc(spline1dinterpolant c, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dconvcubicDoubleArrayDoubleArrayDoubleArrayDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.spline1dconvcubic(Double[] x, Double[] y, Double[] x2, Double[]&amp; y2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dconvcubicDoubleArrayDoubleArrayInt32Int32DoubleInt32DoubleDoubleArrayInt32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.spline1dconvcubic(Double[] x, Double[] y, Int32 n, Int32 boundltype, Double boundl, Int32 boundrtype, Double boundr, Double[] x2, Int32 n2, Double[]&amp; y2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dconvdiff2cubicDoubleArrayDoubleArrayDoubleArrayDoubleArrayOutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.spline1dconvdiff2cubic(Double[] x, Double[] y, Double[] x2, Double[]&amp; y2, Double[]&amp; d2, Double[]&amp; dd2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dconvdiff2cubicDoubleArrayDoubleArrayInt32Int32DoubleInt32DoubleDoubleArrayInt32DoubleArrayOutDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.spline1dconvdiff2cubic(Double[] x, Double[] y, Int32 n, Int32 boundltype, Double boundl, Int32 boundrtype, Double boundr, Double[] x2, Int32 n2, Double[]&amp; y2, Double[]&amp; d2, Double[]&amp; dd2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dconvdiffcubicDoubleArrayDoubleArrayDoubleArrayDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.spline1dconvdiffcubic(Double[] x, Double[] y, Double[] x2, Double[]&amp; y2, Double[]&amp; d2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dconvdiffcubicDoubleArrayDoubleArrayInt32Int32DoubleInt32DoubleDoubleArrayInt32DoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.spline1dconvdiffcubic(Double[] x, Double[] y, Int32 n, Int32 boundltype, Double boundl, Int32 boundrtype, Double boundr, Double[] x2, Int32 n2, Double[]&amp; y2, Double[]&amp; d2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1ddiffalglibspline1dinterpolantDoubleDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.spline1ddiff(spline1dinterpolant c, Double x, Double&amp; s, Double&amp; ds, Double&amp; d2s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dfitcubicDoubleArrayDoubleArrayInt32Int32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.spline1dfitcubic(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dfitcubicDoubleArrayDoubleArrayInt32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.spline1dfitcubic(Double[] x, Double[] y, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dfitcubicwcDoubleArrayDoubleArrayDoubleArrayDoubleArrayDoubleArrayInt32ArrayInt32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.spline1dfitcubicwc(Double[] x, Double[] y, Double[] w, Double[] xc, Double[] yc, Int32[] dc, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dfitcubicwcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.spline1dfitcubicwc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dfithermiteDoubleArrayDoubleArrayInt32Int32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.spline1dfithermite(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dfithermiteDoubleArrayDoubleArrayInt32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.spline1dfithermite(Double[] x, Double[] y, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dfithermitewcDoubleArrayDoubleArrayDoubleArrayDoubleArrayDoubleArrayInt32ArrayInt32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.spline1dfithermitewc(Double[] x, Double[] y, Double[] w, Double[] xc, Double[] yc, Int32[] dc, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dfithermitewcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.spline1dfithermitewc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dfitpenalizedDoubleArrayDoubleArrayInt32DoubleInt32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.spline1dfitpenalized(Double[] x, Double[] y, Int32 m, Double rho, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dfitpenalizedDoubleArrayDoubleArrayInt32Int32DoubleInt32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.spline1dfitpenalized(Double[] x, Double[] y, Int32 n, Int32 m, Double rho, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dfitpenalizedwDoubleArrayDoubleArrayDoubleArrayInt32DoubleInt32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.spline1dfitpenalizedw(Double[] x, Double[] y, Double[] w, Int32 m, Double rho, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dfitpenalizedwDoubleArrayDoubleArrayDoubleArrayInt32Int32DoubleInt32Outalglibspline1dinterpolantOutalglibspline1dfitreportOut">
            <summary>Задает оболочка совместимости alglib.spline1dfitpenalizedw(Double[] x, Double[] y, Double[] w, Int32 n, Int32 m, Double rho, Int32&amp; info, spline1dinterpolant&amp; s, spline1dfitreport&amp; rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dgriddiff2cubicDoubleArrayDoubleArrayDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.spline1dgriddiff2cubic(Double[] x, Double[] y, Double[]&amp; d1, Double[]&amp; d2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dgriddiff2cubicDoubleArrayDoubleArrayInt32Int32DoubleInt32DoubleDoubleArrayOutDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.spline1dgriddiff2cubic(Double[] x, Double[] y, Int32 n, Int32 boundltype, Double boundl, Int32 boundrtype, Double boundr, Double[]&amp; d1, Double[]&amp; d2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dgriddiffcubicDoubleArrayDoubleArrayDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.spline1dgriddiffcubic(Double[] x, Double[] y, Double[]&amp; d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dgriddiffcubicDoubleArrayDoubleArrayInt32Int32DoubleInt32DoubleDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.spline1dgriddiffcubic(Double[] x, Double[] y, Int32 n, Int32 boundltype, Double boundl, Int32 boundrtype, Double boundr, Double[]&amp; d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dintegratealglibspline1dinterpolantDouble">
            <summary>Задает оболочка совместимости alglib.spline1dintegrate(spline1dinterpolant c, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dlintransxalglibspline1dinterpolantDoubleDouble">
            <summary>Задает оболочка совместимости alglib.spline1dlintransx(spline1dinterpolant c, Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dlintransyalglibspline1dinterpolantDoubleDouble">
            <summary>Задает оболочка совместимости alglib.spline1dlintransy(spline1dinterpolant c, Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline1dunpackalglibspline1dinterpolantInt32OutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.spline1dunpack(spline1dinterpolant c, Int32&amp; n, Double[,]&amp; tbl)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline2dbuildbicubicDoubleArrayDoubleArrayDoubleMdArray2Int32Int32alglibspline2dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline2dbuildbicubic(Double[] x, Double[] y, Double[,] f, Int32 m, Int32 n, spline2dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline2dbuildbicubicvDoubleArrayInt32DoubleArrayInt32DoubleArrayInt32alglibspline2dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline2dbuildbicubicv(Double[] x, Int32 n, Double[] y, Int32 m, Double[] f, Int32 d, spline2dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline2dbuildbilinearDoubleArrayDoubleArrayDoubleMdArray2Int32Int32alglibspline2dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline2dbuildbilinear(Double[] x, Double[] y, Double[,] f, Int32 m, Int32 n, spline2dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline2dbuildbilinearvDoubleArrayInt32DoubleArrayInt32DoubleArrayInt32alglibspline2dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline2dbuildbilinearv(Double[] x, Int32 n, Double[] y, Int32 m, Double[] f, Int32 d, spline2dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline2dcalcalglibspline2dinterpolantDoubleDouble">
            <summary>Задает оболочка совместимости alglib.spline2dcalc(spline2dinterpolant c, Double x, Double y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline2dcalcvalglibspline2dinterpolantDoubleDoubleDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.spline2dcalcv(spline2dinterpolant c, Double x, Double y, Double[]&amp; f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline2dcalcvbufalglibspline2dinterpolantDoubleDoubleDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.spline2dcalcvbuf(spline2dinterpolant c, Double x, Double y, Double[]&amp; f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline2dcopyalglibspline2dinterpolantalglibspline2dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline2dcopy(spline2dinterpolant c, spline2dinterpolant&amp; cc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline2ddiffalglibspline2dinterpolantDoubleDoubleDoubleOutDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.spline2ddiff(spline2dinterpolant c, Double x, Double y, Double&amp; f, Double&amp; fx, Double&amp; fy, Double&amp; fxy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline2dlintransfalglibspline2dinterpolantDoubleDouble">
            <summary>Задает оболочка совместимости alglib.spline2dlintransf(spline2dinterpolant c, Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline2dlintransxyalglibspline2dinterpolantDoubleDoubleDoubleDouble">
            <summary>Задает оболочка совместимости alglib.spline2dlintransxy(spline2dinterpolant c, Double ax, Double bx, Double ay, Double by)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline2dresamplebicubicDoubleMdArray2Int32Int32DoubleMdArray2OutInt32Int32">
            <summary>Задает оболочка совместимости alglib.spline2dresamplebicubic(Double[,] a, Int32 oldheight, Int32 oldwidth, Double[,]&amp; b, Int32 newheight, Int32 newwidth)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline2dresamplebilinearDoubleMdArray2Int32Int32DoubleMdArray2OutInt32Int32">
            <summary>Задает оболочка совместимости alglib.spline2dresamplebilinear(Double[,] a, Int32 oldheight, Int32 oldwidth, Double[,]&amp; b, Int32 newheight, Int32 newwidth)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline2dunpackalglibspline2dinterpolantInt32OutInt32OutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.spline2dunpack(spline2dinterpolant c, Int32&amp; m, Int32&amp; n, Double[,]&amp; tbl)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline2dunpackvalglibspline2dinterpolantInt32OutInt32OutInt32OutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.spline2dunpackv(spline2dinterpolant c, Int32&amp; m, Int32&amp; n, Int32&amp; d, Double[,]&amp; tbl)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline3dbuildtrilinearvDoubleArrayInt32DoubleArrayInt32DoubleArrayInt32DoubleArrayInt32alglibspline3dinterpolantOut">
            <summary>Задает оболочка совместимости alglib.spline3dbuildtrilinearv(Double[] x, Int32 n, Double[] y, Int32 m, Double[] z, Int32 l, Double[] f, Int32 d, spline3dinterpolant&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline3dcalcalglibspline3dinterpolantDoubleDoubleDouble">
            <summary>Задает оболочка совместимости alglib.spline3dcalc(spline3dinterpolant c, Double x, Double y, Double z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline3dcalcvalglibspline3dinterpolantDoubleDoubleDoubleDoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.spline3dcalcv(spline3dinterpolant c, Double x, Double y, Double z, Double[]&amp; f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline3dcalcvbufalglibspline3dinterpolantDoubleDoubleDoubleDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.spline3dcalcvbuf(spline3dinterpolant c, Double x, Double y, Double z, Double[]&amp; f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline3dlintransfalglibspline3dinterpolantDoubleDouble">
            <summary>Задает оболочка совместимости alglib.spline3dlintransf(spline3dinterpolant c, Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline3dlintransxyzalglibspline3dinterpolantDoubleDoubleDoubleDoubleDoubleDouble">
            <summary>Задает оболочка совместимости alglib.spline3dlintransxyz(spline3dinterpolant c, Double ax, Double bx, Double ay, Double by, Double az, Double bz)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline3dresampletrilinearDoubleArrayInt32Int32Int32Int32Int32Int32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.spline3dresampletrilinear(Double[] a, Int32 oldzcount, Int32 oldycount, Int32 oldxcount, Int32 newzcount, Int32 newycount, Int32 newxcount, Double[]&amp; b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.spline3dunpackvalglibspline3dinterpolantInt32OutInt32OutInt32OutInt32OutInt32OutDoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.spline3dunpackv(spline3dinterpolant c, Int32&amp; n, Int32&amp; m, Int32&amp; l, Int32&amp; d, Int32&amp; stype, Double[,]&amp; tbl)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.studenttdistributionInt32Double">
            <summary>Задает оболочка совместимости alglib.studenttdistribution(Int32 k, Double t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.studentttest1DoubleArrayInt32DoubleDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.studentttest1(Double[] x, Int32 n, Double mean, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.studentttest2DoubleArrayInt32DoubleArrayInt32DoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.studentttest2(Double[] x, Int32 n, Double[] y, Int32 m, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.unequalvariancettestDoubleArrayInt32DoubleArrayInt32DoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.unequalvariancettest(Double[] x, Int32 n, Double[] y, Int32 m, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.wilcoxonsignedranktestDoubleArrayInt32DoubleDoubleOutDoubleOutDoubleOut">
            <summary>Задает оболочка совместимости alglib.wilcoxonsignedranktest(Double[] x, Int32 n, Double e, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugb1appendcopyBooleanArrayRef">
            <summary>Задает оболочка совместимости alglib.xdebugb1appendcopy(Boolean[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugb1countBooleanArray">
            <summary>Задает оболочка совместимости alglib.xdebugb1count(Boolean[] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugb1notBooleanArrayRef">
            <summary>Задает оболочка совместимости alglib.xdebugb1not(Boolean[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugb1outevenInt32BooleanArrayOut">
            <summary>Задает оболочка совместимости alglib.xdebugb1outeven(Int32 n, Boolean[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugb2countBooleanMdArray2">
            <summary>Задает оболочка совместимости alglib.xdebugb2count(Boolean[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugb2notBooleanMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.xdebugb2not(Boolean[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugb2outsinInt32Int32BooleanMdArray2Out">
            <summary>Задает оболочка совместимости alglib.xdebugb2outsin(Int32 m, Int32 n, Boolean[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugb2transposeBooleanMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.xdebugb2transpose(Boolean[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugc1appendcopyalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости alglib.xdebugc1appendcopy(complex[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugc1negalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости alglib.xdebugc1neg(complex[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugc1outevenInt32alglibcomplexArrayOut">
            <summary>Задает оболочка совместимости alglib.xdebugc1outeven(Int32 n, complex[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugc1sumalglibcomplexArray">
            <summary>Задает оболочка совместимости alglib.xdebugc1sum(complex[] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugc2negalglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.xdebugc2neg(complex[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugc2outsincosInt32Int32alglibcomplexMdArray2Out">
            <summary>Задает оболочка совместимости alglib.xdebugc2outsincos(Int32 m, Int32 n, complex[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugc2sumalglibcomplexMdArray2">
            <summary>Задает оболочка совместимости alglib.xdebugc2sum(complex[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugc2transposealglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.xdebugc2transpose(complex[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugi1appendcopyInt32ArrayRef">
            <summary>Задает оболочка совместимости alglib.xdebugi1appendcopy(Int32[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugi1negInt32ArrayRef">
            <summary>Задает оболочка совместимости alglib.xdebugi1neg(Int32[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugi1outevenInt32Int32ArrayOut">
            <summary>Задает оболочка совместимости alglib.xdebugi1outeven(Int32 n, Int32[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugi1sumInt32Array">
            <summary>Задает оболочка совместимости alglib.xdebugi1sum(Int32[] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugi2negInt32MdArray2Ref">
            <summary>Задает оболочка совместимости alglib.xdebugi2neg(Int32[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugi2outsinInt32Int32Int32MdArray2Out">
            <summary>Задает оболочка совместимости alglib.xdebugi2outsin(Int32 m, Int32 n, Int32[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugi2sumInt32MdArray2">
            <summary>Задает оболочка совместимости alglib.xdebugi2sum(Int32[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugi2transposeInt32MdArray2Ref">
            <summary>Задает оболочка совместимости alglib.xdebugi2transpose(Int32[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebuginitrecord1alglibxdebugrecord1Out">
            <summary>Задает оболочка совместимости alglib.xdebuginitrecord1(xdebugrecord1&amp; rec1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugmaskedbiasedproductsumInt32Int32DoubleMdArray2DoubleMdArray2BooleanMdArray2">
            <summary>Задает оболочка совместимости alglib.xdebugmaskedbiasedproductsum(Int32 m, Int32 n, Double[,] a, Double[,] b, Boolean[,] c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugr1appendcopyDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.xdebugr1appendcopy(Double[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugr1negDoubleArrayRef">
            <summary>Задает оболочка совместимости alglib.xdebugr1neg(Double[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugr1outevenInt32DoubleArrayOut">
            <summary>Задает оболочка совместимости alglib.xdebugr1outeven(Int32 n, Double[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugr1sumDoubleArray">
            <summary>Задает оболочка совместимости alglib.xdebugr1sum(Double[] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugr2negDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.xdebugr2neg(Double[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugr2outsinInt32Int32DoubleMdArray2Out">
            <summary>Задает оболочка совместимости alglib.xdebugr2outsin(Int32 m, Int32 n, Double[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugr2sumDoubleMdArray2">
            <summary>Задает оболочка совместимости alglib.xdebugr2sum(Double[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.xdebugr2transposeDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости alglib.xdebugr2transpose(Double[,]&amp; a)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimablas">
            <summary>Тип оболочки совместимости для alglib+ablas</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimablas.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimablas.#ctor(alglib.ablas)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimablas.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimablas.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.Constructor">
            <summary>Задает оболочка совместимости ablas.ablas()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas._pexec_cmatrixgemmInt32Int32Int32alglibcomplexalglibcomplexMdArray2Int32Int32Int32alglibcomplexMdArray2Int32Int32Int32alglibcomplexalglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas._pexec_cmatrixgemm(Int32 m, Int32 n, Int32 k, complex alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, complex[,] b, Int32 ib, Int32 jb, Int32 optypeb, complex beta, complex[,] c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas._pexec_cmatrixherkInt32Int32DoublealglibcomplexMdArray2Int32Int32Int32DoublealglibcomplexMdArray2Int32Int32Boolean">
            <summary>Задает оболочка совместимости ablas._pexec_cmatrixherk(Int32 n, Int32 k, Double alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, complex[,] c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas._pexec_cmatrixlefttrsmInt32Int32alglibcomplexMdArray2Int32Int32BooleanBooleanInt32alglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas._pexec_cmatrixlefttrsm(Int32 m, Int32 n, complex[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, complex[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas._pexec_cmatrixrighttrsmInt32Int32alglibcomplexMdArray2Int32Int32BooleanBooleanInt32alglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas._pexec_cmatrixrighttrsm(Int32 m, Int32 n, complex[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, complex[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas._pexec_cmatrixsyrkInt32Int32DoublealglibcomplexMdArray2Int32Int32Int32DoublealglibcomplexMdArray2Int32Int32Boolean">
            <summary>Задает оболочка совместимости ablas._pexec_cmatrixsyrk(Int32 n, Int32 k, Double alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, complex[,] c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas._pexec_rmatrixgemmInt32Int32Int32DoubleDoubleMdArray2Int32Int32Int32DoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas._pexec_rmatrixgemm(Int32 m, Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Int32 optypea, Double[,] b, Int32 ib, Int32 jb, Int32 optypeb, Double beta, Double[,] c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas._pexec_rmatrixlefttrsmInt32Int32DoubleMdArray2Int32Int32BooleanBooleanInt32DoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas._pexec_rmatrixlefttrsm(Int32 m, Int32 n, Double[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, Double[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas._pexec_rmatrixrighttrsmInt32Int32DoubleMdArray2Int32Int32BooleanBooleanInt32DoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas._pexec_rmatrixrighttrsm(Int32 m, Int32 n, Double[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, Double[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas._pexec_rmatrixsyrkInt32Int32DoubleDoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2Int32Int32Boolean">
            <summary>Задает оболочка совместимости ablas._pexec_rmatrixsyrk(Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, Double[,] c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.ablasblocksizeDoubleMdArray2">
            <summary>Задает оболочка совместимости ablas.ablasblocksize(Double[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.ablascomplexblocksizealglibcomplexMdArray2">
            <summary>Задает оболочка совместимости ablas.ablascomplexblocksize(complex[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.ablascomplexsplitlengthalglibcomplexMdArray2Int32Int32RefInt32Ref">
            <summary>Задает оболочка совместимости ablas.ablascomplexsplitlength(complex[,] a, Int32 n, Int32&amp; n1, Int32&amp; n2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.ablasinternalsplitlengthInt32Int32Int32RefInt32Ref">
            <summary>Задает оболочка совместимости ablas.ablasinternalsplitlength(Int32 n, Int32 nb, Int32&amp; n1, Int32&amp; n2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.ablasmicroblocksize">
            <summary>Задает оболочка совместимости ablas.ablasmicroblocksize()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.ablassplitlengthDoubleMdArray2Int32Int32RefInt32Ref">
            <summary>Задает оболочка совместимости ablas.ablassplitlength(Double[,] a, Int32 n, Int32&amp; n1, Int32&amp; n2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.cmatrixcopyInt32Int32alglibcomplexMdArray2Int32Int32alglibcomplexMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости ablas.cmatrixcopy(Int32 m, Int32 n, complex[,] a, Int32 ia, Int32 ja, complex[,]&amp; b, Int32 ib, Int32 jb)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.cmatrixgemmInt32Int32Int32alglibcomplexalglibcomplexMdArray2Int32Int32Int32alglibcomplexMdArray2Int32Int32Int32alglibcomplexalglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas.cmatrixgemm(Int32 m, Int32 n, Int32 k, complex alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, complex[,] b, Int32 ib, Int32 jb, Int32 optypeb, complex beta, complex[,] c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.cmatrixherk2Int32Int32DoublealglibcomplexMdArray2Int32Int32Int32DoublealglibcomplexMdArray2Int32Int32Boolean">
            <summary>Задает оболочка совместимости ablas.cmatrixherk2(Int32 n, Int32 k, Double alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, complex[,] c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.cmatrixherkInt32Int32DoublealglibcomplexMdArray2Int32Int32Int32DoublealglibcomplexMdArray2Int32Int32Boolean">
            <summary>Задает оболочка совместимости ablas.cmatrixherk(Int32 n, Int32 k, Double alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, complex[,] c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.cmatrixlefttrsm2Int32Int32alglibcomplexMdArray2Int32Int32BooleanBooleanInt32alglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas.cmatrixlefttrsm2(Int32 m, Int32 n, complex[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, complex[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.cmatrixlefttrsmInt32Int32alglibcomplexMdArray2Int32Int32BooleanBooleanInt32alglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas.cmatrixlefttrsm(Int32 m, Int32 n, complex[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, complex[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.cmatrixmvInt32Int32alglibcomplexMdArray2Int32Int32Int32alglibcomplexArrayInt32alglibcomplexArrayRefInt32">
            <summary>Задает оболочка совместимости ablas.cmatrixmv(Int32 m, Int32 n, complex[,] a, Int32 ia, Int32 ja, Int32 opa, complex[] x, Int32 ix, complex[]&amp; y, Int32 iy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.cmatrixrank1Int32Int32alglibcomplexMdArray2RefInt32Int32alglibcomplexArrayRefInt32alglibcomplexArrayRefInt32">
            <summary>Задает оболочка совместимости ablas.cmatrixrank1(Int32 m, Int32 n, complex[,]&amp; a, Int32 ia, Int32 ja, complex[]&amp; u, Int32 iu, complex[]&amp; v, Int32 iv)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.cmatrixrighttrsm2Int32Int32alglibcomplexMdArray2Int32Int32BooleanBooleanInt32alglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas.cmatrixrighttrsm2(Int32 m, Int32 n, complex[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, complex[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.cmatrixrighttrsmInt32Int32alglibcomplexMdArray2Int32Int32BooleanBooleanInt32alglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas.cmatrixrighttrsm(Int32 m, Int32 n, complex[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, complex[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.cmatrixsyrkInt32Int32DoublealglibcomplexMdArray2Int32Int32Int32DoublealglibcomplexMdArray2Int32Int32Boolean">
            <summary>Задает оболочка совместимости ablas.cmatrixsyrk(Int32 n, Int32 k, Double alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, complex[,] c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.cmatrixtransposeInt32Int32alglibcomplexMdArray2Int32Int32alglibcomplexMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости ablas.cmatrixtranspose(Int32 m, Int32 n, complex[,] a, Int32 ia, Int32 ja, complex[,]&amp; b, Int32 ib, Int32 jb)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.rmatrixcopyInt32Int32DoubleMdArray2Int32Int32DoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости ablas.rmatrixcopy(Int32 m, Int32 n, Double[,] a, Int32 ia, Int32 ja, Double[,]&amp; b, Int32 ib, Int32 jb)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.rmatrixenforcesymmetricityDoubleMdArray2Int32Boolean">
            <summary>Задает оболочка совместимости ablas.rmatrixenforcesymmetricity(Double[,] a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.rmatrixgemmInt32Int32Int32DoubleDoubleMdArray2Int32Int32Int32DoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas.rmatrixgemm(Int32 m, Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Int32 optypea, Double[,] b, Int32 ib, Int32 jb, Int32 optypeb, Double beta, Double[,] c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.rmatrixlefttrsm2Int32Int32DoubleMdArray2Int32Int32BooleanBooleanInt32DoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas.rmatrixlefttrsm2(Int32 m, Int32 n, Double[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, Double[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.rmatrixlefttrsmInt32Int32DoubleMdArray2Int32Int32BooleanBooleanInt32DoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas.rmatrixlefttrsm(Int32 m, Int32 n, Double[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, Double[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.rmatrixmvInt32Int32DoubleMdArray2Int32Int32Int32DoubleArrayInt32DoubleArrayRefInt32">
            <summary>Задает оболочка совместимости ablas.rmatrixmv(Int32 m, Int32 n, Double[,] a, Int32 ia, Int32 ja, Int32 opa, Double[] x, Int32 ix, Double[]&amp; y, Int32 iy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.rmatrixrank1Int32Int32DoubleMdArray2RefInt32Int32DoubleArrayRefInt32DoubleArrayRefInt32">
            <summary>Задает оболочка совместимости ablas.rmatrixrank1(Int32 m, Int32 n, Double[,]&amp; a, Int32 ia, Int32 ja, Double[]&amp; u, Int32 iu, Double[]&amp; v, Int32 iv)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.rmatrixrighttrsm2Int32Int32DoubleMdArray2Int32Int32BooleanBooleanInt32DoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas.rmatrixrighttrsm2(Int32 m, Int32 n, Double[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, Double[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.rmatrixrighttrsmInt32Int32DoubleMdArray2Int32Int32BooleanBooleanInt32DoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas.rmatrixrighttrsm(Int32 m, Int32 n, Double[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, Double[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.rmatrixsyrk2Int32Int32DoubleDoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2Int32Int32Boolean">
            <summary>Задает оболочка совместимости ablas.rmatrixsyrk2(Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, Double[,] c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.rmatrixsyrkInt32Int32DoubleDoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2Int32Int32Boolean">
            <summary>Задает оболочка совместимости ablas.rmatrixsyrk(Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, Double[,] c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablas.rmatrixtransposeInt32Int32DoubleMdArray2Int32Int32DoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablas.rmatrixtranspose(Int32 m, Int32 n, Double[,] a, Int32 ia, Int32 ja, Double[,] b, Int32 ib, Int32 jb)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimablas.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimablasf">
            <summary>Тип оболочки совместимости для alglib+ablasf</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimablasf.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimablasf.#ctor(alglib.ablasf)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimablasf.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimablasf.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.Constructor">
            <summary>Задает оболочка совместимости ablasf.ablasf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.cmatrixgemmfInt32Int32Int32alglibcomplexalglibcomplexMdArray2Int32Int32Int32alglibcomplexMdArray2Int32Int32Int32alglibcomplexalglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasf.cmatrixgemmf(Int32 m, Int32 n, Int32 k, complex alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, complex[,] b, Int32 ib, Int32 jb, Int32 optypeb, complex beta, complex[,] c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.cmatrixgemmkInt32Int32Int32alglibcomplexalglibcomplexMdArray2Int32Int32Int32alglibcomplexMdArray2Int32Int32Int32alglibcomplexalglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasf.cmatrixgemmk(Int32 m, Int32 n, Int32 k, complex alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, complex[,] b, Int32 ib, Int32 jb, Int32 optypeb, complex beta, complex[,] c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.cmatrixherkfInt32Int32DoublealglibcomplexMdArray2Int32Int32Int32DoublealglibcomplexMdArray2Int32Int32Boolean">
            <summary>Задает оболочка совместимости ablasf.cmatrixherkf(Int32 n, Int32 k, Double alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, complex[,] c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.cmatrixlefttrsmfInt32Int32alglibcomplexMdArray2Int32Int32BooleanBooleanInt32alglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasf.cmatrixlefttrsmf(Int32 m, Int32 n, complex[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, complex[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.cmatrixmvfInt32Int32alglibcomplexMdArray2Int32Int32Int32alglibcomplexArrayInt32alglibcomplexArrayRefInt32">
            <summary>Задает оболочка совместимости ablasf.cmatrixmvf(Int32 m, Int32 n, complex[,] a, Int32 ia, Int32 ja, Int32 opa, complex[] x, Int32 ix, complex[]&amp; y, Int32 iy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.cmatrixrank1fInt32Int32alglibcomplexMdArray2RefInt32Int32alglibcomplexArrayRefInt32alglibcomplexArrayRefInt32">
            <summary>Задает оболочка совместимости ablasf.cmatrixrank1f(Int32 m, Int32 n, complex[,]&amp; a, Int32 ia, Int32 ja, complex[]&amp; u, Int32 iu, complex[]&amp; v, Int32 iv)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.cmatrixrighttrsmfInt32Int32alglibcomplexMdArray2Int32Int32BooleanBooleanInt32alglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasf.cmatrixrighttrsmf(Int32 m, Int32 n, complex[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, complex[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.rmatrixgemmfInt32Int32Int32DoubleDoubleMdArray2Int32Int32Int32DoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasf.rmatrixgemmf(Int32 m, Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Int32 optypea, Double[,] b, Int32 ib, Int32 jb, Int32 optypeb, Double beta, Double[,] c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.rmatrixgemmk44v00Int32Int32Int32DoubleDoubleMdArray2Int32Int32DoubleMdArray2Int32Int32DoubleDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasf.rmatrixgemmk44v00(Int32 m, Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Double[,] b, Int32 ib, Int32 jb, Double beta, Double[,] c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.rmatrixgemmk44v01Int32Int32Int32DoubleDoubleMdArray2Int32Int32DoubleMdArray2Int32Int32DoubleDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasf.rmatrixgemmk44v01(Int32 m, Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Double[,] b, Int32 ib, Int32 jb, Double beta, Double[,] c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.rmatrixgemmk44v10Int32Int32Int32DoubleDoubleMdArray2Int32Int32DoubleMdArray2Int32Int32DoubleDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasf.rmatrixgemmk44v10(Int32 m, Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Double[,] b, Int32 ib, Int32 jb, Double beta, Double[,] c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.rmatrixgemmk44v11Int32Int32Int32DoubleDoubleMdArray2Int32Int32DoubleMdArray2Int32Int32DoubleDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasf.rmatrixgemmk44v11(Int32 m, Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Double[,] b, Int32 ib, Int32 jb, Double beta, Double[,] c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.rmatrixgemmkInt32Int32Int32DoubleDoubleMdArray2Int32Int32Int32DoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasf.rmatrixgemmk(Int32 m, Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Int32 optypea, Double[,] b, Int32 ib, Int32 jb, Int32 optypeb, Double beta, Double[,] c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.rmatrixlefttrsmfInt32Int32DoubleMdArray2Int32Int32BooleanBooleanInt32DoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasf.rmatrixlefttrsmf(Int32 m, Int32 n, Double[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, Double[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.rmatrixmvfInt32Int32DoubleMdArray2Int32Int32Int32DoubleArrayInt32DoubleArrayRefInt32">
            <summary>Задает оболочка совместимости ablasf.rmatrixmvf(Int32 m, Int32 n, Double[,] a, Int32 ia, Int32 ja, Int32 opa, Double[] x, Int32 ix, Double[]&amp; y, Int32 iy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.rmatrixrank1fInt32Int32DoubleMdArray2RefInt32Int32DoubleArrayRefInt32DoubleArrayRefInt32">
            <summary>Задает оболочка совместимости ablasf.rmatrixrank1f(Int32 m, Int32 n, Double[,]&amp; a, Int32 ia, Int32 ja, Double[]&amp; u, Int32 iu, Double[]&amp; v, Int32 iv)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.rmatrixrighttrsmfInt32Int32DoubleMdArray2Int32Int32BooleanBooleanInt32DoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasf.rmatrixrighttrsmf(Int32 m, Int32 n, Double[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, Double[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasf.rmatrixsyrkfInt32Int32DoubleDoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2Int32Int32Boolean">
            <summary>Задает оболочка совместимости ablasf.rmatrixsyrkf(Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, Double[,] c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimablasf.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimablasmkl">
            <summary>Тип оболочки совместимости для alglib+ablasmkl</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimablasmkl.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimablasmkl.#ctor(alglib.ablasmkl)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimablasmkl.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimablasmkl.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.Constructor">
            <summary>Задает оболочка совместимости ablasmkl.ablasmkl()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.cmatrixgemmmklInt32Int32Int32alglibcomplexalglibcomplexMdArray2Int32Int32Int32alglibcomplexMdArray2Int32Int32Int32alglibcomplexalglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasmkl.cmatrixgemmmkl(Int32 m, Int32 n, Int32 k, complex alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, complex[,] b, Int32 ib, Int32 jb, Int32 optypeb, complex beta, complex[,] c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.cmatrixherkmklInt32Int32DoublealglibcomplexMdArray2Int32Int32Int32DoublealglibcomplexMdArray2Int32Int32Boolean">
            <summary>Задает оболочка совместимости ablasmkl.cmatrixherkmkl(Int32 n, Int32 k, Double alpha, complex[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, complex[,] c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.cmatrixlefttrsmmklInt32Int32alglibcomplexMdArray2Int32Int32BooleanBooleanInt32alglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasmkl.cmatrixlefttrsmmkl(Int32 m, Int32 n, complex[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, complex[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.cmatrixrighttrsmmklInt32Int32alglibcomplexMdArray2Int32Int32BooleanBooleanInt32alglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasmkl.cmatrixrighttrsmmkl(Int32 m, Int32 n, complex[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, complex[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.hmatrixtdmklalglibcomplexMdArray2Int32BooleanalglibcomplexArrayDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости ablasmkl.hmatrixtdmkl(complex[,] a, Int32 n, Boolean isupper, complex[] tau, Double[] d, Double[] e)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.hmatrixtdunpackqmklalglibcomplexMdArray2Int32BooleanalglibcomplexArrayalglibcomplexMdArray2">
            <summary>Задает оболочка совместимости ablasmkl.hmatrixtdunpackqmkl(complex[,] a, Int32 n, Boolean isupper, complex[] tau, complex[,] q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.rmatrixbdmklDoubleMdArray2Int32Int32DoubleArrayDoubleArrayDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости ablasmkl.rmatrixbdmkl(Double[,] a, Int32 m, Int32 n, Double[] d, Double[] e, Double[] tauq, Double[] taup)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.rmatrixbdmultiplybymklDoubleMdArray2Int32Int32DoubleArrayDoubleArrayDoubleMdArray2Int32Int32BooleanBooleanBoolean">
            <summary>Задает оболочка совместимости ablasmkl.rmatrixbdmultiplybymkl(Double[,] qp, Int32 m, Int32 n, Double[] tauq, Double[] taup, Double[,] z, Int32 zrows, Int32 zcolumns, Boolean byq, Boolean fromtheright, Boolean dotranspose)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.rmatrixbdsvdmklDoubleArrayDoubleArrayInt32BooleanDoubleMdArray2Int32DoubleMdArray2Int32DoubleMdArray2Int32BooleanRef">
            <summary>Задает оболочка совместимости ablasmkl.rmatrixbdsvdmkl(Double[] d, Double[] e, Int32 n, Boolean isupper, Double[,] u, Int32 nru, Double[,] c, Int32 ncc, Double[,] vt, Int32 ncvt, Boolean&amp; svdresult)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.rmatrixgemmmklInt32Int32Int32DoubleDoubleMdArray2Int32Int32Int32DoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasmkl.rmatrixgemmmkl(Int32 m, Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Int32 optypea, Double[,] b, Int32 ib, Int32 jb, Int32 optypeb, Double beta, Double[,] c, Int32 ic, Int32 jc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.rmatrixhessenbergmklDoubleMdArray2Int32DoubleArray">
            <summary>Задает оболочка совместимости ablasmkl.rmatrixhessenbergmkl(Double[,] a, Int32 n, Double[] tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.rmatrixhessenbergunpackqmklDoubleMdArray2Int32DoubleArrayDoubleMdArray2">
            <summary>Задает оболочка совместимости ablasmkl.rmatrixhessenbergunpackqmkl(Double[,] a, Int32 n, Double[] tau, Double[,] q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.rmatrixinternalschurdecompositionmklDoubleMdArray2Int32Int32Int32DoubleArrayDoubleArrayDoubleMdArray2Int32Ref">
            <summary>Задает оболочка совместимости ablasmkl.rmatrixinternalschurdecompositionmkl(Double[,] h, Int32 n, Int32 tneeded, Int32 zneeded, Double[] wr, Double[] wi, Double[,] z, Int32&amp; info)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.rmatrixinternaltrevcmklDoubleMdArray2Int32Int32Int32DoubleMdArray2DoubleMdArray2Int32RefInt32Ref">
            <summary>Задает оболочка совместимости ablasmkl.rmatrixinternaltrevcmkl(Double[,] t, Int32 n, Int32 side, Int32 howmny, Double[,] vl, Double[,] vr, Int32&amp; m, Int32&amp; info)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.rmatrixlefttrsmmklInt32Int32DoubleMdArray2Int32Int32BooleanBooleanInt32DoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasmkl.rmatrixlefttrsmmkl(Int32 m, Int32 n, Double[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, Double[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.rmatrixplumklDoubleMdArray2RefInt32Int32Int32Int32ArrayRef">
            <summary>Задает оболочка совместимости ablasmkl.rmatrixplumkl(Double[,]&amp; a, Int32 offs, Int32 m, Int32 n, Int32[]&amp; pivots)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.rmatrixrighttrsmmklInt32Int32DoubleMdArray2Int32Int32BooleanBooleanInt32DoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости ablasmkl.rmatrixrighttrsmmkl(Int32 m, Int32 n, Double[,] a, Int32 i1, Int32 j1, Boolean isupper, Boolean isunit, Int32 optype, Double[,] x, Int32 i2, Int32 j2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.rmatrixsyrkmklInt32Int32DoubleDoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2Int32Int32Boolean">
            <summary>Задает оболочка совместимости ablasmkl.rmatrixsyrkmkl(Int32 n, Int32 k, Double alpha, Double[,] a, Int32 ia, Int32 ja, Int32 optypea, Double beta, Double[,] c, Int32 ic, Int32 jc, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.smatrixtdevdmklDoubleArrayDoubleArrayInt32Int32DoubleMdArray2BooleanRef">
            <summary>Задает оболочка совместимости ablasmkl.smatrixtdevdmkl(Double[] d, Double[] e, Int32 n, Int32 zneeded, Double[,] z, Boolean&amp; evdresult)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.smatrixtdmklDoubleMdArray2Int32BooleanDoubleArrayDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости ablasmkl.smatrixtdmkl(Double[,] a, Int32 n, Boolean isupper, Double[] tau, Double[] d, Double[] e)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.smatrixtdunpackqmklDoubleMdArray2Int32BooleanDoubleArrayDoubleMdArray2">
            <summary>Задает оболочка совместимости ablasmkl.smatrixtdunpackqmkl(Double[,] a, Int32 n, Boolean isupper, Double[] tau, Double[,] q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimablasmkl.spdmatrixcholeskymklDoubleMdArray2Int32Int32BooleanBooleanRef">
            <summary>Задает оболочка совместимости ablasmkl.spdmatrixcholeskymkl(Double[,] a, Int32 offs, Int32 n, Boolean isupper, Boolean&amp; cholresult)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimablasmkl.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimahcreport">
            <summary>Тип оболочки совместимости для alglib+ahcreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimahcreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimahcreport.#ctor(alglib.ahcreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimahcreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimahcreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.Constructor">
            <summary>Задает оболочка совместимости ahcreport.ahcreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.Constructorclusteringalglibahcreport">
            <summary>Задает оболочка совместимости ahcreport.ahcreport(ahcreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.innerobjGet">
            <summary>Задает оболочка совместимости ahcreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.make_copy">
            <summary>Задает оболочка совместимости ahcreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.mergedistGet">
            <summary>Задает оболочка совместимости ahcreport.get_mergedist()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.mergedistSetDoubleArray">
            <summary>Задает оболочка совместимости ahcreport.set_mergedist(Double[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.npointsGet">
            <summary>Задает оболочка совместимости ahcreport.get_npoints()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.npointsSetInt32">
            <summary>Задает оболочка совместимости ahcreport.set_npoints(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.pGet">
            <summary>Задает оболочка совместимости ahcreport.get_p()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.pSetInt32Array">
            <summary>Задает оболочка совместимости ahcreport.set_p(Int32[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.pmGet">
            <summary>Задает оболочка совместимости ahcreport.get_pm()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.pmSetInt32MdArray2">
            <summary>Задает оболочка совместимости ahcreport.set_pm(Int32[,] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.pzGet">
            <summary>Задает оболочка совместимости ahcreport.get_pz()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.pzSetInt32MdArray2">
            <summary>Задает оболочка совместимости ahcreport.set_pz(Int32[,] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.zGet">
            <summary>Задает оболочка совместимости ahcreport.get_z()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.zSetInt32MdArray2">
            <summary>Задает оболочка совместимости ahcreport.set_z(Int32[,] value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimahcreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости ahcreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости ahcreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.AllInstances.mergedistGet">
            <summary>Задает оболочка совместимости ahcreport.get_mergedist()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.AllInstances.mergedistSetDoubleArray">
            <summary>Задает оболочка совместимости ahcreport.set_mergedist(Double[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.AllInstances.npointsGet">
            <summary>Задает оболочка совместимости ahcreport.get_npoints()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.AllInstances.npointsSetInt32">
            <summary>Задает оболочка совместимости ahcreport.set_npoints(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.AllInstances.pGet">
            <summary>Задает оболочка совместимости ahcreport.get_p()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.AllInstances.pSetInt32Array">
            <summary>Задает оболочка совместимости ahcreport.set_p(Int32[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.AllInstances.pmGet">
            <summary>Задает оболочка совместимости ahcreport.get_pm()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.AllInstances.pmSetInt32MdArray2">
            <summary>Задает оболочка совместимости ahcreport.set_pm(Int32[,] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.AllInstances.pzGet">
            <summary>Задает оболочка совместимости ahcreport.get_pz()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.AllInstances.pzSetInt32MdArray2">
            <summary>Задает оболочка совместимости ahcreport.set_pz(Int32[,] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.AllInstances.zGet">
            <summary>Задает оболочка совместимости ahcreport.get_z()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimahcreport.AllInstances.zSetInt32MdArray2">
            <summary>Задает оболочка совместимости ahcreport.set_z(Int32[,] value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimairyf">
            <summary>Тип оболочки совместимости для alglib+airyf</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimairyf.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimairyf.#ctor(alglib.airyf)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimairyf.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimairyf.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimairyf.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimairyf.Constructor">
            <summary>Задает оболочка совместимости airyf.airyf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimairyf.airyDoubleDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости airyf.airy(Double x, Double&amp; ai, Double&amp; aip, Double&amp; bi, Double&amp; bip)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimairyf.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimalglibbasics">
            <summary>Тип оболочки совместимости для alglib+alglibbasics</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimalglibbasics.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimalglibbasics.#ctor(alglib.alglibbasics)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimalglibbasics.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimalglibbasics.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimalglibbasics.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimalglibbasics.Constructor">
            <summary>Задает оболочка совместимости alglibbasics.alglibbasics()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimalglibbasics.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimalglibexception">
            <summary>Тип оболочки совместимости для alglib+alglibexception</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimalglibexception.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimalglibexception.#ctor(alglib.alglibexception)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimalglibexception.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimalglibexception.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimalglibexception.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimalglibexception.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimalglibexception.ConstructorString">
            <summary>Задает оболочка совместимости alglibexception.alglibexception(String s)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimalglibexception.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimalglibobject">
            <summary>Тип оболочки совместимости для alglib+alglibobject</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimalglibobject.#ctor(alglib.alglibobject)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimalglibobject.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimalglibobject.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimalglibobject.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimalglibobject.Constructor">
            <summary>Задает оболочка совместимости alglibobject.alglibobject()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimalglibobject._deallocate">
            <summary>Задает оболочка совместимости alglibobject._deallocate()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimalglibobject.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimalglibobject.AllInstances._deallocate">
            <summary>Задает оболочка совместимости alglibobject._deallocate()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimap">
            <summary>Тип оболочки совместимости для alglib+ap</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimap.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimap.#ctor(alglib.ap)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimap.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimap.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimap.colsOf1M0MdArray2``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[0:,0:],System.Int32})">
            <summary>Задает оболочка совместимости ap.cols(!!0[,] a)</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimap.lenOf1M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[],System.Int32})">
            <summary>Задает оболочка совместимости ap.len(!!0[] a)</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimap.rowsOf1M0MdArray2``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[0:,0:],System.Int32})">
            <summary>Задает оболочка совместимости ap.rows(!!0[,] a)</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimap.swapOf1M0RefM0Ref``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``0,``0})">
            <summary>Задает оболочка совместимости ap.swap(!!0&amp; a, !!0&amp; b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.Constructor">
            <summary>Задает оболочка совместимости ap.ap()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.assertBoolean">
            <summary>Задает оболочка совместимости ap.assert(Boolean cond)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.assertBooleanString">
            <summary>Задает оболочка совместимости ap.assert(Boolean cond, String s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.forcehermitianalglibcomplexMdArray2">
            <summary>Задает оболочка совместимости ap.forcehermitian(complex[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.forcesymmetricDoubleMdArray2">
            <summary>Задает оболочка совместимости ap.forcesymmetric(Double[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.formatBooleanArray">
            <summary>Задает оболочка совместимости ap.format(Boolean[] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.formatBooleanMdArray2">
            <summary>Задает оболочка совместимости ap.format(Boolean[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.formatDoubleArrayInt32">
            <summary>Задает оболочка совместимости ap.format(Double[] a, Int32 _dps)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.formatDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости ap.format(Double[,] a, Int32 dps)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.formatInt32Array">
            <summary>Задает оболочка совместимости ap.format(Int32[] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.formatInt32MdArray2">
            <summary>Задает оболочка совместимости ap.format(Int32[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.formatalglibcomplexArrayInt32">
            <summary>Задает оболочка совместимости ap.format(complex[] a, Int32 _dps)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.formatalglibcomplexInt32">
            <summary>Задает оболочка совместимости ap.format(complex a, Int32 _dps)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.formatalglibcomplexMdArray2Int32">
            <summary>Задает оболочка совместимости ap.format(complex[,] a, Int32 dps)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.ishermitianalglibcomplexMdArray2">
            <summary>Задает оболочка совместимости ap.ishermitian(complex[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.issymmetricDoubleMdArray2">
            <summary>Задает оболочка совместимости ap.issymmetric(Double[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimap.threshold2dpsDouble">
            <summary>Задает оболочка совместимости ap.threshold2dps(Double threshold)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimap.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapobject">
            <summary>Тип оболочки совместимости для alglib+apobject</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapobject.#ctor(alglib.apobject)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapobject.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapobject.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapobject.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapobject.Constructor">
            <summary>Задает оболочка совместимости apobject.apobject()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapobject.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv">
            <summary>Тип оболочки совместимости для alglib+apserv</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.#ctor(alglib.apserv)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Constructor">
            <summary>Задает оболочка совместимости apserv.apserv()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.alloccomplexalglibserializeralglibcomplex">
            <summary>Задает оболочка совместимости apserv.alloccomplex(serializer s, complex v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.allocintegerarrayalglibserializerInt32ArrayInt32">
            <summary>Задает оболочка совместимости apserv.allocintegerarray(serializer s, Int32[] v, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.allocrealarrayalglibserializerDoubleArrayInt32">
            <summary>Задает оболочка совместимости apserv.allocrealarray(serializer s, Double[] v, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.allocrealmatrixalglibserializerDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости apserv.allocrealmatrix(serializer s, Double[,] v, Int32 n0, Int32 n1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.apperiodicmapDoubleRefDoubleDoubleDoubleRef">
            <summary>Задает оболочка совместимости apserv.apperiodicmap(Double&amp; x, Double a, Double b, Double&amp; k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.approxequalrelDoubleDoubleDouble">
            <summary>Задает оболочка совместимости apserv.approxequalrel(Double a, Double b, Double tol)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.apservisfinitecmatrixalglibcomplexMdArray2Int32Int32">
            <summary>Задает оболочка совместимости apserv.apservisfinitecmatrix(complex[,] x, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.apservisfinitectrmatrixalglibcomplexMdArray2Int32Boolean">
            <summary>Задает оболочка совместимости apserv.apservisfinitectrmatrix(complex[,] x, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.apservisfinitematrixDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости apserv.apservisfinitematrix(Double[,] x, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.apservisfiniteornanmatrixDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости apserv.apservisfiniteornanmatrix(Double[,] x, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.aredistinctDoubleArrayInt32">
            <summary>Задает оболочка совместимости apserv.aredistinct(Double[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.aresamebooleanBooleanBoolean">
            <summary>Задает оболочка совместимости apserv.aresameboolean(Boolean v1, Boolean v2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.boundvalDoubleDoubleDouble">
            <summary>Задает оболочка совместимости apserv.boundval(Double x, Double b1, Double b2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.bvectorsetlengthatleastBooleanArrayRefInt32">
            <summary>Задает оболочка совместимости apserv.bvectorsetlengthatleast(Boolean[]&amp; x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.copyintegerarrayInt32ArrayInt32ArrayRef">
            <summary>Задает оболочка совместимости apserv.copyintegerarray(Int32[] src, Int32[]&amp; dst)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.copyrealarrayDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости apserv.copyrealarray(Double[] src, Double[]&amp; dst)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.copyrealmatrixDoubleMdArray2DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости apserv.copyrealmatrix(Double[,] src, Double[,]&amp; dst)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.countdownInt32Ref">
            <summary>Задает оболочка совместимости apserv.countdown(Int32&amp; v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.decInt32Ref">
            <summary>Задает оболочка совместимости apserv.dec(Int32&amp; v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.imatrixresizeInt32MdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости apserv.imatrixresize(Int32[,]&amp; x, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.incInt32Ref">
            <summary>Задает оболочка совместимости apserv.inc(Int32&amp; v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.inttorealInt32">
            <summary>Задает оболочка совместимости apserv.inttoreal(Int32 a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.isfinitecvectoralglibcomplexArrayInt32">
            <summary>Задает оболочка совместимости apserv.isfinitecvector(complex[] z, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.isfinitertrmatrixDoubleMdArray2Int32Boolean">
            <summary>Задает оболочка совместимости apserv.isfinitertrmatrix(Double[,] x, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.isfinitevectorDoubleArrayInt32">
            <summary>Задает оболочка совместимости apserv.isfinitevector(Double[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.ivectorsetlengthatleastInt32ArrayRefInt32">
            <summary>Задает оболочка совместимости apserv.ivectorsetlengthatleast(Int32[]&amp; x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.logbase2Double">
            <summary>Задает оболочка совместимости apserv.logbase2(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.randomnormal">
            <summary>Задает оболочка совместимости apserv.randomnormal()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.randomunitInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости apserv.randomunit(Int32 n, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.recsearchInt32ArrayRefInt32Int32Int32Int32Int32Array">
            <summary>Задает оболочка совместимости apserv.recsearch(Int32[]&amp; a, Int32 nrec, Int32 nheader, Int32 i0, Int32 i1, Int32[] b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.rmatrixresizeDoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости apserv.rmatrixresize(Double[,]&amp; x, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.rmatrixsetlengthatleastDoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости apserv.rmatrixsetlengthatleast(Double[,]&amp; x, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.rvectorsetlengthatleastDoubleArrayRefInt32">
            <summary>Задает оболочка совместимости apserv.rvectorsetlengthatleast(Double[]&amp; x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.safeminposrvDoubleDoubleDouble">
            <summary>Задает оболочка совместимости apserv.safeminposrv(Double x, Double y, Double v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.safepythag2DoubleDouble">
            <summary>Задает оболочка совместимости apserv.safepythag2(Double x, Double y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.safepythag3DoubleDoubleDouble">
            <summary>Задает оболочка совместимости apserv.safepythag3(Double x, Double y, Double z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.saferdivDoubleDoubleDoubleRef">
            <summary>Задает оболочка совместимости apserv.saferdiv(Double x, Double y, Double&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.serializecomplexalglibserializeralglibcomplex">
            <summary>Задает оболочка совместимости apserv.serializecomplex(serializer s, complex v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.serializeintegerarrayalglibserializerInt32ArrayInt32">
            <summary>Задает оболочка совместимости apserv.serializeintegerarray(serializer s, Int32[] v, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.serializerealarrayalglibserializerDoubleArrayInt32">
            <summary>Задает оболочка совместимости apserv.serializerealarray(serializer s, Double[] v, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.serializerealmatrixalglibserializerDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости apserv.serializerealmatrix(serializer s, Double[,] v, Int32 n0, Int32 n1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.seterrorflagBooleanRefBoolean">
            <summary>Задает оболочка совместимости apserv.seterrorflag(Boolean&amp; flag, Boolean cond)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.seterrorflagdiffBooleanRefDoubleDoubleDoubleDouble">
            <summary>Задает оболочка совместимости apserv.seterrorflagdiff(Boolean&amp; flag, Double val, Double refval, Double tol, Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.splitlengthInt32Int32Int32RefInt32Ref">
            <summary>Задает оболочка совместимости apserv.splitlength(Int32 tasksize, Int32 chunksize, Int32&amp; task0, Int32&amp; task1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.splitlengthevenInt32Int32RefInt32Ref">
            <summary>Задает оболочка совместимости apserv.splitlengtheven(Int32 tasksize, Int32&amp; task0, Int32&amp; task1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.swapiInt32RefInt32Ref">
            <summary>Задает оболочка совместимости apserv.swapi(Int32&amp; v0, Int32&amp; v1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.swaprDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости apserv.swapr(Double&amp; v0, Double&amp; v1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.taskgenint1dDoubleDoubleInt32DoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости apserv.taskgenint1d(Double a, Double b, Int32 n, Double[]&amp; x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.taskgenint1dcheb1DoubleDoubleInt32DoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости apserv.taskgenint1dcheb1(Double a, Double b, Int32 n, Double[]&amp; x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.taskgenint1dcheb2DoubleDoubleInt32DoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости apserv.taskgenint1dcheb2(Double a, Double b, Int32 n, Double[]&amp; x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.taskgenint1dequidistDoubleDoubleInt32DoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости apserv.taskgenint1dequidist(Double a, Double b, Int32 n, Double[]&amp; x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.touchintInt32Ref">
            <summary>Задает оболочка совместимости apserv.touchint(Int32&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.touchrealDoubleRef">
            <summary>Задает оболочка совместимости apserv.touchreal(Double&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.unserializecomplexalglibserializer">
            <summary>Задает оболочка совместимости apserv.unserializecomplex(serializer s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.unserializeintegerarrayalglibserializerInt32ArrayRef">
            <summary>Задает оболочка совместимости apserv.unserializeintegerarray(serializer s, Int32[]&amp; v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.unserializerealarrayalglibserializerDoubleArrayRef">
            <summary>Задает оболочка совместимости apserv.unserializerealarray(serializer s, Double[]&amp; v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.unserializerealmatrixalglibserializerDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости apserv.unserializerealmatrix(serializer s, Double[,]&amp; v)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimapbuffers">
            <summary>Тип оболочки совместимости для alglib+apserv+apbuffers</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimapbuffers.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimapbuffers.#ctor(alglib.apserv.apbuffers)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimapbuffers.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimapbuffers.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimapbuffers.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimapbuffers.Constructor">
            <summary>Задает оболочка совместимости apbuffers.apbuffers()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimapbuffers.init">
            <summary>Задает оболочка совместимости apbuffers.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimapbuffers.make_copy">
            <summary>Задает оболочка совместимости apbuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimapbuffers.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimapbuffers.AllInstances.init">
            <summary>Задает оболочка совместимости apbuffers.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimapbuffers.AllInstances.make_copy">
            <summary>Задает оболочка совместимости apbuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimsboolean">
            <summary>Тип оболочки совместимости для alglib+apserv+sboolean</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsboolean.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsboolean.#ctor(alglib.apserv.sboolean)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsboolean.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsboolean.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsboolean.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsboolean.Constructor">
            <summary>Задает оболочка совместимости sboolean.sboolean()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsboolean.init">
            <summary>Задает оболочка совместимости sboolean.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsboolean.make_copy">
            <summary>Задает оболочка совместимости sboolean.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimsboolean.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsboolean.AllInstances.init">
            <summary>Задает оболочка совместимости sboolean.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsboolean.AllInstances.make_copy">
            <summary>Задает оболочка совместимости sboolean.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimsbooleanarray">
            <summary>Тип оболочки совместимости для alglib+apserv+sbooleanarray</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsbooleanarray.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsbooleanarray.#ctor(alglib.apserv.sbooleanarray)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsbooleanarray.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsbooleanarray.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsbooleanarray.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsbooleanarray.Constructor">
            <summary>Задает оболочка совместимости sbooleanarray.sbooleanarray()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsbooleanarray.init">
            <summary>Задает оболочка совместимости sbooleanarray.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsbooleanarray.make_copy">
            <summary>Задает оболочка совместимости sbooleanarray.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimsbooleanarray.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsbooleanarray.AllInstances.init">
            <summary>Задает оболочка совместимости sbooleanarray.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsbooleanarray.AllInstances.make_copy">
            <summary>Задает оболочка совместимости sbooleanarray.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimscomplex">
            <summary>Тип оболочки совместимости для alglib+apserv+scomplex</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimscomplex.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimscomplex.#ctor(alglib.apserv.scomplex)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimscomplex.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimscomplex.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimscomplex.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimscomplex.Constructor">
            <summary>Задает оболочка совместимости scomplex.scomplex()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimscomplex.init">
            <summary>Задает оболочка совместимости scomplex.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimscomplex.make_copy">
            <summary>Задает оболочка совместимости scomplex.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimscomplex.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimscomplex.AllInstances.init">
            <summary>Задает оболочка совместимости scomplex.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimscomplex.AllInstances.make_copy">
            <summary>Задает оболочка совместимости scomplex.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimscomplexarray">
            <summary>Тип оболочки совместимости для alglib+apserv+scomplexarray</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimscomplexarray.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimscomplexarray.#ctor(alglib.apserv.scomplexarray)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimscomplexarray.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimscomplexarray.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimscomplexarray.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimscomplexarray.Constructor">
            <summary>Задает оболочка совместимости scomplexarray.scomplexarray()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimscomplexarray.init">
            <summary>Задает оболочка совместимости scomplexarray.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimscomplexarray.make_copy">
            <summary>Задает оболочка совместимости scomplexarray.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimscomplexarray.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimscomplexarray.AllInstances.init">
            <summary>Задает оболочка совместимости scomplexarray.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimscomplexarray.AllInstances.make_copy">
            <summary>Задает оболочка совместимости scomplexarray.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimsinteger">
            <summary>Тип оболочки совместимости для alglib+apserv+sinteger</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsinteger.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsinteger.#ctor(alglib.apserv.sinteger)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsinteger.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsinteger.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsinteger.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsinteger.Constructor">
            <summary>Задает оболочка совместимости sinteger.sinteger()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsinteger.init">
            <summary>Задает оболочка совместимости sinteger.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsinteger.make_copy">
            <summary>Задает оболочка совместимости sinteger.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimsinteger.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsinteger.AllInstances.init">
            <summary>Задает оболочка совместимости sinteger.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsinteger.AllInstances.make_copy">
            <summary>Задает оболочка совместимости sinteger.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimsintegerarray">
            <summary>Тип оболочки совместимости для alglib+apserv+sintegerarray</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsintegerarray.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsintegerarray.#ctor(alglib.apserv.sintegerarray)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsintegerarray.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsintegerarray.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsintegerarray.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsintegerarray.Constructor">
            <summary>Задает оболочка совместимости sintegerarray.sintegerarray()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsintegerarray.init">
            <summary>Задает оболочка совместимости sintegerarray.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsintegerarray.make_copy">
            <summary>Задает оболочка совместимости sintegerarray.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimsintegerarray.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsintegerarray.AllInstances.init">
            <summary>Задает оболочка совместимости sintegerarray.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsintegerarray.AllInstances.make_copy">
            <summary>Задает оболочка совместимости sintegerarray.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimsreal">
            <summary>Тип оболочки совместимости для alglib+apserv+sreal</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsreal.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsreal.#ctor(alglib.apserv.sreal)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsreal.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsreal.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsreal.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsreal.Constructor">
            <summary>Задает оболочка совместимости sreal.sreal()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsreal.init">
            <summary>Задает оболочка совместимости sreal.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsreal.make_copy">
            <summary>Задает оболочка совместимости sreal.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimsreal.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsreal.AllInstances.init">
            <summary>Задает оболочка совместимости sreal.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsreal.AllInstances.make_copy">
            <summary>Задает оболочка совместимости sreal.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimsrealarray">
            <summary>Тип оболочки совместимости для alglib+apserv+srealarray</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsrealarray.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsrealarray.#ctor(alglib.apserv.srealarray)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsrealarray.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimapserv.Shimsrealarray.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsrealarray.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsrealarray.Constructor">
            <summary>Задает оболочка совместимости srealarray.srealarray()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsrealarray.init">
            <summary>Задает оболочка совместимости srealarray.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsrealarray.make_copy">
            <summary>Задает оболочка совместимости srealarray.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimapserv.Shimsrealarray.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsrealarray.AllInstances.init">
            <summary>Задает оболочка совместимости srealarray.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimapserv.Shimsrealarray.AllInstances.make_copy">
            <summary>Задает оболочка совместимости srealarray.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimautogk">
            <summary>Тип оболочки совместимости для alglib+autogk</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.#ctor(alglib.autogk)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Constructor">
            <summary>Задает оболочка совместимости autogk.autogk()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.autogkinternaliterationautogkalglibautogkinternalstate">
            <summary>Задает оболочка совместимости autogk.autogkinternaliteration(autogkinternalstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.autogkinternalprepareDoubleDoubleDoubleDoubleautogkalglibautogkinternalstate">
            <summary>Задает оболочка совместимости autogk.autogkinternalprepare(Double a, Double b, Double eps, Double xwidth, autogkinternalstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.autogkiterationautogkalglibautogkstate">
            <summary>Задает оболочка совместимости autogk.autogkiteration(autogkstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.autogkresultsautogkalglibautogkstateDoubleRefautogkalglibautogkreport">
            <summary>Задает оболочка совместимости autogk.autogkresults(autogkstate state, Double&amp; v, autogkreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.autogksingularDoubleDoubleDoubleDoubleautogkalglibautogkstate">
            <summary>Задает оболочка совместимости autogk.autogksingular(Double a, Double b, Double alpha, Double beta, autogkstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.autogksmoothDoubleDoubleautogkalglibautogkstate">
            <summary>Задает оболочка совместимости autogk.autogksmooth(Double a, Double b, autogkstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.autogksmoothwDoubleDoubleDoubleautogkalglibautogkstate">
            <summary>Задает оболочка совместимости autogk.autogksmoothw(Double a, Double b, Double xwidth, autogkstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.mheappopDoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости autogk.mheappop(Double[,]&amp; heap, Int32 heapsize, Int32 heapwidth)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.mheappushDoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости autogk.mheappush(Double[,]&amp; heap, Int32 heapsize, Int32 heapwidth)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.mheapresizeDoubleMdArray2RefInt32RefInt32Int32">
            <summary>Задает оболочка совместимости autogk.mheapresize(Double[,]&amp; heap, Int32&amp; heapsize, Int32 newheapsize, Int32 heapwidth)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimautogk.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimautogk.Shimautogkinternalstate">
            <summary>Тип оболочки совместимости для alglib+autogk+autogkinternalstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.Shimautogkinternalstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.Shimautogkinternalstate.#ctor(alglib.autogk.autogkinternalstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.Shimautogkinternalstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.Shimautogkinternalstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkinternalstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkinternalstate.Constructor">
            <summary>Задает оболочка совместимости autogkinternalstate.autogkinternalstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkinternalstate.init">
            <summary>Задает оболочка совместимости autogkinternalstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkinternalstate.make_copy">
            <summary>Задает оболочка совместимости autogkinternalstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimautogk.Shimautogkinternalstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkinternalstate.AllInstances.init">
            <summary>Задает оболочка совместимости autogkinternalstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkinternalstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости autogkinternalstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimautogk.Shimautogkreport">
            <summary>Тип оболочки совместимости для alglib+autogk+autogkreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.Shimautogkreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.Shimautogkreport.#ctor(alglib.autogk.autogkreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.Shimautogkreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.Shimautogkreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkreport.Constructor">
            <summary>Задает оболочка совместимости autogkreport.autogkreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkreport.init">
            <summary>Задает оболочка совместимости autogkreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkreport.make_copy">
            <summary>Задает оболочка совместимости autogkreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimautogk.Shimautogkreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkreport.AllInstances.init">
            <summary>Задает оболочка совместимости autogkreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости autogkreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimautogk.Shimautogkstate">
            <summary>Тип оболочки совместимости для alglib+autogk+autogkstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.Shimautogkstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.Shimautogkstate.#ctor(alglib.autogk.autogkstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.Shimautogkstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogk.Shimautogkstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkstate.Constructor">
            <summary>Задает оболочка совместимости autogkstate.autogkstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkstate.init">
            <summary>Задает оболочка совместимости autogkstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkstate.make_copy">
            <summary>Задает оболочка совместимости autogkstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimautogk.Shimautogkstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkstate.AllInstances.init">
            <summary>Задает оболочка совместимости autogkstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogk.Shimautogkstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости autogkstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimautogkreport">
            <summary>Тип оболочки совместимости для alglib+autogkreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogkreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogkreport.#ctor(alglib.autogkreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogkreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogkreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.Constructor">
            <summary>Задает оболочка совместимости autogkreport.autogkreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.Constructorautogkalglibautogkreport">
            <summary>Задает оболочка совместимости autogkreport.autogkreport(autogkreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.innerobjGet">
            <summary>Задает оболочка совместимости autogkreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.make_copy">
            <summary>Задает оболочка совместимости autogkreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.nfevGet">
            <summary>Задает оболочка совместимости autogkreport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.nfevSetInt32">
            <summary>Задает оболочка совместимости autogkreport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.nintervalsGet">
            <summary>Задает оболочка совместимости autogkreport.get_nintervals()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.nintervalsSetInt32">
            <summary>Задает оболочка совместимости autogkreport.set_nintervals(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.terminationtypeGet">
            <summary>Задает оболочка совместимости autogkreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости autogkreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimautogkreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости autogkreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости autogkreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.AllInstances.nfevGet">
            <summary>Задает оболочка совместимости autogkreport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.AllInstances.nfevSetInt32">
            <summary>Задает оболочка совместимости autogkreport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.AllInstances.nintervalsGet">
            <summary>Задает оболочка совместимости autogkreport.get_nintervals()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.AllInstances.nintervalsSetInt32">
            <summary>Задает оболочка совместимости autogkreport.set_nintervals(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.AllInstances.terminationtypeGet">
            <summary>Задает оболочка совместимости autogkreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkreport.AllInstances.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости autogkreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimautogkstate">
            <summary>Тип оболочки совместимости для alglib+autogkstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogkstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogkstate.#ctor(alglib.autogkstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogkstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimautogkstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.Constructor">
            <summary>Задает оболочка совместимости autogkstate.autogkstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.Constructorautogkalglibautogkstate">
            <summary>Задает оболочка совместимости autogkstate.autogkstate(autogkstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.bminusxGet">
            <summary>Задает оболочка совместимости autogkstate.get_bminusx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.bminusxSetDouble">
            <summary>Задает оболочка совместимости autogkstate.set_bminusx(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.fGet">
            <summary>Задает оболочка совместимости autogkstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.fSetDouble">
            <summary>Задает оболочка совместимости autogkstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.innerobjGet">
            <summary>Задает оболочка совместимости autogkstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.make_copy">
            <summary>Задает оболочка совместимости autogkstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.needfGet">
            <summary>Задает оболочка совместимости autogkstate.get_needf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.needfSetBoolean">
            <summary>Задает оболочка совместимости autogkstate.set_needf(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.xGet">
            <summary>Задает оболочка совместимости autogkstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.xSetDouble">
            <summary>Задает оболочка совместимости autogkstate.set_x(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.xminusaGet">
            <summary>Задает оболочка совместимости autogkstate.get_xminusa()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.xminusaSetDouble">
            <summary>Задает оболочка совместимости autogkstate.set_xminusa(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimautogkstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.AllInstances.bminusxGet">
            <summary>Задает оболочка совместимости autogkstate.get_bminusx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.AllInstances.bminusxSetDouble">
            <summary>Задает оболочка совместимости autogkstate.set_bminusx(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.AllInstances.fGet">
            <summary>Задает оболочка совместимости autogkstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.AllInstances.fSetDouble">
            <summary>Задает оболочка совместимости autogkstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости autogkstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости autogkstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.AllInstances.needfGet">
            <summary>Задает оболочка совместимости autogkstate.get_needf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.AllInstances.needfSetBoolean">
            <summary>Задает оболочка совместимости autogkstate.set_needf(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.AllInstances.xGet">
            <summary>Задает оболочка совместимости autogkstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.AllInstances.xSetDouble">
            <summary>Задает оболочка совместимости autogkstate.set_x(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.AllInstances.xminusaGet">
            <summary>Задает оболочка совместимости autogkstate.get_xminusa()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimautogkstate.AllInstances.xminusaSetDouble">
            <summary>Задает оболочка совместимости autogkstate.set_xminusa(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbarycentricfitreport">
            <summary>Тип оболочки совместимости для alglib+barycentricfitreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbarycentricfitreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbarycentricfitreport.#ctor(alglib.barycentricfitreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbarycentricfitreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbarycentricfitreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.Constructor">
            <summary>Задает оболочка совместимости barycentricfitreport.barycentricfitreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.Constructorlsfitalglibbarycentricfitreport">
            <summary>Задает оболочка совместимости barycentricfitreport.barycentricfitreport(barycentricfitreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.avgerrorGet">
            <summary>Задает оболочка совместимости barycentricfitreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.avgerrorSetDouble">
            <summary>Задает оболочка совместимости barycentricfitreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.avgrelerrorGet">
            <summary>Задает оболочка совместимости barycentricfitreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости barycentricfitreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.dbestGet">
            <summary>Задает оболочка совместимости barycentricfitreport.get_dbest()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.dbestSetInt32">
            <summary>Задает оболочка совместимости barycentricfitreport.set_dbest(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.innerobjGet">
            <summary>Задает оболочка совместимости barycentricfitreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.make_copy">
            <summary>Задает оболочка совместимости barycentricfitreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.maxerrorGet">
            <summary>Задает оболочка совместимости barycentricfitreport.get_maxerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.maxerrorSetDouble">
            <summary>Задает оболочка совместимости barycentricfitreport.set_maxerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.rmserrorGet">
            <summary>Задает оболочка совместимости barycentricfitreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.rmserrorSetDouble">
            <summary>Задает оболочка совместимости barycentricfitreport.set_rmserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.taskrcondGet">
            <summary>Задает оболочка совместимости barycentricfitreport.get_taskrcond()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.taskrcondSetDouble">
            <summary>Задает оболочка совместимости barycentricfitreport.set_taskrcond(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbarycentricfitreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.AllInstances.avgerrorGet">
            <summary>Задает оболочка совместимости barycentricfitreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.AllInstances.avgerrorSetDouble">
            <summary>Задает оболочка совместимости barycentricfitreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.AllInstances.avgrelerrorGet">
            <summary>Задает оболочка совместимости barycentricfitreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.AllInstances.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости barycentricfitreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.AllInstances.dbestGet">
            <summary>Задает оболочка совместимости barycentricfitreport.get_dbest()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.AllInstances.dbestSetInt32">
            <summary>Задает оболочка совместимости barycentricfitreport.set_dbest(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости barycentricfitreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости barycentricfitreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.AllInstances.maxerrorGet">
            <summary>Задает оболочка совместимости barycentricfitreport.get_maxerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.AllInstances.maxerrorSetDouble">
            <summary>Задает оболочка совместимости barycentricfitreport.set_maxerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.AllInstances.rmserrorGet">
            <summary>Задает оболочка совместимости barycentricfitreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.AllInstances.rmserrorSetDouble">
            <summary>Задает оболочка совместимости barycentricfitreport.set_rmserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.AllInstances.taskrcondGet">
            <summary>Задает оболочка совместимости barycentricfitreport.get_taskrcond()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricfitreport.AllInstances.taskrcondSetDouble">
            <summary>Задает оболочка совместимости barycentricfitreport.set_taskrcond(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbarycentricinterpolant">
            <summary>Тип оболочки совместимости для alglib+barycentricinterpolant</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbarycentricinterpolant.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbarycentricinterpolant.#ctor(alglib.barycentricinterpolant)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbarycentricinterpolant.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbarycentricinterpolant.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricinterpolant.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricinterpolant.Constructor">
            <summary>Задает оболочка совместимости barycentricinterpolant.barycentricinterpolant()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricinterpolant.Constructorratintalglibbarycentricinterpolant">
            <summary>Задает оболочка совместимости barycentricinterpolant.barycentricinterpolant(barycentricinterpolant obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricinterpolant.innerobjGet">
            <summary>Задает оболочка совместимости barycentricinterpolant.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricinterpolant.make_copy">
            <summary>Задает оболочка совместимости barycentricinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbarycentricinterpolant.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricinterpolant.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости barycentricinterpolant.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbarycentricinterpolant.AllInstances.make_copy">
            <summary>Задает оболочка совместимости barycentricinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbasestat">
            <summary>Тип оболочки совместимости для alglib+basestat</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbasestat.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbasestat.#ctor(alglib.basestat)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbasestat.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbasestat.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.Constructor">
            <summary>Задает оболочка совместимости basestat.basestat()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat._pexec_covm2DoubleMdArray2DoubleMdArray2Int32Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости basestat._pexec_covm2(Double[,] x, Double[,] y, Int32 n, Int32 m1, Int32 m2, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat._pexec_covmDoubleMdArray2Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости basestat._pexec_covm(Double[,] x, Int32 n, Int32 m, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat._pexec_pearsoncorrm2DoubleMdArray2DoubleMdArray2Int32Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости basestat._pexec_pearsoncorrm2(Double[,] x, Double[,] y, Int32 n, Int32 m1, Int32 m2, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat._pexec_pearsoncorrmDoubleMdArray2Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости basestat._pexec_pearsoncorrm(Double[,] x, Int32 n, Int32 m, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat._pexec_rankdataDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости basestat._pexec_rankdata(Double[,] xy, Int32 npoints, Int32 nfeatures)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat._pexec_rankdatacenteredDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости basestat._pexec_rankdatacentered(Double[,] xy, Int32 npoints, Int32 nfeatures)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat._pexec_spearmancorrm2DoubleMdArray2DoubleMdArray2Int32Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости basestat._pexec_spearmancorrm2(Double[,] x, Double[,] y, Int32 n, Int32 m1, Int32 m2, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat._pexec_spearmancorrmDoubleMdArray2Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости basestat._pexec_spearmancorrm(Double[,] x, Int32 n, Int32 m, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.cov2DoubleArrayDoubleArrayInt32">
            <summary>Задает оболочка совместимости basestat.cov2(Double[] x, Double[] y, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.covm2DoubleMdArray2DoubleMdArray2Int32Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости basestat.covm2(Double[,] x, Double[,] y, Int32 n, Int32 m1, Int32 m2, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.covmDoubleMdArray2Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости basestat.covm(Double[,] x, Int32 n, Int32 m, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.pearsoncorr2DoubleArrayDoubleArrayInt32">
            <summary>Задает оболочка совместимости basestat.pearsoncorr2(Double[] x, Double[] y, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.pearsoncorrelationDoubleArrayDoubleArrayInt32">
            <summary>Задает оболочка совместимости basestat.pearsoncorrelation(Double[] x, Double[] y, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.pearsoncorrm2DoubleMdArray2DoubleMdArray2Int32Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости basestat.pearsoncorrm2(Double[,] x, Double[,] y, Int32 n, Int32 m1, Int32 m2, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.pearsoncorrmDoubleMdArray2Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости basestat.pearsoncorrm(Double[,] x, Int32 n, Int32 m, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.rankdataDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости basestat.rankdata(Double[,] xy, Int32 npoints, Int32 nfeatures)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.rankdatabasecaseDoubleMdArray2Int32Int32Int32Booleanapservalglibapbuffersapservalglibapbuffers">
            <summary>Задает оболочка совместимости basestat.rankdatabasecase(Double[,] xy, Int32 i0, Int32 i1, Int32 nfeatures, Boolean iscentered, apbuffers buf0, apbuffers buf1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.rankdatacenteredDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости basestat.rankdatacentered(Double[,] xy, Int32 npoints, Int32 nfeatures)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.rankdatarecDoubleMdArray2Int32Int32Int32Booleansmpalglibshared_poolInt32">
            <summary>Задает оболочка совместимости basestat.rankdatarec(Double[,] xy, Int32 i0, Int32 i1, Int32 nfeatures, Boolean iscentered, shared_pool pool, Int32 basecasecost)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.sampleadevDoubleArrayInt32DoubleRef">
            <summary>Задает оболочка совместимости basestat.sampleadev(Double[] x, Int32 n, Double&amp; adev)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.samplekurtosisDoubleArrayInt32">
            <summary>Задает оболочка совместимости basestat.samplekurtosis(Double[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.samplemeanDoubleArrayInt32">
            <summary>Задает оболочка совместимости basestat.samplemean(Double[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.samplemedianDoubleArrayInt32DoubleRef">
            <summary>Задает оболочка совместимости basestat.samplemedian(Double[] x, Int32 n, Double&amp; median)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.samplemomentsDoubleArrayInt32DoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости basestat.samplemoments(Double[] x, Int32 n, Double&amp; mean, Double&amp; variance, Double&amp; skewness, Double&amp; kurtosis)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.samplepercentileDoubleArrayInt32DoubleDoubleRef">
            <summary>Задает оболочка совместимости basestat.samplepercentile(Double[] x, Int32 n, Double p, Double&amp; v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.sampleskewnessDoubleArrayInt32">
            <summary>Задает оболочка совместимости basestat.sampleskewness(Double[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.samplevarianceDoubleArrayInt32">
            <summary>Задает оболочка совместимости basestat.samplevariance(Double[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.spearmancorr2DoubleArrayDoubleArrayInt32">
            <summary>Задает оболочка совместимости basestat.spearmancorr2(Double[] x, Double[] y, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.spearmancorrm2DoubleMdArray2DoubleMdArray2Int32Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости basestat.spearmancorrm2(Double[,] x, Double[,] y, Int32 n, Int32 m1, Int32 m2, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.spearmancorrmDoubleMdArray2Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости basestat.spearmancorrm(Double[,] x, Int32 n, Int32 m, Double[,]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasestat.spearmanrankcorrelationDoubleArrayDoubleArrayInt32">
            <summary>Задает оболочка совместимости basestat.spearmanrankcorrelation(Double[] x, Double[] y, Int32 n)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbasestat.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbasicstatops">
            <summary>Тип оболочки совместимости для alglib+basicstatops</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbasicstatops.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbasicstatops.#ctor(alglib.basicstatops)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbasicstatops.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbasicstatops.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasicstatops.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasicstatops.Constructor">
            <summary>Задает оболочка совместимости basicstatops.basicstatops()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbasicstatops.rankxDoubleArrayInt32Booleanapservalglibapbuffers">
            <summary>Задает оболочка совместимости basicstatops.rankx(Double[] x, Int32 n, Boolean iscentered, apbuffers buf)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbasicstatops.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbdss">
            <summary>Тип оболочки совместимости для alglib+bdss</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbdss.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbdss.#ctor(alglib.bdss)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbdss.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbdss.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.Constructor">
            <summary>Задает оболочка совместимости bdss.bdss()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.dserraccumulateDoubleArrayRefDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости bdss.dserraccumulate(Double[]&amp; buf, Double[] y, Double[] desiredy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.dserrallocateInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости bdss.dserrallocate(Int32 nclasses, Double[]&amp; buf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.dserrfinishDoubleArrayRef">
            <summary>Задает оболочка совместимости bdss.dserrfinish(Double[]&amp; buf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.dsgetmeanmindistanceDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости bdss.dsgetmeanmindistance(Double[,] xy, Int32 npoints, Int32 nvars)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.dsnormalizeDoubleMdArray2RefInt32Int32Int32RefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости bdss.dsnormalize(Double[,]&amp; xy, Int32 npoints, Int32 nvars, Int32&amp; info, Double[]&amp; means, Double[]&amp; sigmas)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.dsnormalizecDoubleMdArray2Int32Int32Int32RefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости bdss.dsnormalizec(Double[,] xy, Int32 npoints, Int32 nvars, Int32&amp; info, Double[]&amp; means, Double[]&amp; sigmas)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.dsoptimalsplit2DoubleArrayInt32ArrayInt32Int32RefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости bdss.dsoptimalsplit2(Double[] a, Int32[] c, Int32 n, Int32&amp; info, Double&amp; threshold, Double&amp; pal, Double&amp; pbl, Double&amp; par, Double&amp; pbr, Double&amp; cve)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.dsoptimalsplit2fastDoubleArrayRefInt32ArrayRefInt32ArrayRefInt32ArrayRefDoubleArrayRefInt32ArrayRefInt32Int32DoubleInt32RefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости bdss.dsoptimalsplit2fast(Double[]&amp; a, Int32[]&amp; c, Int32[]&amp; tiesbuf, Int32[]&amp; cntbuf, Double[]&amp; bufr, Int32[]&amp; bufi, Int32 n, Int32 nc, Double alpha, Int32&amp; info, Double&amp; threshold, Double&amp; rms, Double&amp; cvrms)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.dsoptimalsplitkDoubleArrayInt32ArrayInt32Int32Int32Int32RefDoubleArrayRefInt32RefDoubleRef">
            <summary>Задает оболочка совместимости bdss.dsoptimalsplitk(Double[] a, Int32[] c, Int32 n, Int32 nc, Int32 kmax, Int32&amp; info, Double[]&amp; thresholds, Int32&amp; ni, Double&amp; cve)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.dssplitkDoubleArrayInt32ArrayInt32Int32Int32Int32RefDoubleArrayRefInt32RefDoubleRef">
            <summary>Задает оболочка совместимости bdss.dssplitk(Double[] a, Int32[] c, Int32 n, Int32 nc, Int32 kmax, Int32&amp; info, Double[]&amp; thresholds, Int32&amp; ni, Double&amp; cve)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.dstieDoubleArrayRefInt32Int32ArrayRefInt32RefInt32ArrayRefInt32ArrayRef">
            <summary>Задает оболочка совместимости bdss.dstie(Double[]&amp; a, Int32 n, Int32[]&amp; ties, Int32&amp; tiecount, Int32[]&amp; p1, Int32[]&amp; p2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.dstiefastiDoubleArrayRefInt32ArrayRefInt32Int32ArrayRefInt32RefDoubleArrayRefInt32ArrayRef">
            <summary>Задает оболочка совместимости bdss.dstiefasti(Double[]&amp; a, Int32[]&amp; b, Int32 n, Int32[]&amp; ties, Int32&amp; tiecount, Double[]&amp; bufr, Int32[]&amp; bufi)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.getcvInt32ArrayInt32">
            <summary>Задает оболочка совместимости bdss.getcv(Int32[] cnt, Int32 nc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.tieaddcInt32ArrayInt32ArrayInt32Int32Int32ArrayRef">
            <summary>Задает оболочка совместимости bdss.tieaddc(Int32[] c, Int32[] ties, Int32 ntie, Int32 nc, Int32[]&amp; cnt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.tiesubcInt32ArrayInt32ArrayInt32Int32Int32ArrayRef">
            <summary>Задает оболочка совместимости bdss.tiesubc(Int32[] c, Int32[] ties, Int32 ntie, Int32 nc, Int32[]&amp; cnt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.xlnyDoubleDouble">
            <summary>Задает оболочка совместимости bdss.xlny(Double x, Double y)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbdss.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbdss.Shimcvreport">
            <summary>Тип оболочки совместимости для alglib+bdss+cvreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbdss.Shimcvreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbdss.Shimcvreport.#ctor(alglib.bdss.cvreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbdss.Shimcvreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbdss.Shimcvreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.Shimcvreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.Shimcvreport.Constructor">
            <summary>Задает оболочка совместимости cvreport.cvreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.Shimcvreport.init">
            <summary>Задает оболочка совместимости cvreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.Shimcvreport.make_copy">
            <summary>Задает оболочка совместимости cvreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbdss.Shimcvreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.Shimcvreport.AllInstances.init">
            <summary>Задает оболочка совместимости cvreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdss.Shimcvreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости cvreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbdsvd">
            <summary>Тип оболочки совместимости для alglib+bdsvd</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbdsvd.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbdsvd.#ctor(alglib.bdsvd)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbdsvd.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbdsvd.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdsvd.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdsvd.Constructor">
            <summary>Задает оболочка совместимости bdsvd.bdsvd()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdsvd.bidiagonalsvddecompositionDoubleArrayRefDoubleArrayInt32BooleanBooleanDoubleMdArray2RefInt32DoubleMdArray2RefInt32DoubleMdArray2RefInt32">
            <summary>Задает оболочка совместимости bdsvd.bidiagonalsvddecomposition(Double[]&amp; d, Double[] e, Int32 n, Boolean isupper, Boolean isfractionalaccuracyrequired, Double[,]&amp; u, Int32 nru, Double[,]&amp; c, Int32 ncc, Double[,]&amp; vt, Int32 ncvt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdsvd.bidiagonalsvddecompositioninternalDoubleArrayDoubleArrayInt32BooleanBooleanDoubleMdArray2Int32Int32DoubleMdArray2Int32Int32DoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости bdsvd.bidiagonalsvddecompositioninternal(Double[] d, Double[] e, Int32 n, Boolean isupper, Boolean isfractionalaccuracyrequired, Double[,] uu, Int32 ustart, Int32 nru, Double[,] c, Int32 cstart, Int32 ncc, Double[,] vt, Int32 vstart, Int32 ncvt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdsvd.extsignbdsqrDoubleDouble">
            <summary>Задает оболочка совместимости bdsvd.extsignbdsqr(Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdsvd.rmatrixbdsvdDoubleArrayRefDoubleArrayInt32BooleanBooleanDoubleMdArray2RefInt32DoubleMdArray2RefInt32DoubleMdArray2RefInt32">
            <summary>Задает оболочка совместимости bdsvd.rmatrixbdsvd(Double[]&amp; d, Double[] e, Int32 n, Boolean isupper, Boolean isfractionalaccuracyrequired, Double[,]&amp; u, Int32 nru, Double[,]&amp; c, Int32 ncc, Double[,]&amp; vt, Int32 ncvt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdsvd.svd2x2DoubleDoubleDoubleDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости bdsvd.svd2x2(Double f, Double g, Double h, Double&amp; ssmin, Double&amp; ssmax)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbdsvd.svdv2x2DoubleDoubleDoubleDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости bdsvd.svdv2x2(Double f, Double g, Double h, Double&amp; ssmin, Double&amp; ssmax, Double&amp; snr, Double&amp; csr, Double&amp; snl, Double&amp; csl)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbdsvd.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbessel">
            <summary>Тип оболочки совместимости для alglib+bessel</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbessel.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbessel.#ctor(alglib.bessel)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbessel.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbessel.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.Constructor">
            <summary>Задает оболочка совместимости bessel.bessel()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.besselasympt0DoubleDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости bessel.besselasympt0(Double x, Double&amp; pzero, Double&amp; qzero)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.besselasympt1DoubleDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости bessel.besselasympt1(Double x, Double&amp; pzero, Double&amp; qzero)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.besseli0Double">
            <summary>Задает оболочка совместимости bessel.besseli0(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.besseli1Double">
            <summary>Задает оболочка совместимости bessel.besseli1(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.besselj0Double">
            <summary>Задает оболочка совместимости bessel.besselj0(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.besselj1Double">
            <summary>Задает оболочка совместимости bessel.besselj1(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.besseljnInt32Double">
            <summary>Задает оболочка совместимости bessel.besseljn(Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.besselk0Double">
            <summary>Задает оболочка совместимости bessel.besselk0(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.besselk1Double">
            <summary>Задает оболочка совместимости bessel.besselk1(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.besselknInt32Double">
            <summary>Задает оболочка совместимости bessel.besselkn(Int32 nn, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.besselm1firstchebDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости bessel.besselm1firstcheb(Double c, Double&amp; b0, Double&amp; b1, Double&amp; b2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.besselm1nextchebDoubleDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости bessel.besselm1nextcheb(Double x, Double c, Double&amp; b0, Double&amp; b1, Double&amp; b2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.besselmfirstchebDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости bessel.besselmfirstcheb(Double c, Double&amp; b0, Double&amp; b1, Double&amp; b2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.besselmnextchebDoubleDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости bessel.besselmnextcheb(Double x, Double c, Double&amp; b0, Double&amp; b1, Double&amp; b2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.bessely0Double">
            <summary>Задает оболочка совместимости bessel.bessely0(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.bessely1Double">
            <summary>Задает оболочка совместимости bessel.bessely1(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbessel.besselynInt32Double">
            <summary>Задает оболочка совместимости bessel.besselyn(Int32 n, Double x)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbessel.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbetaf">
            <summary>Тип оболочки совместимости для alglib+betaf</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbetaf.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbetaf.#ctor(alglib.betaf)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbetaf.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbetaf.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbetaf.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbetaf.Constructor">
            <summary>Задает оболочка совместимости betaf.betaf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbetaf.betaDoubleDouble">
            <summary>Задает оболочка совместимости betaf.beta(Double a, Double b)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbetaf.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbinomialdistr">
            <summary>Тип оболочки совместимости для alglib+binomialdistr</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbinomialdistr.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbinomialdistr.#ctor(alglib.binomialdistr)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbinomialdistr.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimbinomialdistr.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbinomialdistr.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbinomialdistr.Constructor">
            <summary>Задает оболочка совместимости binomialdistr.binomialdistr()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbinomialdistr.binomialcdistributionInt32Int32Double">
            <summary>Задает оболочка совместимости binomialdistr.binomialcdistribution(Int32 k, Int32 n, Double p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbinomialdistr.binomialdistributionInt32Int32Double">
            <summary>Задает оболочка совместимости binomialdistr.binomialdistribution(Int32 k, Int32 n, Double p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimbinomialdistr.invbinomialdistributionInt32Int32Double">
            <summary>Задает оболочка совместимости binomialdistr.invbinomialdistribution(Int32 k, Int32 n, Double y)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimbinomialdistr.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimblas">
            <summary>Тип оболочки совместимости для alglib+blas</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimblas.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimblas.#ctor(alglib.blas)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimblas.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimblas.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimblas.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimblas.Constructor">
            <summary>Задает оболочка совместимости blas.blas()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimblas.columnidxabsmaxDoubleMdArray2Int32Int32Int32">
            <summary>Задает оболочка совместимости blas.columnidxabsmax(Double[,] x, Int32 i1, Int32 i2, Int32 j)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimblas.copyandtransposeDoubleMdArray2Int32Int32Int32Int32DoubleMdArray2RefInt32Int32Int32Int32">
            <summary>Задает оболочка совместимости blas.copyandtranspose(Double[,] a, Int32 is1, Int32 is2, Int32 js1, Int32 js2, Double[,]&amp; b, Int32 id1, Int32 id2, Int32 jd1, Int32 jd2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimblas.copymatrixDoubleMdArray2Int32Int32Int32Int32DoubleMdArray2RefInt32Int32Int32Int32">
            <summary>Задает оболочка совместимости blas.copymatrix(Double[,] a, Int32 is1, Int32 is2, Int32 js1, Int32 js2, Double[,]&amp; b, Int32 id1, Int32 id2, Int32 jd1, Int32 jd2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimblas.inplacetransposeDoubleMdArray2RefInt32Int32Int32Int32DoubleArrayRef">
            <summary>Задает оболочка совместимости blas.inplacetranspose(Double[,]&amp; a, Int32 i1, Int32 i2, Int32 j1, Int32 j2, Double[]&amp; work)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimblas.matrixmatrixmultiplyDoubleMdArray2Int32Int32Int32Int32BooleanDoubleMdArray2Int32Int32Int32Int32BooleanDoubleDoubleMdArray2RefInt32Int32Int32Int32DoubleDoubleArrayRef">
            <summary>Задает оболочка совместимости blas.matrixmatrixmultiply(Double[,] a, Int32 ai1, Int32 ai2, Int32 aj1, Int32 aj2, Boolean transa, Double[,] b, Int32 bi1, Int32 bi2, Int32 bj1, Int32 bj2, Boolean transb, Double alpha, Double[,]&amp; c, Int32 ci1, Int32 ci2, Int32 cj1, Int32 cj2, Double beta, Double[]&amp; work)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimblas.matrixvectormultiplyDoubleMdArray2Int32Int32Int32Int32BooleanDoubleArrayInt32Int32DoubleDoubleArrayRefInt32Int32Double">
            <summary>Задает оболочка совместимости blas.matrixvectormultiply(Double[,] a, Int32 i1, Int32 i2, Int32 j1, Int32 j2, Boolean trans, Double[] x, Int32 ix1, Int32 ix2, Double alpha, Double[]&amp; y, Int32 iy1, Int32 iy2, Double beta)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimblas.pythag2DoubleDouble">
            <summary>Задает оболочка совместимости blas.pythag2(Double x, Double y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimblas.rowidxabsmaxDoubleMdArray2Int32Int32Int32">
            <summary>Задает оболочка совместимости blas.rowidxabsmax(Double[,] x, Int32 j1, Int32 j2, Int32 i)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimblas.upperhessenberg1normDoubleMdArray2Int32Int32Int32Int32DoubleArrayRef">
            <summary>Задает оболочка совместимости blas.upperhessenberg1norm(Double[,] a, Int32 i1, Int32 i2, Int32 j1, Int32 j2, Double[]&amp; work)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimblas.vectoridxabsmaxDoubleArrayInt32Int32">
            <summary>Задает оболочка совместимости blas.vectoridxabsmax(Double[] x, Int32 i1, Int32 i2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimblas.vectornorm2DoubleArrayInt32Int32">
            <summary>Задает оболочка совместимости blas.vectornorm2(Double[] x, Int32 i1, Int32 i2)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimblas.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimchebyshev">
            <summary>Тип оболочки совместимости для alglib+chebyshev</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimchebyshev.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimchebyshev.#ctor(alglib.chebyshev)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimchebyshev.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimchebyshev.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimchebyshev.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimchebyshev.Constructor">
            <summary>Задает оболочка совместимости chebyshev.chebyshev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimchebyshev.chebyshevcalculateInt32Int32Double">
            <summary>Задает оболочка совместимости chebyshev.chebyshevcalculate(Int32 r, Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimchebyshev.chebyshevcoefficientsInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости chebyshev.chebyshevcoefficients(Int32 n, Double[]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimchebyshev.chebyshevsumDoubleArrayInt32Int32Double">
            <summary>Задает оболочка совместимости chebyshev.chebyshevsum(Double[] c, Int32 r, Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimchebyshev.fromchebyshevDoubleArrayInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости chebyshev.fromchebyshev(Double[] a, Int32 n, Double[]&amp; b)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimchebyshev.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimchisquaredistr">
            <summary>Тип оболочки совместимости для alglib+chisquaredistr</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimchisquaredistr.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimchisquaredistr.#ctor(alglib.chisquaredistr)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimchisquaredistr.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimchisquaredistr.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimchisquaredistr.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimchisquaredistr.Constructor">
            <summary>Задает оболочка совместимости chisquaredistr.chisquaredistr()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimchisquaredistr.chisquarecdistributionDoubleDouble">
            <summary>Задает оболочка совместимости chisquaredistr.chisquarecdistribution(Double v, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimchisquaredistr.chisquaredistributionDoubleDouble">
            <summary>Задает оболочка совместимости chisquaredistr.chisquaredistribution(Double v, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimchisquaredistr.invchisquaredistributionDoubleDouble">
            <summary>Задает оболочка совместимости chisquaredistr.invchisquaredistribution(Double v, Double y)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimchisquaredistr.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimclustering">
            <summary>Тип оболочки совместимости для alglib+clustering</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.#ctor(alglib.clustering)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Constructor">
            <summary>Задает оболочка совместимости clustering.clustering()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering._pexec_clusterizergetdistancesDoubleMdArray2Int32Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости clustering._pexec_clusterizergetdistances(Double[,] xy, Int32 npoints, Int32 nfeatures, Int32 disttype, Double[,]&amp; d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering._pexec_clusterizerrunahcclusteringalglibclusterizerstateclusteringalglibahcreport">
            <summary>Задает оболочка совместимости clustering._pexec_clusterizerrunahc(clusterizerstate s, ahcreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.clusterizercreateclusteringalglibclusterizerstate">
            <summary>Задает оболочка совместимости clustering.clusterizercreate(clusterizerstate s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.clusterizergetdistancesDoubleMdArray2Int32Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости clustering.clusterizergetdistances(Double[,] xy, Int32 npoints, Int32 nfeatures, Int32 disttype, Double[,]&amp; d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.clusterizergetkclustersclusteringalglibahcreportInt32Int32ArrayRefInt32ArrayRef">
            <summary>Задает оболочка совместимости clustering.clusterizergetkclusters(ahcreport rep, Int32 k, Int32[]&amp; cidx, Int32[]&amp; cz)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.clusterizerrunahcclusteringalglibclusterizerstateclusteringalglibahcreport">
            <summary>Задает оболочка совместимости clustering.clusterizerrunahc(clusterizerstate s, ahcreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.clusterizerrunahcinternalclusteringalglibclusterizerstateDoubleMdArray2Refclusteringalglibahcreport">
            <summary>Задает оболочка совместимости clustering.clusterizerrunahcinternal(clusterizerstate s, Double[,]&amp; d, ahcreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.clusterizerrunkmeansclusteringalglibclusterizerstateInt32clusteringalglibkmeansreport">
            <summary>Задает оболочка совместимости clustering.clusterizerrunkmeans(clusterizerstate s, Int32 k, kmeansreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.clusterizerseparatedbycorrclusteringalglibahcreportDoubleInt32RefInt32ArrayRefInt32ArrayRef">
            <summary>Задает оболочка совместимости clustering.clusterizerseparatedbycorr(ahcreport rep, Double r, Int32&amp; k, Int32[]&amp; cidx, Int32[]&amp; cz)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.clusterizerseparatedbydistclusteringalglibahcreportDoubleInt32RefInt32ArrayRefInt32ArrayRef">
            <summary>Задает оболочка совместимости clustering.clusterizerseparatedbydist(ahcreport rep, Double r, Int32&amp; k, Int32[]&amp; cidx, Int32[]&amp; cz)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.clusterizersetahcalgoclusteringalglibclusterizerstateInt32">
            <summary>Задает оболочка совместимости clustering.clusterizersetahcalgo(clusterizerstate s, Int32 algo)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.clusterizersetdistancesclusteringalglibclusterizerstateDoubleMdArray2Int32Boolean">
            <summary>Задает оболочка совместимости clustering.clusterizersetdistances(clusterizerstate s, Double[,] d, Int32 npoints, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.clusterizersetkmeanslimitsclusteringalglibclusterizerstateInt32Int32">
            <summary>Задает оболочка совместимости clustering.clusterizersetkmeanslimits(clusterizerstate s, Int32 restarts, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.clusterizersetpointsclusteringalglibclusterizerstateDoubleMdArray2Int32Int32Int32">
            <summary>Задает оболочка совместимости clustering.clusterizersetpoints(clusterizerstate s, Double[,] xy, Int32 npoints, Int32 nfeatures, Int32 disttype)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.evaluatedistancematrixrecDoubleMdArray2Int32Int32DoubleMdArray2Int32Int32Int32Int32">
            <summary>Задает оболочка совместимости clustering.evaluatedistancematrixrec(Double[,] xy, Int32 nfeatures, Int32 disttype, Double[,] d, Int32 i0, Int32 i1, Int32 j0, Int32 j1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.kmeansgenerateinternalDoubleMdArray2Int32Int32Int32Int32Int32Int32RefDoubleMdArray2RefBooleanDoubleMdArray2RefBooleanInt32ArrayRef">
            <summary>Задает оболочка совместимости clustering.kmeansgenerateinternal(Double[,] xy, Int32 npoints, Int32 nvars, Int32 k, Int32 maxits, Int32 restarts, Int32&amp; info, Double[,]&amp; ccol, Boolean needccol, Double[,]&amp; crow, Boolean needcrow, Int32[]&amp; xyc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.selectcenterppDoubleMdArray2Int32Int32DoubleMdArray2RefBooleanArrayRefInt32DoubleArrayRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости clustering.selectcenterpp(Double[,] xy, Int32 npoints, Int32 nvars, Double[,]&amp; centers, Boolean[]&amp; busycenters, Int32 ccnt, Double[]&amp; d2, Double[]&amp; p, Double[]&amp; tmp)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimclustering.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimclustering.Shimahcreport">
            <summary>Тип оболочки совместимости для alglib+clustering+ahcreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.Shimahcreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.Shimahcreport.#ctor(alglib.clustering.ahcreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.Shimahcreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.Shimahcreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimahcreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimahcreport.Constructor">
            <summary>Задает оболочка совместимости ahcreport.ahcreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimahcreport.init">
            <summary>Задает оболочка совместимости ahcreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimahcreport.make_copy">
            <summary>Задает оболочка совместимости ahcreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimclustering.Shimahcreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimahcreport.AllInstances.init">
            <summary>Задает оболочка совместимости ahcreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimahcreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости ahcreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimclustering.Shimclusterizerstate">
            <summary>Тип оболочки совместимости для alglib+clustering+clusterizerstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.Shimclusterizerstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.Shimclusterizerstate.#ctor(alglib.clustering.clusterizerstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.Shimclusterizerstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.Shimclusterizerstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimclusterizerstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimclusterizerstate.Constructor">
            <summary>Задает оболочка совместимости clusterizerstate.clusterizerstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimclusterizerstate.init">
            <summary>Задает оболочка совместимости clusterizerstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimclusterizerstate.make_copy">
            <summary>Задает оболочка совместимости clusterizerstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimclustering.Shimclusterizerstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimclusterizerstate.AllInstances.init">
            <summary>Задает оболочка совместимости clusterizerstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimclusterizerstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости clusterizerstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimclustering.Shimkmeansreport">
            <summary>Тип оболочки совместимости для alglib+clustering+kmeansreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.Shimkmeansreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.Shimkmeansreport.#ctor(alglib.clustering.kmeansreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.Shimkmeansreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclustering.Shimkmeansreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimkmeansreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimkmeansreport.Constructor">
            <summary>Задает оболочка совместимости kmeansreport.kmeansreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimkmeansreport.init">
            <summary>Задает оболочка совместимости kmeansreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimkmeansreport.make_copy">
            <summary>Задает оболочка совместимости kmeansreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimclustering.Shimkmeansreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimkmeansreport.AllInstances.init">
            <summary>Задает оболочка совместимости kmeansreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclustering.Shimkmeansreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости kmeansreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimclusterizerstate">
            <summary>Тип оболочки совместимости для alglib+clusterizerstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclusterizerstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclusterizerstate.#ctor(alglib.clusterizerstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclusterizerstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimclusterizerstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclusterizerstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclusterizerstate.Constructor">
            <summary>Задает оболочка совместимости clusterizerstate.clusterizerstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclusterizerstate.Constructorclusteringalglibclusterizerstate">
            <summary>Задает оболочка совместимости clusterizerstate.clusterizerstate(clusterizerstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclusterizerstate.innerobjGet">
            <summary>Задает оболочка совместимости clusterizerstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclusterizerstate.make_copy">
            <summary>Задает оболочка совместимости clusterizerstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimclusterizerstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclusterizerstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости clusterizerstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimclusterizerstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости clusterizerstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimcomplex">
            <summary>Тип оболочки совместимости для alglib+complex</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcomplex.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcomplex.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcomplex.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcomplex.AdditionOpalglibcomplexalglibcomplex">
            <summary>Задает оболочка совместимости complex.op_Addition(complex lhs, complex rhs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcomplex.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcomplex.DivisionOpalglibcomplexalglibcomplex">
            <summary>Задает оболочка совместимости complex.op_Division(complex lhs, complex rhs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcomplex.EqualityOpalglibcomplexalglibcomplex">
            <summary>Задает оболочка совместимости complex.op_Equality(complex lhs, complex rhs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcomplex.ImplicitOpDoublealglibcomplex">
            <summary>Задает оболочка совместимости complex.op_Implicit(Double _x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcomplex.InequalityOpalglibcomplexalglibcomplex">
            <summary>Задает оболочка совместимости complex.op_Inequality(complex lhs, complex rhs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcomplex.MultiplyOpalglibcomplexalglibcomplex">
            <summary>Задает оболочка совместимости complex.op_Multiply(complex lhs, complex rhs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcomplex.SubtractionOpalglibcomplexalglibcomplex">
            <summary>Задает оболочка совместимости complex.op_Subtraction(complex lhs, complex rhs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcomplex.UnaryNegationOpalglibcomplex">
            <summary>Задает оболочка совместимости complex.op_UnaryNegation(complex lhs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcomplex.UnaryPlusOpalglibcomplex">
            <summary>Задает оболочка совместимости complex.op_UnaryPlus(complex lhs)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimcomplex.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimconv">
            <summary>Тип оболочки совместимости для alglib+conv</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimconv.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimconv.#ctor(alglib.conv)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimconv.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimconv.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimconv.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimconv.Constructor">
            <summary>Задает оболочка совместимости conv.conv()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimconv.convc1dalglibcomplexArrayInt32alglibcomplexArrayInt32alglibcomplexArrayRef">
            <summary>Задает оболочка совместимости conv.convc1d(complex[] a, Int32 m, complex[] b, Int32 n, complex[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimconv.convc1dcircularalglibcomplexArrayInt32alglibcomplexArrayInt32alglibcomplexArrayRef">
            <summary>Задает оболочка совместимости conv.convc1dcircular(complex[] s, Int32 m, complex[] r, Int32 n, complex[]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimconv.convc1dcircularinvalglibcomplexArrayInt32alglibcomplexArrayInt32alglibcomplexArrayRef">
            <summary>Задает оболочка совместимости conv.convc1dcircularinv(complex[] a, Int32 m, complex[] b, Int32 n, complex[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimconv.convc1dinvalglibcomplexArrayInt32alglibcomplexArrayInt32alglibcomplexArrayRef">
            <summary>Задает оболочка совместимости conv.convc1dinv(complex[] a, Int32 m, complex[] b, Int32 n, complex[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimconv.convc1dxalglibcomplexArrayInt32alglibcomplexArrayInt32BooleanInt32Int32alglibcomplexArrayRef">
            <summary>Задает оболочка совместимости conv.convc1dx(complex[] a, Int32 m, complex[] b, Int32 n, Boolean circular, Int32 alg, Int32 q, complex[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimconv.convr1dDoubleArrayInt32DoubleArrayInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости conv.convr1d(Double[] a, Int32 m, Double[] b, Int32 n, Double[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimconv.convr1dcircularDoubleArrayInt32DoubleArrayInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости conv.convr1dcircular(Double[] s, Int32 m, Double[] r, Int32 n, Double[]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimconv.convr1dcircularinvDoubleArrayInt32DoubleArrayInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости conv.convr1dcircularinv(Double[] a, Int32 m, Double[] b, Int32 n, Double[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimconv.convr1dinvDoubleArrayInt32DoubleArrayInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости conv.convr1dinv(Double[] a, Int32 m, Double[] b, Int32 n, Double[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimconv.convr1dxDoubleArrayInt32DoubleArrayInt32BooleanInt32Int32DoubleArrayRef">
            <summary>Задает оболочка совместимости conv.convr1dx(Double[] a, Int32 m, Double[] b, Int32 n, Boolean circular, Int32 alg, Int32 q, Double[]&amp; r)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimconv.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimcorr">
            <summary>Тип оболочки совместимости для alglib+corr</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcorr.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcorr.#ctor(alglib.corr)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcorr.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcorr.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorr.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorr.Constructor">
            <summary>Задает оболочка совместимости corr.corr()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorr.corrc1dalglibcomplexArrayInt32alglibcomplexArrayInt32alglibcomplexArrayRef">
            <summary>Задает оболочка совместимости corr.corrc1d(complex[] signal, Int32 n, complex[] pattern, Int32 m, complex[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorr.corrc1dcircularalglibcomplexArrayInt32alglibcomplexArrayInt32alglibcomplexArrayRef">
            <summary>Задает оболочка совместимости corr.corrc1dcircular(complex[] signal, Int32 m, complex[] pattern, Int32 n, complex[]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorr.corrr1dDoubleArrayInt32DoubleArrayInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости corr.corrr1d(Double[] signal, Int32 n, Double[] pattern, Int32 m, Double[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorr.corrr1dcircularDoubleArrayInt32DoubleArrayInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости corr.corrr1dcircular(Double[] signal, Int32 m, Double[] pattern, Int32 n, Double[]&amp; c)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimcorr.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimcorrelationtests">
            <summary>Тип оболочки совместимости для alglib+correlationtests</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcorrelationtests.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcorrelationtests.#ctor(alglib.correlationtests)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcorrelationtests.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcorrelationtests.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorrelationtests.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorrelationtests.Constructor">
            <summary>Задает оболочка совместимости correlationtests.correlationtests()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorrelationtests.pearsoncorrelationsignificanceDoubleInt32DoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости correlationtests.pearsoncorrelationsignificance(Double r, Int32 n, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorrelationtests.spearmanrankcorrelationsignificanceDoubleInt32DoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости correlationtests.spearmanrankcorrelationsignificance(Double r, Int32 n, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorrelationtests.spearmantail5Double">
            <summary>Задает оболочка совместимости correlationtests.spearmantail5(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorrelationtests.spearmantail6Double">
            <summary>Задает оболочка совместимости correlationtests.spearmantail6(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorrelationtests.spearmantail7Double">
            <summary>Задает оболочка совместимости correlationtests.spearmantail7(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorrelationtests.spearmantail8Double">
            <summary>Задает оболочка совместимости correlationtests.spearmantail8(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorrelationtests.spearmantail9Double">
            <summary>Задает оболочка совместимости correlationtests.spearmantail9(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcorrelationtests.spearmantailDoubleInt32">
            <summary>Задает оболочка совместимости correlationtests.spearmantail(Double t, Int32 n)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimcorrelationtests.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimcqmodels">
            <summary>Тип оболочки совместимости для alglib+cqmodels</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcqmodels.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcqmodels.#ctor(alglib.cqmodels)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcqmodels.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcqmodels.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.Constructor">
            <summary>Задает оболочка совместимости cqmodels.cqmodels()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmadxcqmodelsalglibconvexquadraticmodelDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости cqmodels.cqmadx(convexquadraticmodel s, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmconstrainedoptimumcqmodelsalglibconvexquadraticmodelDoubleArrayRef">
            <summary>Задает оболочка совместимости cqmodels.cqmconstrainedoptimum(convexquadraticmodel s, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmdebugconstrainedevalecqmodelsalglibconvexquadraticmodelDoubleArray">
            <summary>Задает оболочка совместимости cqmodels.cqmdebugconstrainedevale(convexquadraticmodel s, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmdebugconstrainedevaltcqmodelsalglibconvexquadraticmodelDoubleArray">
            <summary>Задает оболочка совместимости cqmodels.cqmdebugconstrainedevalt(convexquadraticmodel s, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmdropacqmodelsalglibconvexquadraticmodel">
            <summary>Задает оболочка совместимости cqmodels.cqmdropa(convexquadraticmodel s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmevalcqmodelsalglibconvexquadraticmodelDoubleArray">
            <summary>Задает оболочка совместимости cqmodels.cqmeval(convexquadraticmodel s, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmevalxcqmodelsalglibconvexquadraticmodelDoubleArrayDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости cqmodels.cqmevalx(convexquadraticmodel s, Double[] x, Double&amp; r, Double&amp; noise)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmgetacqmodelsalglibconvexquadraticmodelDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости cqmodels.cqmgeta(convexquadraticmodel s, Double[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmgradunconstrainedcqmodelsalglibconvexquadraticmodelDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости cqmodels.cqmgradunconstrained(convexquadraticmodel s, Double[] x, Double[]&amp; g)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqminitInt32cqmodelsalglibconvexquadraticmodel">
            <summary>Задает оболочка совместимости cqmodels.cqminit(Int32 n, convexquadraticmodel s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmrebuildcqmodelsalglibconvexquadraticmodel">
            <summary>Задает оболочка совместимости cqmodels.cqmrebuild(convexquadraticmodel s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmrewritedensediagonalcqmodelsalglibconvexquadraticmodelDoubleArray">
            <summary>Задает оболочка совместимости cqmodels.cqmrewritedensediagonal(convexquadraticmodel s, Double[] z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmscalevectorcqmodelsalglibconvexquadraticmodelDoubleArrayRef">
            <summary>Задает оболочка совместимости cqmodels.cqmscalevector(convexquadraticmodel s, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmsetacqmodelsalglibconvexquadraticmodelDoubleMdArray2BooleanDouble">
            <summary>Задает оболочка совместимости cqmodels.cqmseta(convexquadraticmodel s, Double[,] a, Boolean isupper, Double alpha)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmsetactivesetcqmodelsalglibconvexquadraticmodelDoubleArrayBooleanArray">
            <summary>Задает оболочка совместимости cqmodels.cqmsetactiveset(convexquadraticmodel s, Double[] x, Boolean[] activeset)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmsetbcqmodelsalglibconvexquadraticmodelDoubleArray">
            <summary>Задает оболочка совместимости cqmodels.cqmsetb(convexquadraticmodel s, Double[] b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmsetdcqmodelsalglibconvexquadraticmodelDoubleArrayDouble">
            <summary>Задает оболочка совместимости cqmodels.cqmsetd(convexquadraticmodel s, Double[] d, Double tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmsetqcqmodelsalglibconvexquadraticmodelDoubleMdArray2DoubleArrayInt32Double">
            <summary>Задает оболочка совместимости cqmodels.cqmsetq(convexquadraticmodel s, Double[,] q, Double[] r, Int32 k, Double theta)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmsolveeacqmodelsalglibconvexquadraticmodelDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости cqmodels.cqmsolveea(convexquadraticmodel s, Double[]&amp; x, Double[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.cqmxtadx2cqmodelsalglibconvexquadraticmodelDoubleArray">
            <summary>Задает оболочка совместимости cqmodels.cqmxtadx2(convexquadraticmodel s, Double[] x)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimcqmodels.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimcqmodels.Shimconvexquadraticmodel">
            <summary>Тип оболочки совместимости для alglib+cqmodels+convexquadraticmodel</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcqmodels.Shimconvexquadraticmodel.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcqmodels.Shimconvexquadraticmodel.#ctor(alglib.cqmodels.convexquadraticmodel)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcqmodels.Shimconvexquadraticmodel.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcqmodels.Shimconvexquadraticmodel.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.Shimconvexquadraticmodel.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.Shimconvexquadraticmodel.Constructor">
            <summary>Задает оболочка совместимости convexquadraticmodel.convexquadraticmodel()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.Shimconvexquadraticmodel.init">
            <summary>Задает оболочка совместимости convexquadraticmodel.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.Shimconvexquadraticmodel.make_copy">
            <summary>Задает оболочка совместимости convexquadraticmodel.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimcqmodels.Shimconvexquadraticmodel.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.Shimconvexquadraticmodel.AllInstances.init">
            <summary>Задает оболочка совместимости convexquadraticmodel.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcqmodels.Shimconvexquadraticmodel.AllInstances.make_copy">
            <summary>Задает оболочка совместимости convexquadraticmodel.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimcreflections">
            <summary>Тип оболочки совместимости для alglib+creflections</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcreflections.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcreflections.#ctor(alglib.creflections)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcreflections.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimcreflections.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcreflections.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcreflections.Constructor">
            <summary>Задает оболочка совместимости creflections.creflections()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcreflections.complexapplyreflectionfromtheleftalglibcomplexMdArray2RefalglibcomplexalglibcomplexArrayInt32Int32Int32Int32alglibcomplexArrayRef">
            <summary>Задает оболочка совместимости creflections.complexapplyreflectionfromtheleft(complex[,]&amp; c, complex tau, complex[] v, Int32 m1, Int32 m2, Int32 n1, Int32 n2, complex[]&amp; work)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcreflections.complexapplyreflectionfromtherightalglibcomplexMdArray2RefalglibcomplexalglibcomplexArrayRefInt32Int32Int32Int32alglibcomplexArrayRef">
            <summary>Задает оболочка совместимости creflections.complexapplyreflectionfromtheright(complex[,]&amp; c, complex tau, complex[]&amp; v, Int32 m1, Int32 m2, Int32 n1, Int32 n2, complex[]&amp; work)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimcreflections.complexgeneratereflectionalglibcomplexArrayRefInt32alglibcomplexRef">
            <summary>Задает оболочка совместимости creflections.complexgeneratereflection(complex[]&amp; x, Int32 n, complex&amp; tau)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimcreflections.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdatacomp">
            <summary>Тип оболочки совместимости для alglib+datacomp</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdatacomp.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdatacomp.#ctor(alglib.datacomp)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdatacomp.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdatacomp.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdatacomp.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdatacomp.Constructor">
            <summary>Задает оболочка совместимости datacomp.datacomp()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdatacomp.kmeansgenerateDoubleMdArray2Int32Int32Int32Int32Int32RefDoubleMdArray2RefInt32ArrayRef">
            <summary>Задает оболочка совместимости datacomp.kmeansgenerate(Double[,] xy, Int32 npoints, Int32 nvars, Int32 k, Int32 restarts, Int32&amp; info, Double[,]&amp; c, Int32[]&amp; xyc)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdatacomp.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdawson">
            <summary>Тип оболочки совместимости для alglib+dawson</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdawson.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdawson.#ctor(alglib.dawson)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdawson.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdawson.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdawson.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdawson.Constructor">
            <summary>Задает оболочка совместимости dawson.dawson()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdawson.dawsonintegralDouble">
            <summary>Задает оболочка совместимости dawson.dawsonintegral(Double x)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdawson.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdecisionforest">
            <summary>Тип оболочки совместимости для alglib+decisionforest</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdecisionforest.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdecisionforest.#ctor(alglib.decisionforest)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdecisionforest.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdecisionforest.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdecisionforest.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdecisionforest.Constructor">
            <summary>Задает оболочка совместимости decisionforest.decisionforest()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdecisionforest.Constructordforestalglibdecisionforest">
            <summary>Задает оболочка совместимости decisionforest.decisionforest(decisionforest obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdecisionforest.innerobjGet">
            <summary>Задает оболочка совместимости decisionforest.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdecisionforest.make_copy">
            <summary>Задает оболочка совместимости decisionforest.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdecisionforest.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdecisionforest.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости decisionforest.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdecisionforest.AllInstances.make_copy">
            <summary>Задает оболочка совместимости decisionforest.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdensesolver">
            <summary>Тип оболочки совместимости для alglib+densesolver</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolver.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolver.#ctor(alglib.densesolver)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolver.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolver.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.Constructor">
            <summary>Задает оболочка совместимости densesolver.densesolver()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver._pexec_cmatrixsolvealglibcomplexMdArray2Int32alglibcomplexArrayInt32RefdensesolveralglibdensesolverreportalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости densesolver._pexec_cmatrixsolve(complex[,] a, Int32 n, complex[] b, Int32&amp; info, densesolverreport rep, complex[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver._pexec_cmatrixsolvemalglibcomplexMdArray2Int32alglibcomplexMdArray2Int32BooleanInt32RefdensesolveralglibdensesolverreportalglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver._pexec_cmatrixsolvem(complex[,] a, Int32 n, complex[,] b, Int32 m, Boolean rfs, Int32&amp; info, densesolverreport rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver._pexec_hpdmatrixsolvealglibcomplexMdArray2Int32BooleanalglibcomplexArrayInt32RefdensesolveralglibdensesolverreportalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости densesolver._pexec_hpdmatrixsolve(complex[,] a, Int32 n, Boolean isupper, complex[] b, Int32&amp; info, densesolverreport rep, complex[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver._pexec_hpdmatrixsolvemalglibcomplexMdArray2Int32BooleanalglibcomplexMdArray2Int32Int32RefdensesolveralglibdensesolverreportalglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver._pexec_hpdmatrixsolvem(complex[,] a, Int32 n, Boolean isupper, complex[,] b, Int32 m, Int32&amp; info, densesolverreport rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver._pexec_rmatrixsolveDoubleMdArray2Int32DoubleArrayInt32RefdensesolveralglibdensesolverreportDoubleArrayRef">
            <summary>Задает оболочка совместимости densesolver._pexec_rmatrixsolve(Double[,] a, Int32 n, Double[] b, Int32&amp; info, densesolverreport rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver._pexec_rmatrixsolvelsDoubleMdArray2Int32Int32DoubleArrayDoubleInt32RefdensesolveralglibdensesolverlsreportDoubleArrayRef">
            <summary>Задает оболочка совместимости densesolver._pexec_rmatrixsolvels(Double[,] a, Int32 nrows, Int32 ncols, Double[] b, Double threshold, Int32&amp; info, densesolverlsreport rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver._pexec_rmatrixsolvemDoubleMdArray2Int32DoubleMdArray2Int32BooleanInt32RefdensesolveralglibdensesolverreportDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver._pexec_rmatrixsolvem(Double[,] a, Int32 n, Double[,] b, Int32 m, Boolean rfs, Int32&amp; info, densesolverreport rep, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver._pexec_spdmatrixsolveDoubleMdArray2Int32BooleanDoubleArrayInt32RefdensesolveralglibdensesolverreportDoubleArrayRef">
            <summary>Задает оболочка совместимости densesolver._pexec_spdmatrixsolve(Double[,] a, Int32 n, Boolean isupper, Double[] b, Int32&amp; info, densesolverreport rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver._pexec_spdmatrixsolvemDoubleMdArray2Int32BooleanDoubleMdArray2Int32Int32RefdensesolveralglibdensesolverreportDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver._pexec_spdmatrixsolvem(Double[,] a, Int32 n, Boolean isupper, Double[,] b, Int32 m, Int32&amp; info, densesolverreport rep, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.cbasiclusolvealglibcomplexMdArray2Int32ArrayDoubleInt32alglibcomplexArrayRefalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости densesolver.cbasiclusolve(complex[,] lua, Int32[] p, Double scalea, Int32 n, complex[]&amp; xb, complex[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.cmatrixlusolvealglibcomplexMdArray2Int32ArrayInt32alglibcomplexArrayInt32RefdensesolveralglibdensesolverreportalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости densesolver.cmatrixlusolve(complex[,] lua, Int32[] p, Int32 n, complex[] b, Int32&amp; info, densesolverreport rep, complex[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.cmatrixlusolveinternalalglibcomplexMdArray2Int32ArrayDoubleInt32alglibcomplexMdArray2BooleanalglibcomplexMdArray2Int32Int32RefdensesolveralglibdensesolverreportalglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver.cmatrixlusolveinternal(complex[,] lua, Int32[] p, Double scalea, Int32 n, complex[,] a, Boolean havea, complex[,] b, Int32 m, Int32&amp; info, densesolverreport rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.cmatrixlusolvemalglibcomplexMdArray2Int32ArrayInt32alglibcomplexMdArray2Int32Int32RefdensesolveralglibdensesolverreportalglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver.cmatrixlusolvem(complex[,] lua, Int32[] p, Int32 n, complex[,] b, Int32 m, Int32&amp; info, densesolverreport rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.cmatrixmixedsolvealglibcomplexMdArray2alglibcomplexMdArray2Int32ArrayInt32alglibcomplexArrayInt32RefdensesolveralglibdensesolverreportalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости densesolver.cmatrixmixedsolve(complex[,] a, complex[,] lua, Int32[] p, Int32 n, complex[] b, Int32&amp; info, densesolverreport rep, complex[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.cmatrixmixedsolvemalglibcomplexMdArray2alglibcomplexMdArray2Int32ArrayInt32alglibcomplexMdArray2Int32Int32RefdensesolveralglibdensesolverreportalglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver.cmatrixmixedsolvem(complex[,] a, complex[,] lua, Int32[] p, Int32 n, complex[,] b, Int32 m, Int32&amp; info, densesolverreport rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.cmatrixsolvealglibcomplexMdArray2Int32alglibcomplexArrayInt32RefdensesolveralglibdensesolverreportalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости densesolver.cmatrixsolve(complex[,] a, Int32 n, complex[] b, Int32&amp; info, densesolverreport rep, complex[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.cmatrixsolvemalglibcomplexMdArray2Int32alglibcomplexMdArray2Int32BooleanInt32RefdensesolveralglibdensesolverreportalglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver.cmatrixsolvem(complex[,] a, Int32 n, complex[,] b, Int32 m, Boolean rfs, Int32&amp; info, densesolverreport rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.densesolverrfsmaxInt32DoubleDouble">
            <summary>Задает оболочка совместимости densesolver.densesolverrfsmax(Int32 n, Double r1, Double rinf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.densesolverrfsmaxv2Int32Double">
            <summary>Задает оболочка совместимости densesolver.densesolverrfsmaxv2(Int32 n, Double r2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.hpdbasiccholeskysolvealglibcomplexMdArray2DoubleInt32BooleanalglibcomplexArrayRefalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости densesolver.hpdbasiccholeskysolve(complex[,] cha, Double sqrtscalea, Int32 n, Boolean isupper, complex[]&amp; xb, complex[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.hpdmatrixcholeskysolvealglibcomplexMdArray2Int32BooleanalglibcomplexArrayInt32RefdensesolveralglibdensesolverreportalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости densesolver.hpdmatrixcholeskysolve(complex[,] cha, Int32 n, Boolean isupper, complex[] b, Int32&amp; info, densesolverreport rep, complex[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.hpdmatrixcholeskysolveinternalalglibcomplexMdArray2DoubleInt32BooleanalglibcomplexMdArray2BooleanalglibcomplexMdArray2Int32Int32RefdensesolveralglibdensesolverreportalglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver.hpdmatrixcholeskysolveinternal(complex[,] cha, Double sqrtscalea, Int32 n, Boolean isupper, complex[,] a, Boolean havea, complex[,] b, Int32 m, Int32&amp; info, densesolverreport rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.hpdmatrixcholeskysolvemalglibcomplexMdArray2Int32BooleanalglibcomplexMdArray2Int32Int32RefdensesolveralglibdensesolverreportalglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver.hpdmatrixcholeskysolvem(complex[,] cha, Int32 n, Boolean isupper, complex[,] b, Int32 m, Int32&amp; info, densesolverreport rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.hpdmatrixsolvealglibcomplexMdArray2Int32BooleanalglibcomplexArrayInt32RefdensesolveralglibdensesolverreportalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости densesolver.hpdmatrixsolve(complex[,] a, Int32 n, Boolean isupper, complex[] b, Int32&amp; info, densesolverreport rep, complex[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.hpdmatrixsolvemalglibcomplexMdArray2Int32BooleanalglibcomplexMdArray2Int32Int32RefdensesolveralglibdensesolverreportalglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver.hpdmatrixsolvem(complex[,] a, Int32 n, Boolean isupper, complex[,] b, Int32 m, Int32&amp; info, densesolverreport rep, complex[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.rbasiclusolveDoubleMdArray2Int32ArrayDoubleInt32DoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости densesolver.rbasiclusolve(Double[,] lua, Int32[] p, Double scalea, Int32 n, Double[]&amp; xb, Double[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.rmatrixlusolveDoubleMdArray2Int32ArrayInt32DoubleArrayInt32RefdensesolveralglibdensesolverreportDoubleArrayRef">
            <summary>Задает оболочка совместимости densesolver.rmatrixlusolve(Double[,] lua, Int32[] p, Int32 n, Double[] b, Int32&amp; info, densesolverreport rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.rmatrixlusolveinternalDoubleMdArray2Int32ArrayDoubleInt32DoubleMdArray2BooleanDoubleMdArray2Int32Int32RefdensesolveralglibdensesolverreportDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver.rmatrixlusolveinternal(Double[,] lua, Int32[] p, Double scalea, Int32 n, Double[,] a, Boolean havea, Double[,] b, Int32 m, Int32&amp; info, densesolverreport rep, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.rmatrixlusolvemDoubleMdArray2Int32ArrayInt32DoubleMdArray2Int32Int32RefdensesolveralglibdensesolverreportDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver.rmatrixlusolvem(Double[,] lua, Int32[] p, Int32 n, Double[,] b, Int32 m, Int32&amp; info, densesolverreport rep, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.rmatrixmixedsolveDoubleMdArray2DoubleMdArray2Int32ArrayInt32DoubleArrayInt32RefdensesolveralglibdensesolverreportDoubleArrayRef">
            <summary>Задает оболочка совместимости densesolver.rmatrixmixedsolve(Double[,] a, Double[,] lua, Int32[] p, Int32 n, Double[] b, Int32&amp; info, densesolverreport rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.rmatrixmixedsolvemDoubleMdArray2DoubleMdArray2Int32ArrayInt32DoubleMdArray2Int32Int32RefdensesolveralglibdensesolverreportDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver.rmatrixmixedsolvem(Double[,] a, Double[,] lua, Int32[] p, Int32 n, Double[,] b, Int32 m, Int32&amp; info, densesolverreport rep, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.rmatrixsolveDoubleMdArray2Int32DoubleArrayInt32RefdensesolveralglibdensesolverreportDoubleArrayRef">
            <summary>Задает оболочка совместимости densesolver.rmatrixsolve(Double[,] a, Int32 n, Double[] b, Int32&amp; info, densesolverreport rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.rmatrixsolvelsDoubleMdArray2Int32Int32DoubleArrayDoubleInt32RefdensesolveralglibdensesolverlsreportDoubleArrayRef">
            <summary>Задает оболочка совместимости densesolver.rmatrixsolvels(Double[,] a, Int32 nrows, Int32 ncols, Double[] b, Double threshold, Int32&amp; info, densesolverlsreport rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.rmatrixsolvemDoubleMdArray2Int32DoubleMdArray2Int32BooleanInt32RefdensesolveralglibdensesolverreportDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver.rmatrixsolvem(Double[,] a, Int32 n, Double[,] b, Int32 m, Boolean rfs, Int32&amp; info, densesolverreport rep, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.spdbasiccholeskysolveDoubleMdArray2DoubleInt32BooleanDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости densesolver.spdbasiccholeskysolve(Double[,] cha, Double sqrtscalea, Int32 n, Boolean isupper, Double[]&amp; xb, Double[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.spdmatrixcholeskysolveDoubleMdArray2Int32BooleanDoubleArrayInt32RefdensesolveralglibdensesolverreportDoubleArrayRef">
            <summary>Задает оболочка совместимости densesolver.spdmatrixcholeskysolve(Double[,] cha, Int32 n, Boolean isupper, Double[] b, Int32&amp; info, densesolverreport rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.spdmatrixcholeskysolveinternalDoubleMdArray2DoubleInt32BooleanDoubleMdArray2BooleanDoubleMdArray2Int32Int32RefdensesolveralglibdensesolverreportDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver.spdmatrixcholeskysolveinternal(Double[,] cha, Double sqrtscalea, Int32 n, Boolean isupper, Double[,] a, Boolean havea, Double[,] b, Int32 m, Int32&amp; info, densesolverreport rep, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.spdmatrixcholeskysolvemDoubleMdArray2Int32BooleanDoubleMdArray2Int32Int32RefdensesolveralglibdensesolverreportDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver.spdmatrixcholeskysolvem(Double[,] cha, Int32 n, Boolean isupper, Double[,] b, Int32 m, Int32&amp; info, densesolverreport rep, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.spdmatrixsolveDoubleMdArray2Int32BooleanDoubleArrayInt32RefdensesolveralglibdensesolverreportDoubleArrayRef">
            <summary>Задает оболочка совместимости densesolver.spdmatrixsolve(Double[,] a, Int32 n, Boolean isupper, Double[] b, Int32&amp; info, densesolverreport rep, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.spdmatrixsolvemDoubleMdArray2Int32BooleanDoubleMdArray2Int32Int32RefdensesolveralglibdensesolverreportDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости densesolver.spdmatrixsolvem(Double[,] a, Int32 n, Boolean isupper, Double[,] b, Int32 m, Int32&amp; info, densesolverreport rep, Double[,]&amp; x)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdensesolver.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverlsreport">
            <summary>Тип оболочки совместимости для alglib+densesolver+densesolverlsreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverlsreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverlsreport.#ctor(alglib.densesolver.densesolverlsreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverlsreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverlsreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverlsreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverlsreport.Constructor">
            <summary>Задает оболочка совместимости densesolverlsreport.densesolverlsreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverlsreport.init">
            <summary>Задает оболочка совместимости densesolverlsreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverlsreport.make_copy">
            <summary>Задает оболочка совместимости densesolverlsreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverlsreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverlsreport.AllInstances.init">
            <summary>Задает оболочка совместимости densesolverlsreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverlsreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости densesolverlsreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverreport">
            <summary>Тип оболочки совместимости для alglib+densesolver+densesolverreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverreport.#ctor(alglib.densesolver.densesolverreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverreport.Constructor">
            <summary>Задает оболочка совместимости densesolverreport.densesolverreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverreport.init">
            <summary>Задает оболочка совместимости densesolverreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverreport.make_copy">
            <summary>Задает оболочка совместимости densesolverreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverreport.AllInstances.init">
            <summary>Задает оболочка совместимости densesolverreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolver.Shimdensesolverreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости densesolverreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdensesolverlsreport">
            <summary>Тип оболочки совместимости для alglib+densesolverlsreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolverlsreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolverlsreport.#ctor(alglib.densesolverlsreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolverlsreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolverlsreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.Constructor">
            <summary>Задает оболочка совместимости densesolverlsreport.densesolverlsreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.Constructordensesolveralglibdensesolverlsreport">
            <summary>Задает оболочка совместимости densesolverlsreport.densesolverlsreport(densesolverlsreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.cxGet">
            <summary>Задает оболочка совместимости densesolverlsreport.get_cx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.cxSetDoubleMdArray2">
            <summary>Задает оболочка совместимости densesolverlsreport.set_cx(Double[,] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.innerobjGet">
            <summary>Задает оболочка совместимости densesolverlsreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.kGet">
            <summary>Задает оболочка совместимости densesolverlsreport.get_k()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.kSetInt32">
            <summary>Задает оболочка совместимости densesolverlsreport.set_k(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.make_copy">
            <summary>Задает оболочка совместимости densesolverlsreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.nGet">
            <summary>Задает оболочка совместимости densesolverlsreport.get_n()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.nSetInt32">
            <summary>Задает оболочка совместимости densesolverlsreport.set_n(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.r2Get">
            <summary>Задает оболочка совместимости densesolverlsreport.get_r2()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.r2SetDouble">
            <summary>Задает оболочка совместимости densesolverlsreport.set_r2(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdensesolverlsreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.AllInstances.cxGet">
            <summary>Задает оболочка совместимости densesolverlsreport.get_cx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.AllInstances.cxSetDoubleMdArray2">
            <summary>Задает оболочка совместимости densesolverlsreport.set_cx(Double[,] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости densesolverlsreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.AllInstances.kGet">
            <summary>Задает оболочка совместимости densesolverlsreport.get_k()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.AllInstances.kSetInt32">
            <summary>Задает оболочка совместимости densesolverlsreport.set_k(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости densesolverlsreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.AllInstances.nGet">
            <summary>Задает оболочка совместимости densesolverlsreport.get_n()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.AllInstances.nSetInt32">
            <summary>Задает оболочка совместимости densesolverlsreport.set_n(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.AllInstances.r2Get">
            <summary>Задает оболочка совместимости densesolverlsreport.get_r2()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverlsreport.AllInstances.r2SetDouble">
            <summary>Задает оболочка совместимости densesolverlsreport.set_r2(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdensesolverreport">
            <summary>Тип оболочки совместимости для alglib+densesolverreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolverreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolverreport.#ctor(alglib.densesolverreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolverreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdensesolverreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverreport.Constructor">
            <summary>Задает оболочка совместимости densesolverreport.densesolverreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverreport.Constructordensesolveralglibdensesolverreport">
            <summary>Задает оболочка совместимости densesolverreport.densesolverreport(densesolverreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverreport.innerobjGet">
            <summary>Задает оболочка совместимости densesolverreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverreport.make_copy">
            <summary>Задает оболочка совместимости densesolverreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverreport.r1Get">
            <summary>Задает оболочка совместимости densesolverreport.get_r1()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverreport.r1SetDouble">
            <summary>Задает оболочка совместимости densesolverreport.set_r1(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverreport.rinfGet">
            <summary>Задает оболочка совместимости densesolverreport.get_rinf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverreport.rinfSetDouble">
            <summary>Задает оболочка совместимости densesolverreport.set_rinf(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdensesolverreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости densesolverreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости densesolverreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverreport.AllInstances.r1Get">
            <summary>Задает оболочка совместимости densesolverreport.get_r1()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverreport.AllInstances.r1SetDouble">
            <summary>Задает оболочка совместимости densesolverreport.set_r1(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverreport.AllInstances.rinfGet">
            <summary>Задает оболочка совместимости densesolverreport.get_rinf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdensesolverreport.AllInstances.rinfSetDouble">
            <summary>Задает оболочка совместимости densesolverreport.set_rinf(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdforest">
            <summary>Тип оболочки совместимости для alglib+dforest</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.#ctor(alglib.dforest)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Constructor">
            <summary>Задает оболочка совместимости dforest.dforest()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfallocalglibserializerdforestalglibdecisionforest">
            <summary>Задает оболочка совместимости dforest.dfalloc(serializer s, decisionforest forest)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfavgcedforestalglibdecisionforestDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости dforest.dfavgce(decisionforest df, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfavgerrordforestalglibdecisionforestDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости dforest.dfavgerror(decisionforest df, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfavgrelerrordforestalglibdecisionforestDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости dforest.dfavgrelerror(decisionforest df, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfbuildinternalDoubleMdArray2Int32Int32Int32Int32Int32Int32Int32Int32Refdforestalglibdecisionforestdforestalglibdfreport">
            <summary>Задает оболочка совместимости dforest.dfbuildinternal(Double[,] xy, Int32 npoints, Int32 nvars, Int32 nclasses, Int32 ntrees, Int32 samplesize, Int32 nfeatures, Int32 flags, Int32&amp; info, decisionforest df, dfreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfbuildrandomdecisionforestDoubleMdArray2Int32Int32Int32Int32DoubleInt32Refdforestalglibdecisionforestdforestalglibdfreport">
            <summary>Задает оболочка совместимости dforest.dfbuildrandomdecisionforest(Double[,] xy, Int32 npoints, Int32 nvars, Int32 nclasses, Int32 ntrees, Double r, Int32&amp; info, decisionforest df, dfreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfbuildrandomdecisionforestx1DoubleMdArray2Int32Int32Int32Int32Int32DoubleInt32Refdforestalglibdecisionforestdforestalglibdfreport">
            <summary>Задает оболочка совместимости dforest.dfbuildrandomdecisionforestx1(Double[,] xy, Int32 npoints, Int32 nvars, Int32 nclasses, Int32 ntrees, Int32 nrndvars, Double r, Int32&amp; info, decisionforest df, dfreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfbuildtreeDoubleMdArray2Int32Int32Int32Int32Int32Int32dforestalglibdfinternalbuffershqrndalglibhqrndstate">
            <summary>Задает оболочка совместимости dforest.dfbuildtree(Double[,] xy, Int32 npoints, Int32 nvars, Int32 nclasses, Int32 nfeatures, Int32 nvarsinpool, Int32 flags, dfinternalbuffers bufs, hqrndstate rs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfbuildtreerecDoubleMdArray2Int32Int32Int32Int32Int32Int32Int32RefInt32Int32dforestalglibdfinternalbuffershqrndalglibhqrndstate">
            <summary>Задает оболочка совместимости dforest.dfbuildtreerec(Double[,] xy, Int32 npoints, Int32 nvars, Int32 nclasses, Int32 nfeatures, Int32 nvarsinpool, Int32 flags, Int32&amp; numprocessed, Int32 idx1, Int32 idx2, dfinternalbuffers bufs, hqrndstate rs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfclserrordforestalglibdecisionforestDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости dforest.dfclserror(decisionforest df, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfcopydforestalglibdecisionforestdforestalglibdecisionforest">
            <summary>Задает оболочка совместимости dforest.dfcopy(decisionforest df1, decisionforest df2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfprocessdforestalglibdecisionforestDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости dforest.dfprocess(decisionforest df, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfprocessidforestalglibdecisionforestDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости dforest.dfprocessi(decisionforest df, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfprocessinternaldforestalglibdecisionforestInt32DoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости dforest.dfprocessinternal(decisionforest df, Int32 offs, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfrelclserrordforestalglibdecisionforestDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости dforest.dfrelclserror(decisionforest df, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfrmserrordforestalglibdecisionforestDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости dforest.dfrmserror(decisionforest df, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfserializealglibserializerdforestalglibdecisionforest">
            <summary>Задает оболочка совместимости dforest.dfserialize(serializer s, decisionforest forest)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfsplitcDoubleArrayRefInt32ArrayRefInt32ArrayRefInt32Int32Int32Int32RefDoubleRefDoubleRefDoubleArrayRefInt32ArrayRef">
            <summary>Задает оболочка совместимости dforest.dfsplitc(Double[]&amp; x, Int32[]&amp; c, Int32[]&amp; cntbuf, Int32 n, Int32 nc, Int32 flags, Int32&amp; info, Double&amp; threshold, Double&amp; e, Double[]&amp; sortrbuf, Int32[]&amp; sortibuf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfsplitrDoubleArrayRefDoubleArrayRefInt32Int32Int32RefDoubleRefDoubleRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости dforest.dfsplitr(Double[]&amp; x, Double[]&amp; y, Int32 n, Int32 flags, Int32&amp; info, Double&amp; threshold, Double&amp; e, Double[]&amp; sortrbuf, Double[]&amp; sortrbuf2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.dfunserializealglibserializerdforestalglibdecisionforest">
            <summary>Задает оболочка совместимости dforest.dfunserialize(serializer s, decisionforest forest)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdforest.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdforest.Shimdecisionforest">
            <summary>Тип оболочки совместимости для alglib+dforest+decisionforest</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.Shimdecisionforest.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.Shimdecisionforest.#ctor(alglib.dforest.decisionforest)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.Shimdecisionforest.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.Shimdecisionforest.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdecisionforest.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdecisionforest.Constructor">
            <summary>Задает оболочка совместимости decisionforest.decisionforest()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdecisionforest.init">
            <summary>Задает оболочка совместимости decisionforest.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdecisionforest.make_copy">
            <summary>Задает оболочка совместимости decisionforest.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdforest.Shimdecisionforest.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdecisionforest.AllInstances.init">
            <summary>Задает оболочка совместимости decisionforest.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdecisionforest.AllInstances.make_copy">
            <summary>Задает оболочка совместимости decisionforest.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdforest.Shimdfinternalbuffers">
            <summary>Тип оболочки совместимости для alglib+dforest+dfinternalbuffers</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.Shimdfinternalbuffers.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.Shimdfinternalbuffers.#ctor(alglib.dforest.dfinternalbuffers)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.Shimdfinternalbuffers.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.Shimdfinternalbuffers.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdfinternalbuffers.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdfinternalbuffers.Constructor">
            <summary>Задает оболочка совместимости dfinternalbuffers.dfinternalbuffers()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdfinternalbuffers.init">
            <summary>Задает оболочка совместимости dfinternalbuffers.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdfinternalbuffers.make_copy">
            <summary>Задает оболочка совместимости dfinternalbuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdforest.Shimdfinternalbuffers.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdfinternalbuffers.AllInstances.init">
            <summary>Задает оболочка совместимости dfinternalbuffers.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdfinternalbuffers.AllInstances.make_copy">
            <summary>Задает оболочка совместимости dfinternalbuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdforest.Shimdfreport">
            <summary>Тип оболочки совместимости для alglib+dforest+dfreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.Shimdfreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.Shimdfreport.#ctor(alglib.dforest.dfreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.Shimdfreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdforest.Shimdfreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdfreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdfreport.Constructor">
            <summary>Задает оболочка совместимости dfreport.dfreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdfreport.init">
            <summary>Задает оболочка совместимости dfreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdfreport.make_copy">
            <summary>Задает оболочка совместимости dfreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdforest.Shimdfreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdfreport.AllInstances.init">
            <summary>Задает оболочка совместимости dfreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdforest.Shimdfreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости dfreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdfreport">
            <summary>Тип оболочки совместимости для alglib+dfreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdfreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdfreport.#ctor(alglib.dfreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdfreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimdfreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.Constructor">
            <summary>Задает оболочка совместимости dfreport.dfreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.Constructordforestalglibdfreport">
            <summary>Задает оболочка совместимости dfreport.dfreport(dfreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.avgceGet">
            <summary>Задает оболочка совместимости dfreport.get_avgce()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.avgceSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_avgce(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.avgerrorGet">
            <summary>Задает оболочка совместимости dfreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.avgerrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.avgrelerrorGet">
            <summary>Задает оболочка совместимости dfreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.innerobjGet">
            <summary>Задает оболочка совместимости dfreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.make_copy">
            <summary>Задает оболочка совместимости dfreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.oobavgceGet">
            <summary>Задает оболочка совместимости dfreport.get_oobavgce()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.oobavgceSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_oobavgce(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.oobavgerrorGet">
            <summary>Задает оболочка совместимости dfreport.get_oobavgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.oobavgerrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_oobavgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.oobavgrelerrorGet">
            <summary>Задает оболочка совместимости dfreport.get_oobavgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.oobavgrelerrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_oobavgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.oobrelclserrorGet">
            <summary>Задает оболочка совместимости dfreport.get_oobrelclserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.oobrelclserrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_oobrelclserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.oobrmserrorGet">
            <summary>Задает оболочка совместимости dfreport.get_oobrmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.oobrmserrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_oobrmserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.relclserrorGet">
            <summary>Задает оболочка совместимости dfreport.get_relclserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.relclserrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_relclserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.rmserrorGet">
            <summary>Задает оболочка совместимости dfreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.rmserrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_rmserror(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimdfreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.avgceGet">
            <summary>Задает оболочка совместимости dfreport.get_avgce()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.avgceSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_avgce(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.avgerrorGet">
            <summary>Задает оболочка совместимости dfreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.avgerrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.avgrelerrorGet">
            <summary>Задает оболочка совместимости dfreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости dfreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости dfreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.oobavgceGet">
            <summary>Задает оболочка совместимости dfreport.get_oobavgce()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.oobavgceSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_oobavgce(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.oobavgerrorGet">
            <summary>Задает оболочка совместимости dfreport.get_oobavgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.oobavgerrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_oobavgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.oobavgrelerrorGet">
            <summary>Задает оболочка совместимости dfreport.get_oobavgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.oobavgrelerrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_oobavgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.oobrelclserrorGet">
            <summary>Задает оболочка совместимости dfreport.get_oobrelclserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.oobrelclserrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_oobrelclserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.oobrmserrorGet">
            <summary>Задает оболочка совместимости dfreport.get_oobrmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.oobrmserrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_oobrmserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.relclserrorGet">
            <summary>Задает оболочка совместимости dfreport.get_relclserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.relclserrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_relclserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.rmserrorGet">
            <summary>Задает оболочка совместимости dfreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimdfreport.AllInstances.rmserrorSetDouble">
            <summary>Задает оболочка совместимости dfreport.set_rmserror(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimelliptic">
            <summary>Тип оболочки совместимости для alglib+elliptic</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimelliptic.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimelliptic.#ctor(alglib.elliptic)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimelliptic.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimelliptic.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimelliptic.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimelliptic.Constructor">
            <summary>Задает оболочка совместимости elliptic.elliptic()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimelliptic.ellipticintegraleDouble">
            <summary>Задает оболочка совместимости elliptic.ellipticintegrale(Double m)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimelliptic.ellipticintegralkDouble">
            <summary>Задает оболочка совместимости elliptic.ellipticintegralk(Double m)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimelliptic.ellipticintegralkhighprecisionDouble">
            <summary>Задает оболочка совместимости elliptic.ellipticintegralkhighprecision(Double m1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimelliptic.incompleteellipticintegraleDoubleDouble">
            <summary>Задает оболочка совместимости elliptic.incompleteellipticintegrale(Double phi, Double m)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimelliptic.incompleteellipticintegralkDoubleDouble">
            <summary>Задает оболочка совместимости elliptic.incompleteellipticintegralk(Double phi, Double m)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimelliptic.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimevd">
            <summary>Тип оболочки совместимости для alglib+evd</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimevd.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimevd.#ctor(alglib.evd)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimevd.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimevd.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.Constructor">
            <summary>Задает оболочка совместимости evd.evd()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.hmatrixevdalglibcomplexMdArray2Int32Int32BooleanDoubleArrayRefalglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости evd.hmatrixevd(complex[,] a, Int32 n, Int32 zneeded, Boolean isupper, Double[]&amp; d, complex[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.hmatrixevdialglibcomplexMdArray2Int32Int32BooleanInt32Int32DoubleArrayRefalglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости evd.hmatrixevdi(complex[,] a, Int32 n, Int32 zneeded, Boolean isupper, Int32 i1, Int32 i2, Double[]&amp; w, complex[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.hmatrixevdralglibcomplexMdArray2Int32Int32BooleanDoubleDoubleInt32RefDoubleArrayRefalglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости evd.hmatrixevdr(complex[,] a, Int32 n, Int32 zneeded, Boolean isupper, Double b1, Double b2, Int32&amp; m, Double[]&amp; w, complex[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.internalbisectioneigenvaluesDoubleArrayDoubleArrayInt32Int32Int32DoubleDoubleInt32Int32DoubleDoubleArrayRefInt32RefInt32RefInt32ArrayRefInt32ArrayRefInt32Ref">
            <summary>Задает оболочка совместимости evd.internalbisectioneigenvalues(Double[] d, Double[] e, Int32 n, Int32 irange, Int32 iorder, Double vl, Double vu, Int32 il, Int32 iu, Double abstol, Double[]&amp; w, Int32&amp; m, Int32&amp; nsplit, Int32[]&amp; iblock, Int32[]&amp; isplit, Int32&amp; errorcode)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.internaldlaebzInt32Int32Int32Int32Int32DoubleDoubleDoubleDoubleArrayDoubleArrayDoubleArrayInt32ArrayRefDoubleMdArray2RefDoubleArrayRefInt32RefInt32MdArray2RefDoubleArrayRefInt32ArrayRefInt32Ref">
            <summary>Задает оболочка совместимости evd.internaldlaebz(Int32 ijob, Int32 nitmax, Int32 n, Int32 mmax, Int32 minp, Double abstol, Double reltol, Double pivmin, Double[] d, Double[] e, Double[] e2, Int32[]&amp; nval, Double[,]&amp; ab, Double[]&amp; c, Int32&amp; mout, Int32[,]&amp; nab, Double[]&amp; work, Int32[]&amp; iwork, Int32&amp; info)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.internaldsteinInt32DoubleArrayDoubleArrayInt32DoubleArrayInt32ArrayInt32ArrayDoubleMdArray2RefInt32ArrayRefInt32Ref">
            <summary>Задает оболочка совместимости evd.internaldstein(Int32 n, Double[] d, Double[] e, Int32 m, Double[] w, Int32[] iblock, Int32[] isplit, Double[,]&amp; z, Int32[]&amp; ifail, Int32&amp; info)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.internalhsevdladivDoubleDoubleDoubleDoubleDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости evd.internalhsevdladiv(Double a, Double b, Double c, Double d, Double&amp; p, Double&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.internalhsevdlaln2BooleanInt32Int32DoubleDoubleDoubleMdArray2DoubleDoubleDoubleMdArray2DoubleDoubleBooleanArrayRefBooleanArrayRefInt32MdArray2RefDoubleArrayRefDoubleArrayRefDoubleMdArray2RefDoubleRefDoubleRefInt32Ref">
            <summary>Задает оболочка совместимости evd.internalhsevdlaln2(Boolean ltrans, Int32 na, Int32 nw, Double smin, Double ca, Double[,] a, Double d1, Double d2, Double[,] b, Double wr, Double wi, Boolean[]&amp; rswap4, Boolean[]&amp; zswap4, Int32[,]&amp; ipivot44, Double[]&amp; civ4, Double[]&amp; crv4, Double[,]&amp; x, Double&amp; scl, Double&amp; xnorm, Int32&amp; info)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.internaltrevcDoubleMdArray2Int32Int32Int32BooleanArrayDoubleMdArray2RefDoubleMdArray2RefInt32RefInt32Ref">
            <summary>Задает оболочка совместимости evd.internaltrevc(Double[,] t, Int32 n, Int32 side, Int32 howmny, Boolean[] vselect, Double[,]&amp; vl, Double[,]&amp; vr, Int32&amp; m, Int32&amp; info)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.rmatrixevdDoubleMdArray2Int32Int32DoubleArrayRefDoubleArrayRefDoubleMdArray2RefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости evd.rmatrixevd(Double[,] a, Int32 n, Int32 vneeded, Double[]&amp; wr, Double[]&amp; wi, Double[,]&amp; vl, Double[,]&amp; vr)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.rmatrixinternaltrevcDoubleMdArray2Int32Int32Int32BooleanArrayDoubleMdArray2RefDoubleMdArray2RefInt32RefInt32Ref">
            <summary>Задает оболочка совместимости evd.rmatrixinternaltrevc(Double[,] t, Int32 n, Int32 side, Int32 howmny, Boolean[] vselect, Double[,]&amp; vl, Double[,]&amp; vr, Int32&amp; m, Int32&amp; info)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.smatrixevdDoubleMdArray2Int32Int32BooleanDoubleArrayRefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости evd.smatrixevd(Double[,] a, Int32 n, Int32 zneeded, Boolean isupper, Double[]&amp; d, Double[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.smatrixevdiDoubleMdArray2Int32Int32BooleanInt32Int32DoubleArrayRefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости evd.smatrixevdi(Double[,] a, Int32 n, Int32 zneeded, Boolean isupper, Int32 i1, Int32 i2, Double[]&amp; w, Double[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.smatrixevdrDoubleMdArray2Int32Int32BooleanDoubleDoubleInt32RefDoubleArrayRefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости evd.smatrixevdr(Double[,] a, Int32 n, Int32 zneeded, Boolean isupper, Double b1, Double b2, Int32&amp; m, Double[]&amp; w, Double[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.smatrixtdevdDoubleArrayRefDoubleArrayInt32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости evd.smatrixtdevd(Double[]&amp; d, Double[] e, Int32 n, Int32 zneeded, Double[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.smatrixtdevdiDoubleArrayRefDoubleArrayInt32Int32Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости evd.smatrixtdevdi(Double[]&amp; d, Double[] e, Int32 n, Int32 zneeded, Int32 i1, Int32 i2, Double[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.smatrixtdevdrDoubleArrayRefDoubleArrayInt32Int32DoubleDoubleInt32RefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости evd.smatrixtdevdr(Double[]&amp; d, Double[] e, Int32 n, Int32 zneeded, Double a, Double b, Int32&amp; m, Double[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.tdevde2DoubleDoubleDoubleDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости evd.tdevde2(Double a, Double b, Double c, Double&amp; rt1, Double&amp; rt2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.tdevdev2DoubleDoubleDoubleDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости evd.tdevdev2(Double a, Double b, Double c, Double&amp; rt1, Double&amp; rt2, Double&amp; cs1, Double&amp; sn1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.tdevdextsignDoubleDouble">
            <summary>Задает оболочка совместимости evd.tdevdextsign(Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.tdevdpythagDoubleDouble">
            <summary>Задает оболочка совместимости evd.tdevdpythag(Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.tdininternaldlagtfInt32DoubleArrayRefDoubleDoubleArrayRefDoubleArrayRefDoubleDoubleArrayRefInt32ArrayRefInt32Ref">
            <summary>Задает оболочка совместимости evd.tdininternaldlagtf(Int32 n, Double[]&amp; a, Double lambdav, Double[]&amp; b, Double[]&amp; c, Double tol, Double[]&amp; d, Int32[]&amp; iin, Int32&amp; info)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.tdininternaldlagtsInt32DoubleArrayDoubleArrayDoubleArrayDoubleArrayInt32ArrayDoubleArrayRefDoubleRefInt32Ref">
            <summary>Задает оболочка совместимости evd.tdininternaldlagts(Int32 n, Double[] a, Double[] b, Double[] c, Double[] d, Int32[] iin, Double[]&amp; y, Double&amp; tol, Int32&amp; info)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimevd.tridiagonalevdDoubleArrayRefDoubleArrayInt32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости evd.tridiagonalevd(Double[]&amp; d, Double[] e, Int32 n, Int32 zneeded, Double[,]&amp; z)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimevd.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimexpintegrals">
            <summary>Тип оболочки совместимости для alglib+expintegrals</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimexpintegrals.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimexpintegrals.#ctor(alglib.expintegrals)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimexpintegrals.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimexpintegrals.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimexpintegrals.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimexpintegrals.Constructor">
            <summary>Задает оболочка совместимости expintegrals.expintegrals()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimexpintegrals.exponentialintegraleiDouble">
            <summary>Задает оболочка совместимости expintegrals.exponentialintegralei(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimexpintegrals.exponentialintegralenDoubleInt32">
            <summary>Задает оболочка совместимости expintegrals.exponentialintegralen(Double x, Int32 n)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimexpintegrals.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimfbls">
            <summary>Тип оболочки совместимости для alglib+fbls</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfbls.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfbls.#ctor(alglib.fbls)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfbls.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfbls.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfbls.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfbls.Constructor">
            <summary>Задает оболочка совместимости fbls.fbls()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfbls.fblscgcreateDoubleArrayDoubleArrayInt32fblsalglibfblslincgstate">
            <summary>Задает оболочка совместимости fbls.fblscgcreate(Double[] x, Double[] b, Int32 n, fblslincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfbls.fblscgiterationfblsalglibfblslincgstate">
            <summary>Задает оболочка совместимости fbls.fblscgiteration(fblslincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfbls.fblscholeskysolveDoubleMdArray2DoubleInt32BooleanDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости fbls.fblscholeskysolve(Double[,] cha, Double sqrtscalea, Int32 n, Boolean isupper, Double[] xb, Double[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfbls.fblssolvecgxDoubleMdArray2Int32Int32DoubleDoubleArrayDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости fbls.fblssolvecgx(Double[,] a, Int32 m, Int32 n, Double alpha, Double[] b, Double[]&amp; x, Double[]&amp; buf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfbls.fblssolvelsDoubleMdArray2RefDoubleArrayRefInt32Int32DoubleArrayRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости fbls.fblssolvels(Double[,]&amp; a, Double[]&amp; b, Int32 m, Int32 n, Double[]&amp; tmp0, Double[]&amp; tmp1, Double[]&amp; tmp2)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimfbls.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimfbls.Shimfblslincgstate">
            <summary>Тип оболочки совместимости для alglib+fbls+fblslincgstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfbls.Shimfblslincgstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfbls.Shimfblslincgstate.#ctor(alglib.fbls.fblslincgstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfbls.Shimfblslincgstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfbls.Shimfblslincgstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfbls.Shimfblslincgstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfbls.Shimfblslincgstate.Constructor">
            <summary>Задает оболочка совместимости fblslincgstate.fblslincgstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfbls.Shimfblslincgstate.init">
            <summary>Задает оболочка совместимости fblslincgstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfbls.Shimfblslincgstate.make_copy">
            <summary>Задает оболочка совместимости fblslincgstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimfbls.Shimfblslincgstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfbls.Shimfblslincgstate.AllInstances.init">
            <summary>Задает оболочка совместимости fblslincgstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfbls.Shimfblslincgstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости fblslincgstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimfdistr">
            <summary>Тип оболочки совместимости для alglib+fdistr</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfdistr.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfdistr.#ctor(alglib.fdistr)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfdistr.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfdistr.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfdistr.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfdistr.Constructor">
            <summary>Задает оболочка совместимости fdistr.fdistr()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfdistr.fcdistributionInt32Int32Double">
            <summary>Задает оболочка совместимости fdistr.fcdistribution(Int32 a, Int32 b, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfdistr.fdistributionInt32Int32Double">
            <summary>Задает оболочка совместимости fdistr.fdistribution(Int32 a, Int32 b, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfdistr.invfdistributionInt32Int32Double">
            <summary>Задает оболочка совместимости fdistr.invfdistribution(Int32 a, Int32 b, Double y)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimfdistr.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimfft">
            <summary>Тип оболочки совместимости для alglib+fft</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfft.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfft.#ctor(alglib.fft)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfft.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfft.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfft.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfft.Constructor">
            <summary>Задает оболочка совместимости fft.fft()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfft.fftc1dalglibcomplexArrayRefInt32">
            <summary>Задает оболочка совместимости fft.fftc1d(complex[]&amp; a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfft.fftc1dinvalglibcomplexArrayRefInt32">
            <summary>Задает оболочка совместимости fft.fftc1dinv(complex[]&amp; a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfft.fftr1dDoubleArrayInt32alglibcomplexArrayRef">
            <summary>Задает оболочка совместимости fft.fftr1d(Double[] a, Int32 n, complex[]&amp; f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfft.fftr1dinternalevenDoubleArrayRefInt32DoubleArrayRefftbasealglibfasttransformplan">
            <summary>Задает оболочка совместимости fft.fftr1dinternaleven(Double[]&amp; a, Int32 n, Double[]&amp; buf, fasttransformplan plan)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfft.fftr1dinvalglibcomplexArrayInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости fft.fftr1dinv(complex[] f, Int32 n, Double[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfft.fftr1dinvinternalevenDoubleArrayRefInt32DoubleArrayRefftbasealglibfasttransformplan">
            <summary>Задает оболочка совместимости fft.fftr1dinvinternaleven(Double[]&amp; a, Int32 n, Double[]&amp; buf, fasttransformplan plan)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimfft.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimfht">
            <summary>Тип оболочки совместимости для alglib+fht</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfht.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfht.#ctor(alglib.fht)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfht.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfht.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfht.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfht.Constructor">
            <summary>Задает оболочка совместимости fht.fht()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfht.fhtr1dDoubleArrayRefInt32">
            <summary>Задает оболочка совместимости fht.fhtr1d(Double[]&amp; a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfht.fhtr1dinvDoubleArrayRefInt32">
            <summary>Задает оболочка совместимости fht.fhtr1dinv(Double[]&amp; a, Int32 n)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimfht.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimfilters">
            <summary>Тип оболочки совместимости для alglib+filters</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfilters.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfilters.#ctor(alglib.filters)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfilters.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfilters.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfilters.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfilters.Constructor">
            <summary>Задает оболочка совместимости filters.filters()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfilters.filteremaDoubleArrayRefInt32Double">
            <summary>Задает оболочка совместимости filters.filterema(Double[]&amp; x, Int32 n, Double alpha)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfilters.filterlrmaDoubleArrayRefInt32Int32">
            <summary>Задает оболочка совместимости filters.filterlrma(Double[]&amp; x, Int32 n, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfilters.filtersmaDoubleArrayRefInt32Int32">
            <summary>Задает оболочка совместимости filters.filtersma(Double[]&amp; x, Int32 n, Int32 k)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimfilters.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimfresnel">
            <summary>Тип оболочки совместимости для alglib+fresnel</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfresnel.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfresnel.#ctor(alglib.fresnel)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfresnel.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimfresnel.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfresnel.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfresnel.Constructor">
            <summary>Задает оболочка совместимости fresnel.fresnel()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimfresnel.fresnelintegralDoubleDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости fresnel.fresnelintegral(Double x, Double&amp; c, Double&amp; s)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimfresnel.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimftbase">
            <summary>Тип оболочки совместимости для alglib+ftbase</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimftbase.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimftbase.#ctor(alglib.ftbase)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimftbase.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimftbase.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.Constructor">
            <summary>Задает оболочка совместимости ftbase.ftbase()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ffticltrecDoubleArrayInt32Int32DoubleArrayInt32Int32Int32Int32">
            <summary>Задает оболочка совместимости ftbase.ffticltrec(Double[] a, Int32 astart, Int32 astride, Double[] b, Int32 bstart, Int32 bstride, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.fftirltrecDoubleArrayRefInt32Int32DoubleArrayRefInt32Int32Int32Int32">
            <summary>Задает оболочка совместимости ftbase.fftirltrec(Double[]&amp; a, Int32 astart, Int32 astride, Double[]&amp; b, Int32 bstart, Int32 bstride, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ffttwcalcDoubleArrayInt32Int32Int32">
            <summary>Задает оболочка совместимости ftbase.ffttwcalc(Double[] a, Int32 aoffset, Int32 n1, Int32 n2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftapplycomplexcodeletfftDoubleArrayInt32Int32Int32Int32">
            <summary>Задает оболочка совместимости ftbase.ftapplycomplexcodeletfft(Double[] a, Int32 offs, Int32 operandscnt, Int32 operandsize, Int32 microvectorsize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftapplycomplexcodelettwfftDoubleArrayInt32Int32Int32Int32">
            <summary>Задает оболочка совместимости ftbase.ftapplycomplexcodelettwfft(Double[] a, Int32 offs, Int32 operandscnt, Int32 operandsize, Int32 microvectorsize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftapplycomplexreffftDoubleArrayInt32Int32Int32Int32DoubleArray">
            <summary>Задает оболочка совместимости ftbase.ftapplycomplexreffft(Double[] a, Int32 offs, Int32 operandscnt, Int32 operandsize, Int32 microvectorsize, Double[] buf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftapplyplanftbasealglibfasttransformplanDoubleArrayInt32Int32">
            <summary>Задает оболочка совместимости ftbase.ftapplyplan(fasttransformplan plan, Double[] a, Int32 offsa, Int32 repcnt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftapplysubplanftbasealglibfasttransformplanInt32DoubleArrayInt32Int32DoubleArrayInt32">
            <summary>Задает оболочка совместимости ftbase.ftapplysubplan(fasttransformplan plan, Int32 subplan, Double[] a, Int32 abase, Int32 aoffset, Double[] buf, Int32 repcnt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftbasefactorizeInt32Int32Int32RefInt32Ref">
            <summary>Задает оболочка совместимости ftbase.ftbasefactorize(Int32 n, Int32 tasktype, Int32&amp; n1, Int32&amp; n2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftbasefindsmoothInt32">
            <summary>Задает оболочка совместимости ftbase.ftbasefindsmooth(Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftbasefindsmoothevenInt32">
            <summary>Задает оболочка совместимости ftbase.ftbasefindsmootheven(Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftbasefindsmoothrecInt32Int32Int32Int32Ref">
            <summary>Задает оболочка совместимости ftbase.ftbasefindsmoothrec(Int32 n, Int32 seed, Int32 leastfactor, Int32&amp; best)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftbasegetflopestimateInt32">
            <summary>Задает оболочка совместимости ftbase.ftbasegetflopestimate(Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftbaseissmoothInt32">
            <summary>Задает оболочка совместимости ftbase.ftbaseissmooth(Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftbluesteinsfftftbasealglibfasttransformplanDoubleArrayInt32Int32Int32Int32Int32Int32Int32DoubleArrayDoubleArrayDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости ftbase.ftbluesteinsfft(fasttransformplan plan, Double[] a, Int32 abase, Int32 aoffset, Int32 operandscnt, Int32 n, Int32 m, Int32 precoffs, Int32 subplan, Double[] bufa, Double[] bufb, Double[] bufc, Double[] bufd)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftcomplexfftplanInt32Int32ftbasealglibfasttransformplan">
            <summary>Задает оболочка совместимости ftbase.ftcomplexfftplan(Int32 n, Int32 k, fasttransformplan plan)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftcomplexfftplanrecInt32Int32BooleanBooleanInt32RefInt32RefInt32RefInt32Refftbasealglibfasttransformplan">
            <summary>Задает оболочка совместимости ftbase.ftcomplexfftplanrec(Int32 n, Int32 k, Boolean childplan, Boolean topmostplan, Int32&amp; rowptr, Int32&amp; bluesteinsize, Int32&amp; precrptr, Int32&amp; preciptr, fasttransformplan plan)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftdeterminespacerequirementsInt32Int32RefInt32Ref">
            <summary>Задает оболочка совместимости ftbase.ftdeterminespacerequirements(Int32 n, Int32&amp; precrsize, Int32&amp; precisize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftfactorizeInt32BooleanInt32RefInt32Ref">
            <summary>Задает оболочка совместимости ftbase.ftfactorize(Int32 n, Boolean isroot, Int32&amp; n1, Int32&amp; n2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftoptimisticestimateInt32">
            <summary>Задает оболочка совместимости ftbase.ftoptimisticestimate(Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftprecomputebluesteinsfftInt32Int32DoubleArrayInt32">
            <summary>Задает оболочка совместимости ftbase.ftprecomputebluesteinsfft(Int32 n, Int32 m, Double[] precr, Int32 offs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftprecomputeradersfftInt32Int32Int32DoubleArrayInt32">
            <summary>Задает оболочка совместимости ftbase.ftprecomputeradersfft(Int32 n, Int32 rq, Int32 riq, Double[] precr, Int32 offs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftpushentry2ftbasealglibfasttransformplanInt32RefInt32Int32Int32Int32Int32Int32">
            <summary>Задает оболочка совместимости ftbase.ftpushentry2(fasttransformplan plan, Int32&amp; rowptr, Int32 etype, Int32 eopcnt, Int32 eopsize, Int32 emcvsize, Int32 eparam0, Int32 eparam1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftpushentry4ftbasealglibfasttransformplanInt32RefInt32Int32Int32Int32Int32Int32Int32Int32">
            <summary>Задает оболочка совместимости ftbase.ftpushentry4(fasttransformplan plan, Int32&amp; rowptr, Int32 etype, Int32 eopcnt, Int32 eopsize, Int32 emcvsize, Int32 eparam0, Int32 eparam1, Int32 eparam2, Int32 eparam3)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftpushentryftbasealglibfasttransformplanInt32RefInt32Int32Int32Int32Int32">
            <summary>Задает оболочка совместимости ftbase.ftpushentry(fasttransformplan plan, Int32&amp; rowptr, Int32 etype, Int32 eopcnt, Int32 eopsize, Int32 emcvsize, Int32 eparam0)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.ftradersfftftbasealglibfasttransformplanDoubleArrayInt32Int32Int32Int32Int32Int32Int32Int32DoubleArray">
            <summary>Задает оболочка совместимости ftbase.ftradersfft(fasttransformplan plan, Double[] a, Int32 abase, Int32 aoffset, Int32 operandscnt, Int32 n, Int32 subplan, Int32 rq, Int32 riq, Int32 precoffs, Double[] buf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.internalcomplexlintransposeDoubleArrayInt32Int32Int32DoubleArray">
            <summary>Задает оболочка совместимости ftbase.internalcomplexlintranspose(Double[] a, Int32 m, Int32 n, Int32 astart, Double[] buf)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimftbase.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimftbase.Shimfasttransformplan">
            <summary>Тип оболочки совместимости для alglib+ftbase+fasttransformplan</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimftbase.Shimfasttransformplan.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimftbase.Shimfasttransformplan.#ctor(alglib.ftbase.fasttransformplan)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimftbase.Shimfasttransformplan.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimftbase.Shimfasttransformplan.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.Shimfasttransformplan.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.Shimfasttransformplan.Constructor">
            <summary>Задает оболочка совместимости fasttransformplan.fasttransformplan()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.Shimfasttransformplan.init">
            <summary>Задает оболочка совместимости fasttransformplan.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.Shimfasttransformplan.make_copy">
            <summary>Задает оболочка совместимости fasttransformplan.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimftbase.Shimfasttransformplan.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.Shimfasttransformplan.AllInstances.init">
            <summary>Задает оболочка совместимости fasttransformplan.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimftbase.Shimfasttransformplan.AllInstances.make_copy">
            <summary>Задает оболочка совместимости fasttransformplan.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimgammafunc">
            <summary>Тип оболочки совместимости для alglib+gammafunc</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimgammafunc.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimgammafunc.#ctor(alglib.gammafunc)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimgammafunc.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimgammafunc.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgammafunc.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgammafunc.Constructor">
            <summary>Задает оболочка совместимости gammafunc.gammafunc()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgammafunc.gammafunctionDouble">
            <summary>Задает оболочка совместимости gammafunc.gammafunction(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgammafunc.gammastirfDouble">
            <summary>Задает оболочка совместимости gammafunc.gammastirf(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgammafunc.lngammaDoubleDoubleRef">
            <summary>Задает оболочка совместимости gammafunc.lngamma(Double x, Double&amp; sgngam)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimgammafunc.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimgkq">
            <summary>Тип оболочки совместимости для alglib+gkq</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimgkq.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimgkq.#ctor(alglib.gkq)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimgkq.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimgkq.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgkq.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgkq.Constructor">
            <summary>Задает оболочка совместимости gkq.gkq()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgkq.gkqgenerategaussjacobiInt32DoubleDoubleInt32RefDoubleArrayRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости gkq.gkqgenerategaussjacobi(Int32 n, Double alpha, Double beta, Int32&amp; info, Double[]&amp; x, Double[]&amp; wkronrod, Double[]&amp; wgauss)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgkq.gkqgenerategausslegendreInt32Int32RefDoubleArrayRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости gkq.gkqgenerategausslegendre(Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; wkronrod, Double[]&amp; wgauss)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgkq.gkqgeneraterecDoubleArrayDoubleArrayDoubleInt32Int32RefDoubleArrayRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости gkq.gkqgeneraterec(Double[] alpha, Double[] beta, Double mu0, Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; wkronrod, Double[]&amp; wgauss)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgkq.gkqlegendrecalcInt32Int32RefDoubleArrayRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости gkq.gkqlegendrecalc(Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; wkronrod, Double[]&amp; wgauss)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgkq.gkqlegendretblInt32DoubleArrayRefDoubleArrayRefDoubleArrayRefDoubleRef">
            <summary>Задает оболочка совместимости gkq.gkqlegendretbl(Int32 n, Double[]&amp; x, Double[]&amp; wkronrod, Double[]&amp; wgauss, Double&amp; eps)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimgkq.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimgq">
            <summary>Тип оболочки совместимости для alglib+gq</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimgq.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimgq.#ctor(alglib.gq)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimgq.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimgq.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgq.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgq.Constructor">
            <summary>Задает оболочка совместимости gq.gq()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgq.gqgenerategausshermiteInt32Int32RefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости gq.gqgenerategausshermite(Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgq.gqgenerategaussjacobiInt32DoubleDoubleInt32RefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости gq.gqgenerategaussjacobi(Int32 n, Double alpha, Double beta, Int32&amp; info, Double[]&amp; x, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgq.gqgenerategausslaguerreInt32DoubleInt32RefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости gq.gqgenerategausslaguerre(Int32 n, Double alpha, Int32&amp; info, Double[]&amp; x, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgq.gqgenerategausslegendreInt32Int32RefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости gq.gqgenerategausslegendre(Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgq.gqgenerategausslobattorecDoubleArrayDoubleArrayDoubleDoubleDoubleInt32Int32RefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости gq.gqgenerategausslobattorec(Double[] alpha, Double[] beta, Double mu0, Double a, Double b, Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgq.gqgenerategaussradaurecDoubleArrayDoubleArrayDoubleDoubleInt32Int32RefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости gq.gqgenerategaussradaurec(Double[] alpha, Double[] beta, Double mu0, Double a, Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimgq.gqgeneraterecDoubleArrayDoubleArrayDoubleInt32Int32RefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости gq.gqgeneraterec(Double[] alpha, Double[] beta, Double mu0, Int32 n, Int32&amp; info, Double[]&amp; x, Double[]&amp; w)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimgq.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhblas">
            <summary>Тип оболочки совместимости для alglib+hblas</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhblas.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhblas.#ctor(alglib.hblas)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhblas.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhblas.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhblas.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhblas.Constructor">
            <summary>Задает оболочка совместимости hblas.hblas()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhblas.hermitianmatrixvectormultiplyalglibcomplexMdArray2BooleanInt32Int32alglibcomplexArrayalglibcomplexalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости hblas.hermitianmatrixvectormultiply(complex[,] a, Boolean isupper, Int32 i1, Int32 i2, complex[] x, complex alpha, complex[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhblas.hermitianrank2updatealglibcomplexMdArray2RefBooleanInt32Int32alglibcomplexArrayalglibcomplexArrayalglibcomplexArrayRefalglibcomplex">
            <summary>Задает оболочка совместимости hblas.hermitianrank2update(complex[,]&amp; a, Boolean isupper, Int32 i1, Int32 i2, complex[] x, complex[] y, complex[]&amp; t, complex alpha)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhblas.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhermite">
            <summary>Тип оболочки совместимости для alglib+hermite</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhermite.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhermite.#ctor(alglib.hermite)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhermite.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhermite.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhermite.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhermite.Constructor">
            <summary>Задает оболочка совместимости hermite.hermite()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhermite.hermitecalculateInt32Double">
            <summary>Задает оболочка совместимости hermite.hermitecalculate(Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhermite.hermitecoefficientsInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости hermite.hermitecoefficients(Int32 n, Double[]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhermite.hermitesumDoubleArrayInt32Double">
            <summary>Задает оболочка совместимости hermite.hermitesum(Double[] c, Int32 n, Double x)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhermite.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhpccores">
            <summary>Тип оболочки совместимости для alglib+hpccores</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhpccores.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhpccores.#ctor(alglib.hpccores)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhpccores.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhpccores.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhpccores.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhpccores.Constructor">
            <summary>Задает оболочка совместимости hpccores.hpccores()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhpccores.hpcchunkedgradientDoubleArrayInt32ArrayDoubleArrayDoubleArrayDoubleMdArray2Int32Int32DoubleArrayDoubleArrayDoubleRefBoolean">
            <summary>Задает оболочка совместимости hpccores.hpcchunkedgradient(Double[] weights, Int32[] structinfo, Double[] columnmeans, Double[] columnsigmas, Double[,] xy, Int32 cstart, Int32 csize, Double[] batch4buf, Double[] hpcbuf, Double&amp; e, Boolean naturalerrorfunc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhpccores.hpcchunkedprocessDoubleArrayInt32ArrayDoubleArrayDoubleArrayDoubleMdArray2Int32Int32DoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости hpccores.hpcchunkedprocess(Double[] weights, Int32[] structinfo, Double[] columnmeans, Double[] columnsigmas, Double[,] xy, Int32 cstart, Int32 csize, Double[] batch4buf, Double[] hpcbuf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhpccores.hpcfinalizechunkedgradienthpccoresalglibmlpbuffersDoubleArray">
            <summary>Задает оболочка совместимости hpccores.hpcfinalizechunkedgradient(mlpbuffers buf, Double[] grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhpccores.hpcfinalizechunkedgradientxDoubleArrayInt32DoubleArray">
            <summary>Задает оболочка совместимости hpccores.hpcfinalizechunkedgradientx(Double[] buf, Int32 wcount, Double[] grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhpccores.hpcpreparechunkedgradientDoubleArrayInt32Int32Int32Int32hpccoresalglibmlpbuffers">
            <summary>Задает оболочка совместимости hpccores.hpcpreparechunkedgradient(Double[] weights, Int32 wcount, Int32 ntotal, Int32 nin, Int32 nout, mlpbuffers buf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhpccores.hpcpreparechunkedgradientxDoubleArrayInt32DoubleArray">
            <summary>Задает оболочка совместимости hpccores.hpcpreparechunkedgradientx(Double[] weights, Int32 wcount, Double[] hpcbuf)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhpccores.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhpccores.Shimmlpbuffers">
            <summary>Тип оболочки совместимости для alglib+hpccores+mlpbuffers</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhpccores.Shimmlpbuffers.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhpccores.Shimmlpbuffers.#ctor(alglib.hpccores.mlpbuffers)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhpccores.Shimmlpbuffers.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhpccores.Shimmlpbuffers.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhpccores.Shimmlpbuffers.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhpccores.Shimmlpbuffers.Constructor">
            <summary>Задает оболочка совместимости mlpbuffers.mlpbuffers()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhpccores.Shimmlpbuffers.init">
            <summary>Задает оболочка совместимости mlpbuffers.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhpccores.Shimmlpbuffers.make_copy">
            <summary>Задает оболочка совместимости mlpbuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhpccores.Shimmlpbuffers.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhpccores.Shimmlpbuffers.AllInstances.init">
            <summary>Задает оболочка совместимости mlpbuffers.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhpccores.Shimmlpbuffers.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mlpbuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhqrnd">
            <summary>Тип оболочки совместимости для alglib+hqrnd</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhqrnd.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhqrnd.#ctor(alglib.hqrnd)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhqrnd.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhqrnd.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.Constructor">
            <summary>Задает оболочка совместимости hqrnd.hqrnd()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.hqrndcontinuoushqrndalglibhqrndstateDoubleArrayInt32">
            <summary>Задает оболочка совместимости hqrnd.hqrndcontinuous(hqrndstate state, Double[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.hqrnddiscretehqrndalglibhqrndstateDoubleArrayInt32">
            <summary>Задает оболочка совместимости hqrnd.hqrnddiscrete(hqrndstate state, Double[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.hqrndexponentialhqrndalglibhqrndstateDouble">
            <summary>Задает оболочка совместимости hqrnd.hqrndexponential(hqrndstate state, Double lambdav)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.hqrndintegerbasehqrndalglibhqrndstate">
            <summary>Задает оболочка совместимости hqrnd.hqrndintegerbase(hqrndstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.hqrndnormal2hqrndalglibhqrndstateDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости hqrnd.hqrndnormal2(hqrndstate state, Double&amp; x1, Double&amp; x2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.hqrndnormalhqrndalglibhqrndstate">
            <summary>Задает оболочка совместимости hqrnd.hqrndnormal(hqrndstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.hqrndrandomizehqrndalglibhqrndstate">
            <summary>Задает оболочка совместимости hqrnd.hqrndrandomize(hqrndstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.hqrndseedInt32Int32hqrndalglibhqrndstate">
            <summary>Задает оболочка совместимости hqrnd.hqrndseed(Int32 s1, Int32 s2, hqrndstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.hqrnduniformihqrndalglibhqrndstateInt32">
            <summary>Задает оболочка совместимости hqrnd.hqrnduniformi(hqrndstate state, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.hqrnduniformrhqrndalglibhqrndstate">
            <summary>Задает оболочка совместимости hqrnd.hqrnduniformr(hqrndstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.hqrndunit2hqrndalglibhqrndstateDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости hqrnd.hqrndunit2(hqrndstate state, Double&amp; x, Double&amp; y)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhqrnd.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhqrnd.Shimhqrndstate">
            <summary>Тип оболочки совместимости для alglib+hqrnd+hqrndstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhqrnd.Shimhqrndstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhqrnd.Shimhqrndstate.#ctor(alglib.hqrnd.hqrndstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhqrnd.Shimhqrndstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhqrnd.Shimhqrndstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.Shimhqrndstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.Shimhqrndstate.Constructor">
            <summary>Задает оболочка совместимости hqrndstate.hqrndstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.Shimhqrndstate.init">
            <summary>Задает оболочка совместимости hqrndstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.Shimhqrndstate.make_copy">
            <summary>Задает оболочка совместимости hqrndstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhqrnd.Shimhqrndstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.Shimhqrndstate.AllInstances.init">
            <summary>Задает оболочка совместимости hqrndstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrnd.Shimhqrndstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости hqrndstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhqrndstate">
            <summary>Тип оболочки совместимости для alglib+hqrndstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhqrndstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhqrndstate.#ctor(alglib.hqrndstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhqrndstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhqrndstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrndstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrndstate.Constructor">
            <summary>Задает оболочка совместимости hqrndstate.hqrndstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrndstate.Constructorhqrndalglibhqrndstate">
            <summary>Задает оболочка совместимости hqrndstate.hqrndstate(hqrndstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrndstate.innerobjGet">
            <summary>Задает оболочка совместимости hqrndstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrndstate.make_copy">
            <summary>Задает оболочка совместимости hqrndstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhqrndstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrndstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости hqrndstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhqrndstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости hqrndstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhsschur">
            <summary>Тип оболочки совместимости для alglib+hsschur</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhsschur.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhsschur.#ctor(alglib.hsschur)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhsschur.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimhsschur.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhsschur.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhsschur.Constructor">
            <summary>Задает оболочка совместимости hsschur.hsschur()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhsschur.aux2x2schurDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости hsschur.aux2x2schur(Double&amp; a, Double&amp; b, Double&amp; c, Double&amp; d, Double&amp; rt1r, Double&amp; rt1i, Double&amp; rt2r, Double&amp; rt2i, Double&amp; cs, Double&amp; sn)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhsschur.extschursignDoubleDouble">
            <summary>Задает оболочка совместимости hsschur.extschursign(Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhsschur.extschursigntooneDouble">
            <summary>Задает оболочка совместимости hsschur.extschursigntoone(Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhsschur.internalauxschurBooleanBooleanInt32Int32Int32DoubleMdArray2RefDoubleArrayRefDoubleArrayRefInt32Int32DoubleMdArray2RefDoubleArrayRefDoubleArrayRefDoubleArrayRefDoubleArrayRefInt32Ref">
            <summary>Задает оболочка совместимости hsschur.internalauxschur(Boolean wantt, Boolean wantz, Int32 n, Int32 ilo, Int32 ihi, Double[,]&amp; h, Double[]&amp; wr, Double[]&amp; wi, Int32 iloz, Int32 ihiz, Double[,]&amp; z, Double[]&amp; work, Double[]&amp; workv3, Double[]&amp; workc1, Double[]&amp; works1, Int32&amp; info)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhsschur.internalschurdecompositionDoubleMdArray2RefInt32Int32Int32DoubleArrayRefDoubleArrayRefDoubleMdArray2RefInt32Ref">
            <summary>Задает оболочка совместимости hsschur.internalschurdecomposition(Double[,]&amp; h, Int32 n, Int32 tneeded, Int32 zneeded, Double[]&amp; wr, Double[]&amp; wi, Double[,]&amp; z, Int32&amp; info)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhsschur.rmatrixinternalschurdecompositionDoubleMdArray2Int32Int32Int32DoubleArrayRefDoubleArrayRefDoubleMdArray2RefInt32Ref">
            <summary>Задает оболочка совместимости hsschur.rmatrixinternalschurdecomposition(Double[,] h, Int32 n, Int32 tneeded, Int32 zneeded, Double[]&amp; wr, Double[]&amp; wi, Double[,]&amp; z, Int32&amp; info)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimhsschur.upperhessenbergschurdecompositionDoubleMdArray2RefInt32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости hsschur.upperhessenbergschurdecomposition(Double[,]&amp; h, Int32 n, Double[,]&amp; s)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimhsschur.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimibetaf">
            <summary>Тип оболочки совместимости для alglib+ibetaf</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimibetaf.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimibetaf.#ctor(alglib.ibetaf)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimibetaf.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimibetaf.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimibetaf.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimibetaf.Constructor">
            <summary>Задает оболочка совместимости ibetaf.ibetaf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimibetaf.incompletebetaDoubleDoubleDouble">
            <summary>Задает оболочка совместимости ibetaf.incompletebeta(Double a, Double b, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimibetaf.incompletebetafe2DoubleDoubleDoubleDoubleDouble">
            <summary>Задает оболочка совместимости ibetaf.incompletebetafe2(Double a, Double b, Double x, Double big, Double biginv)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimibetaf.incompletebetafeDoubleDoubleDoubleDoubleDouble">
            <summary>Задает оболочка совместимости ibetaf.incompletebetafe(Double a, Double b, Double x, Double big, Double biginv)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimibetaf.incompletebetapsDoubleDoubleDoubleDouble">
            <summary>Задает оболочка совместимости ibetaf.incompletebetaps(Double a, Double b, Double x, Double maxgam)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimibetaf.invincompletebetaDoubleDoubleDouble">
            <summary>Задает оболочка совместимости ibetaf.invincompletebeta(Double a, Double b, Double y)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimibetaf.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimidwint">
            <summary>Тип оболочки совместимости для alglib+idwint</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimidwint.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimidwint.#ctor(alglib.idwint)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimidwint.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimidwint.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwint.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwint.Constructor">
            <summary>Задает оболочка совместимости idwint.idwint()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwint.idwbuildmodifiedshepardDoubleMdArray2Int32Int32Int32Int32Int32idwintalglibidwinterpolant">
            <summary>Задает оболочка совместимости idwint.idwbuildmodifiedshepard(Double[,] xy, Int32 n, Int32 nx, Int32 d, Int32 nq, Int32 nw, idwinterpolant z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwint.idwbuildmodifiedshepardrDoubleMdArray2Int32Int32Doubleidwintalglibidwinterpolant">
            <summary>Задает оболочка совместимости idwint.idwbuildmodifiedshepardr(Double[,] xy, Int32 n, Int32 nx, Double r, idwinterpolant z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwint.idwbuildnoisyDoubleMdArray2Int32Int32Int32Int32Int32idwintalglibidwinterpolant">
            <summary>Задает оболочка совместимости idwint.idwbuildnoisy(Double[,] xy, Int32 n, Int32 nx, Int32 d, Int32 nq, Int32 nw, idwinterpolant z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwint.idwcalcidwintalglibidwinterpolantDoubleArray">
            <summary>Задает оболочка совместимости idwint.idwcalc(idwinterpolant z, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwint.idwcalcqidwintalglibidwinterpolantDoubleArrayInt32">
            <summary>Задает оболочка совместимости idwint.idwcalcq(idwinterpolant z, Double[] x, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwint.idwinit1Int32Int32Int32Int32Int32idwintalglibidwinterpolant">
            <summary>Задает оболочка совместимости idwint.idwinit1(Int32 n, Int32 nx, Int32 d, Int32 nq, Int32 nw, idwinterpolant z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwint.idwinternalsolverDoubleArrayRefDoubleArrayRefDoubleMdArray2RefDoubleArrayRefInt32Int32Int32RefDoubleArrayRefDoubleRef">
            <summary>Задает оболочка совместимости idwint.idwinternalsolver(Double[]&amp; y, Double[]&amp; w, Double[,]&amp; fmatrix, Double[]&amp; temp, Int32 n, Int32 m, Int32&amp; info, Double[]&amp; x, Double&amp; taskrcond)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimidwint.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimidwint.Shimidwinterpolant">
            <summary>Тип оболочки совместимости для alglib+idwint+idwinterpolant</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimidwint.Shimidwinterpolant.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimidwint.Shimidwinterpolant.#ctor(alglib.idwint.idwinterpolant)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimidwint.Shimidwinterpolant.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimidwint.Shimidwinterpolant.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwint.Shimidwinterpolant.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwint.Shimidwinterpolant.Constructor">
            <summary>Задает оболочка совместимости idwinterpolant.idwinterpolant()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwint.Shimidwinterpolant.init">
            <summary>Задает оболочка совместимости idwinterpolant.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwint.Shimidwinterpolant.make_copy">
            <summary>Задает оболочка совместимости idwinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimidwint.Shimidwinterpolant.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwint.Shimidwinterpolant.AllInstances.init">
            <summary>Задает оболочка совместимости idwinterpolant.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwint.Shimidwinterpolant.AllInstances.make_copy">
            <summary>Задает оболочка совместимости idwinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimidwinterpolant">
            <summary>Тип оболочки совместимости для alglib+idwinterpolant</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimidwinterpolant.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimidwinterpolant.#ctor(alglib.idwinterpolant)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimidwinterpolant.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimidwinterpolant.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwinterpolant.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwinterpolant.Constructor">
            <summary>Задает оболочка совместимости idwinterpolant.idwinterpolant()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwinterpolant.Constructoridwintalglibidwinterpolant">
            <summary>Задает оболочка совместимости idwinterpolant.idwinterpolant(idwinterpolant obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwinterpolant.innerobjGet">
            <summary>Задает оболочка совместимости idwinterpolant.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwinterpolant.make_copy">
            <summary>Задает оболочка совместимости idwinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimidwinterpolant.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwinterpolant.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости idwinterpolant.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimidwinterpolant.AllInstances.make_copy">
            <summary>Задает оболочка совместимости idwinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimigammaf">
            <summary>Тип оболочки совместимости для alglib+igammaf</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimigammaf.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimigammaf.#ctor(alglib.igammaf)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimigammaf.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimigammaf.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimigammaf.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimigammaf.Constructor">
            <summary>Задает оболочка совместимости igammaf.igammaf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimigammaf.incompletegammaDoubleDouble">
            <summary>Задает оболочка совместимости igammaf.incompletegamma(Double a, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimigammaf.incompletegammacDoubleDouble">
            <summary>Задает оболочка совместимости igammaf.incompletegammac(Double a, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimigammaf.invincompletegammacDoubleDouble">
            <summary>Задает оболочка совместимости igammaf.invincompletegammac(Double a, Double y0)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimigammaf.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shiminverseupdate">
            <summary>Тип оболочки совместимости для alglib+inverseupdate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shiminverseupdate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shiminverseupdate.#ctor(alglib.inverseupdate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shiminverseupdate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shiminverseupdate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shiminverseupdate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shiminverseupdate.Constructor">
            <summary>Задает оболочка совместимости inverseupdate.inverseupdate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shiminverseupdate.rmatrixinvupdatecolumnDoubleMdArray2RefInt32Int32DoubleArray">
            <summary>Задает оболочка совместимости inverseupdate.rmatrixinvupdatecolumn(Double[,]&amp; inva, Int32 n, Int32 updcolumn, Double[] u)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shiminverseupdate.rmatrixinvupdaterowDoubleMdArray2RefInt32Int32DoubleArray">
            <summary>Задает оболочка совместимости inverseupdate.rmatrixinvupdaterow(Double[,]&amp; inva, Int32 n, Int32 updrow, Double[] v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shiminverseupdate.rmatrixinvupdatesimpleDoubleMdArray2RefInt32Int32Int32Double">
            <summary>Задает оболочка совместимости inverseupdate.rmatrixinvupdatesimple(Double[,]&amp; inva, Int32 n, Int32 updrow, Int32 updcolumn, Double updval)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shiminverseupdate.rmatrixinvupdateuvDoubleMdArray2RefInt32DoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости inverseupdate.rmatrixinvupdateuv(Double[,]&amp; inva, Int32 n, Double[] u, Double[] v)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shiminverseupdate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimjacobianelliptic">
            <summary>Тип оболочки совместимости для alglib+jacobianelliptic</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimjacobianelliptic.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimjacobianelliptic.#ctor(alglib.jacobianelliptic)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimjacobianelliptic.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimjacobianelliptic.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjacobianelliptic.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjacobianelliptic.Constructor">
            <summary>Задает оболочка совместимости jacobianelliptic.jacobianelliptic()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjacobianelliptic.jacobianellipticfunctionsDoubleDoubleDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости jacobianelliptic.jacobianellipticfunctions(Double u, Double m, Double&amp; sn, Double&amp; cn, Double&amp; dn, Double&amp; ph)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimjacobianelliptic.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimjarquebera">
            <summary>Тип оболочки совместимости для alglib+jarquebera</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimjarquebera.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimjarquebera.#ctor(alglib.jarquebera)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimjarquebera.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimjarquebera.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.Constructor">
            <summary>Задает оболочка совместимости jarquebera.jarquebera()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jarqueberaapproxInt32Double">
            <summary>Задает оболочка совместимости jarquebera.jarqueberaapprox(Int32 n, Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jarqueberastatisticDoubleArrayInt32DoubleRef">
            <summary>Задает оболочка совместимости jarquebera.jarqueberastatistic(Double[] x, Int32 n, Double&amp; s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jarqueberatestDoubleArrayInt32DoubleRef">
            <summary>Задает оболочка совместимости jarquebera.jarqueberatest(Double[] x, Int32 n, Double&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbchebDoubleDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости jarquebera.jbcheb(Double x, Double c, Double&amp; tj, Double&amp; tj1, Double&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl100Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl100(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl10Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl10(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl11Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl11(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl12Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl12(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl130Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl130(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl13Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl13(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl1401Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl1401(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl14Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl14(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl15Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl15(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl16Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl16(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl17Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl17(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl18Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl18(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl19Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl19(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl200Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl200(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl20Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl20(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl301Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl301(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl30Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl30(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl501Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl501(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl50Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl50(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl5Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl5(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl65Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl65(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl6Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl6(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl701Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl701(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl7Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl7(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl8Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl8(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimjarquebera.jbtbl9Double">
            <summary>Задает оболочка совместимости jarquebera.jbtbl9(Double s)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimjarquebera.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimkdtree">
            <summary>Тип оболочки совместимости для alglib+kdtree</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimkdtree.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimkdtree.#ctor(alglib.kdtree)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimkdtree.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimkdtree.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkdtree.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkdtree.Constructor">
            <summary>Задает оболочка совместимости kdtree.kdtree()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkdtree.Constructornearestneighboralglibkdtree">
            <summary>Задает оболочка совместимости kdtree.kdtree(kdtree obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkdtree.innerobjGet">
            <summary>Задает оболочка совместимости kdtree.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkdtree.make_copy">
            <summary>Задает оболочка совместимости kdtree.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimkdtree.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkdtree.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости kdtree.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkdtree.AllInstances.make_copy">
            <summary>Задает оболочка совместимости kdtree.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimkmeansreport">
            <summary>Тип оболочки совместимости для alglib+kmeansreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimkmeansreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimkmeansreport.#ctor(alglib.kmeansreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimkmeansreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimkmeansreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.Constructor">
            <summary>Задает оболочка совместимости kmeansreport.kmeansreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.Constructorclusteringalglibkmeansreport">
            <summary>Задает оболочка совместимости kmeansreport.kmeansreport(kmeansreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.cGet">
            <summary>Задает оболочка совместимости kmeansreport.get_c()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.cSetDoubleMdArray2">
            <summary>Задает оболочка совместимости kmeansreport.set_c(Double[,] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.cidxGet">
            <summary>Задает оболочка совместимости kmeansreport.get_cidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.cidxSetInt32Array">
            <summary>Задает оболочка совместимости kmeansreport.set_cidx(Int32[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.innerobjGet">
            <summary>Задает оболочка совместимости kmeansreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.kGet">
            <summary>Задает оболочка совместимости kmeansreport.get_k()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.kSetInt32">
            <summary>Задает оболочка совместимости kmeansreport.set_k(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.make_copy">
            <summary>Задает оболочка совместимости kmeansreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.nfeaturesGet">
            <summary>Задает оболочка совместимости kmeansreport.get_nfeatures()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.nfeaturesSetInt32">
            <summary>Задает оболочка совместимости kmeansreport.set_nfeatures(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.npointsGet">
            <summary>Задает оболочка совместимости kmeansreport.get_npoints()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.npointsSetInt32">
            <summary>Задает оболочка совместимости kmeansreport.set_npoints(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.terminationtypeGet">
            <summary>Задает оболочка совместимости kmeansreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости kmeansreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimkmeansreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.AllInstances.cGet">
            <summary>Задает оболочка совместимости kmeansreport.get_c()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.AllInstances.cSetDoubleMdArray2">
            <summary>Задает оболочка совместимости kmeansreport.set_c(Double[,] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.AllInstances.cidxGet">
            <summary>Задает оболочка совместимости kmeansreport.get_cidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.AllInstances.cidxSetInt32Array">
            <summary>Задает оболочка совместимости kmeansreport.set_cidx(Int32[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости kmeansreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.AllInstances.kGet">
            <summary>Задает оболочка совместимости kmeansreport.get_k()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.AllInstances.kSetInt32">
            <summary>Задает оболочка совместимости kmeansreport.set_k(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости kmeansreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.AllInstances.nfeaturesGet">
            <summary>Задает оболочка совместимости kmeansreport.get_nfeatures()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.AllInstances.nfeaturesSetInt32">
            <summary>Задает оболочка совместимости kmeansreport.set_nfeatures(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.AllInstances.npointsGet">
            <summary>Задает оболочка совместимости kmeansreport.get_npoints()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.AllInstances.npointsSetInt32">
            <summary>Задает оболочка совместимости kmeansreport.set_npoints(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.AllInstances.terminationtypeGet">
            <summary>Задает оболочка совместимости kmeansreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimkmeansreport.AllInstances.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости kmeansreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlaguerre">
            <summary>Тип оболочки совместимости для alglib+laguerre</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlaguerre.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlaguerre.#ctor(alglib.laguerre)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlaguerre.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlaguerre.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlaguerre.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlaguerre.Constructor">
            <summary>Задает оболочка совместимости laguerre.laguerre()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlaguerre.laguerrecalculateInt32Double">
            <summary>Задает оболочка совместимости laguerre.laguerrecalculate(Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlaguerre.laguerrecoefficientsInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости laguerre.laguerrecoefficients(Int32 n, Double[]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlaguerre.laguerresumDoubleArrayInt32Double">
            <summary>Задает оболочка совместимости laguerre.laguerresum(Double[] c, Int32 n, Double x)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlaguerre.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlda">
            <summary>Тип оболочки совместимости для alglib+lda</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlda.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlda.#ctor(alglib.lda)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlda.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlda.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlda.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlda.Constructor">
            <summary>Задает оболочка совместимости lda.lda()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlda._pexec_fisherldanDoubleMdArray2Int32Int32Int32Int32RefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости lda._pexec_fisherldan(Double[,] xy, Int32 npoints, Int32 nvars, Int32 nclasses, Int32&amp; info, Double[,]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlda.fisherldaDoubleMdArray2Int32Int32Int32Int32RefDoubleArrayRef">
            <summary>Задает оболочка совместимости lda.fisherlda(Double[,] xy, Int32 npoints, Int32 nvars, Int32 nclasses, Int32&amp; info, Double[]&amp; w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlda.fisherldanDoubleMdArray2Int32Int32Int32Int32RefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости lda.fisherldan(Double[,] xy, Int32 npoints, Int32 nvars, Int32 nclasses, Int32&amp; info, Double[,]&amp; w)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlda.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlegendre">
            <summary>Тип оболочки совместимости для alglib+legendre</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlegendre.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlegendre.#ctor(alglib.legendre)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlegendre.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlegendre.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlegendre.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlegendre.Constructor">
            <summary>Задает оболочка совместимости legendre.legendre()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlegendre.legendrecalculateInt32Double">
            <summary>Задает оболочка совместимости legendre.legendrecalculate(Int32 n, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlegendre.legendrecoefficientsInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости legendre.legendrecoefficients(Int32 n, Double[]&amp; c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlegendre.legendresumDoubleArrayInt32Double">
            <summary>Задает оболочка совместимости legendre.legendresum(Double[] c, Int32 n, Double x)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlegendre.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlincg">
            <summary>Тип оболочки совместимости для alglib+lincg</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincg.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincg.#ctor(alglib.lincg)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincg.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincg.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.Constructor">
            <summary>Задает оболочка совместимости lincg.lincg()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.clearrfieldslincgalgliblincgstate">
            <summary>Задает оболочка совместимости lincg.clearrfields(lincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.lincgcreateInt32lincgalgliblincgstate">
            <summary>Задает оболочка совместимости lincg.lincgcreate(Int32 n, lincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.lincgiterationlincgalgliblincgstate">
            <summary>Задает оболочка совместимости lincg.lincgiteration(lincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.lincgrestartlincgalgliblincgstate">
            <summary>Задает оболочка совместимости lincg.lincgrestart(lincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.lincgresultslincgalgliblincgstateDoubleArrayReflincgalgliblincgreport">
            <summary>Задает оболочка совместимости lincg.lincgresults(lincgstate state, Double[]&amp; x, lincgreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.lincgsetblincgalgliblincgstateDoubleArray">
            <summary>Задает оболочка совместимости lincg.lincgsetb(lincgstate state, Double[] b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.lincgsetcondlincgalgliblincgstateDoubleInt32">
            <summary>Задает оболочка совместимости lincg.lincgsetcond(lincgstate state, Double epsf, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.lincgsetprecdiaglincgalgliblincgstate">
            <summary>Задает оболочка совместимости lincg.lincgsetprecdiag(lincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.lincgsetprecunitlincgalgliblincgstate">
            <summary>Задает оболочка совместимости lincg.lincgsetprecunit(lincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.lincgsetrestartfreqlincgalgliblincgstateInt32">
            <summary>Задает оболочка совместимости lincg.lincgsetrestartfreq(lincgstate state, Int32 srf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.lincgsetrupdatefreqlincgalgliblincgstateInt32">
            <summary>Задает оболочка совместимости lincg.lincgsetrupdatefreq(lincgstate state, Int32 freq)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.lincgsetstartingpointlincgalgliblincgstateDoubleArray">
            <summary>Задает оболочка совместимости lincg.lincgsetstartingpoint(lincgstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.lincgsetxreplincgalgliblincgstateBoolean">
            <summary>Задает оболочка совместимости lincg.lincgsetxrep(lincgstate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.lincgsolvesparselincgalgliblincgstatesparsealglibsparsematrixBooleanDoubleArray">
            <summary>Задает оболочка совместимости lincg.lincgsolvesparse(lincgstate state, sparsematrix a, Boolean isupper, Double[] b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.updateitersdatalincgalgliblincgstate">
            <summary>Задает оболочка совместимости lincg.updateitersdata(lincgstate state)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlincg.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlincg.Shimlincgreport">
            <summary>Тип оболочки совместимости для alglib+lincg+lincgreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincg.Shimlincgreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincg.Shimlincgreport.#ctor(alglib.lincg.lincgreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincg.Shimlincgreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincg.Shimlincgreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.Shimlincgreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.Shimlincgreport.Constructor">
            <summary>Задает оболочка совместимости lincgreport.lincgreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.Shimlincgreport.init">
            <summary>Задает оболочка совместимости lincgreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.Shimlincgreport.make_copy">
            <summary>Задает оболочка совместимости lincgreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlincg.Shimlincgreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.Shimlincgreport.AllInstances.init">
            <summary>Задает оболочка совместимости lincgreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.Shimlincgreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости lincgreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlincg.Shimlincgstate">
            <summary>Тип оболочки совместимости для alglib+lincg+lincgstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincg.Shimlincgstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincg.Shimlincgstate.#ctor(alglib.lincg.lincgstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincg.Shimlincgstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincg.Shimlincgstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.Shimlincgstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.Shimlincgstate.Constructor">
            <summary>Задает оболочка совместимости lincgstate.lincgstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.Shimlincgstate.init">
            <summary>Задает оболочка совместимости lincgstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.Shimlincgstate.make_copy">
            <summary>Задает оболочка совместимости lincgstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlincg.Shimlincgstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.Shimlincgstate.AllInstances.init">
            <summary>Задает оболочка совместимости lincgstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincg.Shimlincgstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости lincgstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlincgreport">
            <summary>Тип оболочки совместимости для alglib+lincgreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincgreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincgreport.#ctor(alglib.lincgreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincgreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincgreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.Constructor">
            <summary>Задает оболочка совместимости lincgreport.lincgreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.Constructorlincgalgliblincgreport">
            <summary>Задает оболочка совместимости lincgreport.lincgreport(lincgreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.innerobjGet">
            <summary>Задает оболочка совместимости lincgreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.iterationscountGet">
            <summary>Задает оболочка совместимости lincgreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.iterationscountSetInt32">
            <summary>Задает оболочка совместимости lincgreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.make_copy">
            <summary>Задает оболочка совместимости lincgreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.nmvGet">
            <summary>Задает оболочка совместимости lincgreport.get_nmv()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.nmvSetInt32">
            <summary>Задает оболочка совместимости lincgreport.set_nmv(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.r2Get">
            <summary>Задает оболочка совместимости lincgreport.get_r2()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.r2SetDouble">
            <summary>Задает оболочка совместимости lincgreport.set_r2(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.terminationtypeGet">
            <summary>Задает оболочка совместимости lincgreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости lincgreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlincgreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости lincgreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.AllInstances.iterationscountGet">
            <summary>Задает оболочка совместимости lincgreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.AllInstances.iterationscountSetInt32">
            <summary>Задает оболочка совместимости lincgreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости lincgreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.AllInstances.nmvGet">
            <summary>Задает оболочка совместимости lincgreport.get_nmv()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.AllInstances.nmvSetInt32">
            <summary>Задает оболочка совместимости lincgreport.set_nmv(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.AllInstances.r2Get">
            <summary>Задает оболочка совместимости lincgreport.get_r2()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.AllInstances.r2SetDouble">
            <summary>Задает оболочка совместимости lincgreport.set_r2(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.AllInstances.terminationtypeGet">
            <summary>Задает оболочка совместимости lincgreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgreport.AllInstances.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости lincgreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlincgstate">
            <summary>Тип оболочки совместимости для alglib+lincgstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincgstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincgstate.#ctor(alglib.lincgstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincgstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlincgstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgstate.Constructor">
            <summary>Задает оболочка совместимости lincgstate.lincgstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgstate.Constructorlincgalgliblincgstate">
            <summary>Задает оболочка совместимости lincgstate.lincgstate(lincgstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgstate.innerobjGet">
            <summary>Задает оболочка совместимости lincgstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgstate.make_copy">
            <summary>Задает оболочка совместимости lincgstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlincgstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости lincgstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlincgstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости lincgstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinearmodel">
            <summary>Тип оболочки совместимости для alglib+linearmodel</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinearmodel.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinearmodel.#ctor(alglib.linearmodel)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinearmodel.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinearmodel.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinearmodel.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinearmodel.Constructor">
            <summary>Задает оболочка совместимости linearmodel.linearmodel()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinearmodel.Constructorlinregalgliblinearmodel">
            <summary>Задает оболочка совместимости linearmodel.linearmodel(linearmodel obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinearmodel.innerobjGet">
            <summary>Задает оболочка совместимости linearmodel.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinearmodel.make_copy">
            <summary>Задает оболочка совместимости linearmodel.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinearmodel.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinearmodel.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости linearmodel.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinearmodel.AllInstances.make_copy">
            <summary>Задает оболочка совместимости linearmodel.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinlsqr">
            <summary>Тип оболочки совместимости для alglib+linlsqr</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqr.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqr.#ctor(alglib.linlsqr)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqr.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqr.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.Constructor">
            <summary>Задает оболочка совместимости linlsqr.linlsqr()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.clearrfieldslinlsqralgliblinlsqrstate">
            <summary>Задает оболочка совместимости linlsqr.clearrfields(linlsqrstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.linlsqrcreateInt32Int32linlsqralgliblinlsqrstate">
            <summary>Задает оболочка совместимости linlsqr.linlsqrcreate(Int32 m, Int32 n, linlsqrstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.linlsqriterationlinlsqralgliblinlsqrstate">
            <summary>Задает оболочка совместимости linlsqr.linlsqriteration(linlsqrstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.linlsqrrestartlinlsqralgliblinlsqrstate">
            <summary>Задает оболочка совместимости linlsqr.linlsqrrestart(linlsqrstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.linlsqrresultslinlsqralgliblinlsqrstateDoubleArrayReflinlsqralgliblinlsqrreport">
            <summary>Задает оболочка совместимости linlsqr.linlsqrresults(linlsqrstate state, Double[]&amp; x, linlsqrreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.linlsqrsetblinlsqralgliblinlsqrstateDoubleArray">
            <summary>Задает оболочка совместимости linlsqr.linlsqrsetb(linlsqrstate state, Double[] b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.linlsqrsetcondlinlsqralgliblinlsqrstateDoubleDoubleInt32">
            <summary>Задает оболочка совместимости linlsqr.linlsqrsetcond(linlsqrstate state, Double epsa, Double epsb, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.linlsqrsetlambdailinlsqralgliblinlsqrstateDouble">
            <summary>Задает оболочка совместимости linlsqr.linlsqrsetlambdai(linlsqrstate state, Double lambdai)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.linlsqrsetprecdiaglinlsqralgliblinlsqrstate">
            <summary>Задает оболочка совместимости linlsqr.linlsqrsetprecdiag(linlsqrstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.linlsqrsetprecunitlinlsqralgliblinlsqrstate">
            <summary>Задает оболочка совместимости linlsqr.linlsqrsetprecunit(linlsqrstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.linlsqrsetxreplinlsqralgliblinlsqrstateBoolean">
            <summary>Задает оболочка совместимости linlsqr.linlsqrsetxrep(linlsqrstate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.linlsqrsolvesparselinlsqralgliblinlsqrstatesparsealglibsparsematrixDoubleArray">
            <summary>Задает оболочка совместимости linlsqr.linlsqrsolvesparse(linlsqrstate state, sparsematrix a, Double[] b)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinlsqr.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrreport">
            <summary>Тип оболочки совместимости для alglib+linlsqr+linlsqrreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrreport.#ctor(alglib.linlsqr.linlsqrreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrreport.Constructor">
            <summary>Задает оболочка совместимости linlsqrreport.linlsqrreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrreport.init">
            <summary>Задает оболочка совместимости linlsqrreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrreport.make_copy">
            <summary>Задает оболочка совместимости linlsqrreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrreport.AllInstances.init">
            <summary>Задает оболочка совместимости linlsqrreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости linlsqrreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrstate">
            <summary>Тип оболочки совместимости для alglib+linlsqr+linlsqrstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrstate.#ctor(alglib.linlsqr.linlsqrstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrstate.Constructor">
            <summary>Задает оболочка совместимости linlsqrstate.linlsqrstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrstate.init">
            <summary>Задает оболочка совместимости linlsqrstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrstate.make_copy">
            <summary>Задает оболочка совместимости linlsqrstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrstate.AllInstances.init">
            <summary>Задает оболочка совместимости linlsqrstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqr.Shimlinlsqrstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости linlsqrstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinlsqrreport">
            <summary>Тип оболочки совместимости для alglib+linlsqrreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqrreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqrreport.#ctor(alglib.linlsqrreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqrreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqrreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.Constructor">
            <summary>Задает оболочка совместимости linlsqrreport.linlsqrreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.Constructorlinlsqralgliblinlsqrreport">
            <summary>Задает оболочка совместимости linlsqrreport.linlsqrreport(linlsqrreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.innerobjGet">
            <summary>Задает оболочка совместимости linlsqrreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.iterationscountGet">
            <summary>Задает оболочка совместимости linlsqrreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.iterationscountSetInt32">
            <summary>Задает оболочка совместимости linlsqrreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.make_copy">
            <summary>Задает оболочка совместимости linlsqrreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.nmvGet">
            <summary>Задает оболочка совместимости linlsqrreport.get_nmv()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.nmvSetInt32">
            <summary>Задает оболочка совместимости linlsqrreport.set_nmv(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.terminationtypeGet">
            <summary>Задает оболочка совместимости linlsqrreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости linlsqrreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinlsqrreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости linlsqrreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.AllInstances.iterationscountGet">
            <summary>Задает оболочка совместимости linlsqrreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.AllInstances.iterationscountSetInt32">
            <summary>Задает оболочка совместимости linlsqrreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости linlsqrreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.AllInstances.nmvGet">
            <summary>Задает оболочка совместимости linlsqrreport.get_nmv()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.AllInstances.nmvSetInt32">
            <summary>Задает оболочка совместимости linlsqrreport.set_nmv(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.AllInstances.terminationtypeGet">
            <summary>Задает оболочка совместимости linlsqrreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrreport.AllInstances.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости linlsqrreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinlsqrstate">
            <summary>Тип оболочки совместимости для alglib+linlsqrstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqrstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqrstate.#ctor(alglib.linlsqrstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqrstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinlsqrstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrstate.Constructor">
            <summary>Задает оболочка совместимости linlsqrstate.linlsqrstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrstate.Constructorlinlsqralgliblinlsqrstate">
            <summary>Задает оболочка совместимости linlsqrstate.linlsqrstate(linlsqrstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrstate.innerobjGet">
            <summary>Задает оболочка совместимости linlsqrstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrstate.make_copy">
            <summary>Задает оболочка совместимости linlsqrstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinlsqrstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости linlsqrstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinlsqrstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости linlsqrstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinmin">
            <summary>Тип оболочки совместимости для alglib+linmin</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinmin.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinmin.#ctor(alglib.linmin)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinmin.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinmin.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.Constructor">
            <summary>Задает оболочка совместимости linmin.linmin()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.armijocreateInt32DoubleArrayDoubleDoubleArrayDoubleDoubleInt32linminalglibarmijostate">
            <summary>Задает оболочка совместимости linmin.armijocreate(Int32 n, Double[] x, Double f, Double[] s, Double stp, Double stpmax, Int32 fmax, armijostate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.armijoiterationlinminalglibarmijostate">
            <summary>Задает оболочка совместимости linmin.armijoiteration(armijostate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.armijoresultslinminalglibarmijostateInt32RefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости linmin.armijoresults(armijostate state, Int32&amp; info, Double&amp; stp, Double&amp; f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.linminnormalizedDoubleArrayRefDoubleRefInt32">
            <summary>Задает оболочка совместимости linmin.linminnormalized(Double[]&amp; d, Double&amp; stp, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.mcsrchInt32DoubleArrayRefDoubleRefDoubleArrayRefDoubleArrayDoubleRefDoubleDoubleInt32RefInt32RefDoubleArrayReflinminalgliblinminstateInt32Ref">
            <summary>Задает оболочка совместимости linmin.mcsrch(Int32 n, Double[]&amp; x, Double&amp; f, Double[]&amp; g, Double[] s, Double&amp; stp, Double stpmax, Double gtol, Int32&amp; info, Int32&amp; nfev, Double[]&amp; wa, linminstate state, Int32&amp; stage)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.mcstepDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleDoubleBooleanRefDoubleDoubleInt32Ref">
            <summary>Задает оболочка совместимости linmin.mcstep(Double&amp; stx, Double&amp; fx, Double&amp; dx, Double&amp; sty, Double&amp; fy, Double&amp; dy, Double&amp; stp, Double fp, Double dp, Boolean&amp; brackt, Double stmin, Double stmax, Int32&amp; info)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinmin.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinmin.Shimarmijostate">
            <summary>Тип оболочки совместимости для alglib+linmin+armijostate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinmin.Shimarmijostate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinmin.Shimarmijostate.#ctor(alglib.linmin.armijostate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinmin.Shimarmijostate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinmin.Shimarmijostate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.Shimarmijostate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.Shimarmijostate.Constructor">
            <summary>Задает оболочка совместимости armijostate.armijostate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.Shimarmijostate.init">
            <summary>Задает оболочка совместимости armijostate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.Shimarmijostate.make_copy">
            <summary>Задает оболочка совместимости armijostate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinmin.Shimarmijostate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.Shimarmijostate.AllInstances.init">
            <summary>Задает оболочка совместимости armijostate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.Shimarmijostate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости armijostate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinmin.Shimlinminstate">
            <summary>Тип оболочки совместимости для alglib+linmin+linminstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinmin.Shimlinminstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinmin.Shimlinminstate.#ctor(alglib.linmin.linminstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinmin.Shimlinminstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinmin.Shimlinminstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.Shimlinminstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.Shimlinminstate.Constructor">
            <summary>Задает оболочка совместимости linminstate.linminstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.Shimlinminstate.init">
            <summary>Задает оболочка совместимости linminstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.Shimlinminstate.make_copy">
            <summary>Задает оболочка совместимости linminstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinmin.Shimlinminstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.Shimlinminstate.AllInstances.init">
            <summary>Задает оболочка совместимости linminstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinmin.Shimlinminstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости linminstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinreg">
            <summary>Тип оболочки совместимости для alglib+linreg</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinreg.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinreg.#ctor(alglib.linreg)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinreg.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinreg.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.Constructor">
            <summary>Задает оболочка совместимости linreg.linreg()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.lravgerrorlinregalgliblinearmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости linreg.lravgerror(linearmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.lravgrelerrorlinregalgliblinearmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости linreg.lravgrelerror(linearmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.lrbuildDoubleMdArray2Int32Int32Int32Reflinregalgliblinearmodellinregalgliblrreport">
            <summary>Задает оболочка совместимости linreg.lrbuild(Double[,] xy, Int32 npoints, Int32 nvars, Int32&amp; info, linearmodel lm, lrreport ar)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.lrbuildsDoubleMdArray2DoubleArrayInt32Int32Int32Reflinregalgliblinearmodellinregalgliblrreport">
            <summary>Задает оболочка совместимости linreg.lrbuilds(Double[,] xy, Double[] s, Int32 npoints, Int32 nvars, Int32&amp; info, linearmodel lm, lrreport ar)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.lrbuildzDoubleMdArray2Int32Int32Int32Reflinregalgliblinearmodellinregalgliblrreport">
            <summary>Задает оболочка совместимости linreg.lrbuildz(Double[,] xy, Int32 npoints, Int32 nvars, Int32&amp; info, linearmodel lm, lrreport ar)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.lrbuildzsDoubleMdArray2DoubleArrayInt32Int32Int32Reflinregalgliblinearmodellinregalgliblrreport">
            <summary>Задает оболочка совместимости linreg.lrbuildzs(Double[,] xy, Double[] s, Int32 npoints, Int32 nvars, Int32&amp; info, linearmodel lm, lrreport ar)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.lrcopylinregalgliblinearmodellinregalgliblinearmodel">
            <summary>Задает оболочка совместимости linreg.lrcopy(linearmodel lm1, linearmodel lm2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.lrinternalDoubleMdArray2DoubleArrayInt32Int32Int32Reflinregalgliblinearmodellinregalgliblrreport">
            <summary>Задает оболочка совместимости linreg.lrinternal(Double[,] xy, Double[] s, Int32 npoints, Int32 nvars, Int32&amp; info, linearmodel lm, lrreport ar)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.lrlineDoubleMdArray2Int32Int32RefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости linreg.lrline(Double[,] xy, Int32 n, Int32&amp; info, Double&amp; a, Double&amp; b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.lrlinesDoubleMdArray2DoubleArrayInt32Int32RefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости linreg.lrlines(Double[,] xy, Double[] s, Int32 n, Int32&amp; info, Double&amp; a, Double&amp; b, Double&amp; vara, Double&amp; varb, Double&amp; covab, Double&amp; corrab, Double&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.lrpackDoubleArrayInt32linregalgliblinearmodel">
            <summary>Задает оболочка совместимости linreg.lrpack(Double[] v, Int32 nvars, linearmodel lm)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.lrprocesslinregalgliblinearmodelDoubleArray">
            <summary>Задает оболочка совместимости linreg.lrprocess(linearmodel lm, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.lrrmserrorlinregalgliblinearmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости linreg.lrrmserror(linearmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.lrunpacklinregalgliblinearmodelDoubleArrayRefInt32Ref">
            <summary>Задает оболочка совместимости linreg.lrunpack(linearmodel lm, Double[]&amp; v, Int32&amp; nvars)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinreg.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinreg.Shimlinearmodel">
            <summary>Тип оболочки совместимости для alglib+linreg+linearmodel</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinreg.Shimlinearmodel.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinreg.Shimlinearmodel.#ctor(alglib.linreg.linearmodel)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinreg.Shimlinearmodel.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinreg.Shimlinearmodel.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.Shimlinearmodel.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.Shimlinearmodel.Constructor">
            <summary>Задает оболочка совместимости linearmodel.linearmodel()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.Shimlinearmodel.init">
            <summary>Задает оболочка совместимости linearmodel.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.Shimlinearmodel.make_copy">
            <summary>Задает оболочка совместимости linearmodel.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinreg.Shimlinearmodel.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.Shimlinearmodel.AllInstances.init">
            <summary>Задает оболочка совместимости linearmodel.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.Shimlinearmodel.AllInstances.make_copy">
            <summary>Задает оболочка совместимости linearmodel.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinreg.Shimlrreport">
            <summary>Тип оболочки совместимости для alglib+linreg+lrreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinreg.Shimlrreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinreg.Shimlrreport.#ctor(alglib.linreg.lrreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinreg.Shimlrreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlinreg.Shimlrreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.Shimlrreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.Shimlrreport.Constructor">
            <summary>Задает оболочка совместимости lrreport.lrreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.Shimlrreport.init">
            <summary>Задает оболочка совместимости lrreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.Shimlrreport.make_copy">
            <summary>Задает оболочка совместимости lrreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlinreg.Shimlrreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.Shimlrreport.AllInstances.init">
            <summary>Задает оболочка совместимости lrreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlinreg.Shimlrreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости lrreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlogit">
            <summary>Тип оболочки совместимости для alglib+logit</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.#ctor(alglib.logit)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Constructor">
            <summary>Задает оболочка совместимости logit.logit()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnlallerrorslogitalgliblogitmodelDoubleMdArray2Int32DoubleRefDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости logit.mnlallerrors(logitmodel lm, Double[,] xy, Int32 npoints, Double&amp; relcls, Double&amp; avgce, Double&amp; rms, Double&amp; avg, Double&amp; avgrel)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnlavgcelogitalgliblogitmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости logit.mnlavgce(logitmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnlavgerrorlogitalgliblogitmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости logit.mnlavgerror(logitmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnlavgrelerrorlogitalgliblogitmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости logit.mnlavgrelerror(logitmodel lm, Double[,] xy, Int32 ssize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnlclserrorlogitalgliblogitmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости logit.mnlclserror(logitmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnlcopylogitalgliblogitmodellogitalgliblogitmodel">
            <summary>Задает оболочка совместимости logit.mnlcopy(logitmodel lm1, logitmodel lm2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnliexpDoubleArrayRefDoubleArray">
            <summary>Задает оболочка совместимости logit.mnliexp(Double[]&amp; w, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnlmcsrchInt32DoubleArrayRefDoubleRefDoubleArrayRefDoubleArrayDoubleRefInt32RefInt32RefDoubleArrayReflogitalgliblogitmcstateInt32Ref">
            <summary>Задает оболочка совместимости logit.mnlmcsrch(Int32 n, Double[]&amp; x, Double&amp; f, Double[]&amp; g, Double[] s, Double&amp; stp, Int32&amp; info, Int32&amp; nfev, Double[]&amp; wa, logitmcstate state, Int32&amp; stage)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnlmcstepDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleDoubleBooleanRefDoubleDoubleInt32Ref">
            <summary>Задает оболочка совместимости logit.mnlmcstep(Double&amp; stx, Double&amp; fx, Double&amp; dx, Double&amp; sty, Double&amp; fy, Double&amp; dy, Double&amp; stp, Double fp, Double dp, Boolean&amp; brackt, Double stmin, Double stmax, Int32&amp; info)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnlpackDoubleMdArray2Int32Int32logitalgliblogitmodel">
            <summary>Задает оболочка совместимости logit.mnlpack(Double[,] a, Int32 nvars, Int32 nclasses, logitmodel lm)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnlprocessilogitalgliblogitmodelDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости logit.mnlprocessi(logitmodel lm, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnlprocesslogitalgliblogitmodelDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости logit.mnlprocess(logitmodel lm, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnlrelclserrorlogitalgliblogitmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости logit.mnlrelclserror(logitmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnlrmserrorlogitalgliblogitmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости logit.mnlrmserror(logitmodel lm, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnltrainhDoubleMdArray2Int32Int32Int32Int32Reflogitalgliblogitmodellogitalglibmnlreport">
            <summary>Задает оболочка совместимости logit.mnltrainh(Double[,] xy, Int32 npoints, Int32 nvars, Int32 nclasses, Int32&amp; info, logitmodel lm, mnlreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.mnlunpacklogitalgliblogitmodelDoubleMdArray2RefInt32RefInt32Ref">
            <summary>Задает оболочка совместимости logit.mnlunpack(logitmodel lm, Double[,]&amp; a, Int32&amp; nvars, Int32&amp; nclasses)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlogit.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmcstate">
            <summary>Тип оболочки совместимости для alglib+logit+logitmcstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmcstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmcstate.#ctor(alglib.logit.logitmcstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmcstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmcstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmcstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmcstate.Constructor">
            <summary>Задает оболочка совместимости logitmcstate.logitmcstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmcstate.init">
            <summary>Задает оболочка совместимости logitmcstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmcstate.make_copy">
            <summary>Задает оболочка совместимости logitmcstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmcstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmcstate.AllInstances.init">
            <summary>Задает оболочка совместимости logitmcstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmcstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости logitmcstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmodel">
            <summary>Тип оболочки совместимости для alglib+logit+logitmodel</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmodel.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmodel.#ctor(alglib.logit.logitmodel)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmodel.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmodel.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmodel.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmodel.Constructor">
            <summary>Задает оболочка совместимости logitmodel.logitmodel()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmodel.init">
            <summary>Задает оболочка совместимости logitmodel.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmodel.make_copy">
            <summary>Задает оболочка совместимости logitmodel.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmodel.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmodel.AllInstances.init">
            <summary>Задает оболочка совместимости logitmodel.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimlogitmodel.AllInstances.make_copy">
            <summary>Задает оболочка совместимости logitmodel.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlogit.Shimmnlreport">
            <summary>Тип оболочки совместимости для alglib+logit+mnlreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.Shimmnlreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.Shimmnlreport.#ctor(alglib.logit.mnlreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.Shimmnlreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogit.Shimmnlreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimmnlreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimmnlreport.Constructor">
            <summary>Задает оболочка совместимости mnlreport.mnlreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimmnlreport.init">
            <summary>Задает оболочка совместимости mnlreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimmnlreport.make_copy">
            <summary>Задает оболочка совместимости mnlreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlogit.Shimmnlreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimmnlreport.AllInstances.init">
            <summary>Задает оболочка совместимости mnlreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogit.Shimmnlreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mnlreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlogitmodel">
            <summary>Тип оболочки совместимости для alglib+logitmodel</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogitmodel.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogitmodel.#ctor(alglib.logitmodel)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogitmodel.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlogitmodel.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogitmodel.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogitmodel.Constructor">
            <summary>Задает оболочка совместимости logitmodel.logitmodel()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogitmodel.Constructorlogitalgliblogitmodel">
            <summary>Задает оболочка совместимости logitmodel.logitmodel(logitmodel obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogitmodel.innerobjGet">
            <summary>Задает оболочка совместимости logitmodel.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogitmodel.make_copy">
            <summary>Задает оболочка совместимости logitmodel.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlogitmodel.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogitmodel.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости logitmodel.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlogitmodel.AllInstances.make_copy">
            <summary>Задает оболочка совместимости logitmodel.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlrreport">
            <summary>Тип оболочки совместимости для alglib+lrreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlrreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlrreport.#ctor(alglib.lrreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlrreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlrreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.Constructor">
            <summary>Задает оболочка совместимости lrreport.lrreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.Constructorlinregalgliblrreport">
            <summary>Задает оболочка совместимости lrreport.lrreport(lrreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.avgerrorGet">
            <summary>Задает оболочка совместимости lrreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.avgerrorSetDouble">
            <summary>Задает оболочка совместимости lrreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.avgrelerrorGet">
            <summary>Задает оболочка совместимости lrreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости lrreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.cGet">
            <summary>Задает оболочка совместимости lrreport.get_c()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.cSetDoubleMdArray2">
            <summary>Задает оболочка совместимости lrreport.set_c(Double[,] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.cvavgerrorGet">
            <summary>Задает оболочка совместимости lrreport.get_cvavgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.cvavgerrorSetDouble">
            <summary>Задает оболочка совместимости lrreport.set_cvavgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.cvavgrelerrorGet">
            <summary>Задает оболочка совместимости lrreport.get_cvavgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.cvavgrelerrorSetDouble">
            <summary>Задает оболочка совместимости lrreport.set_cvavgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.cvdefectsGet">
            <summary>Задает оболочка совместимости lrreport.get_cvdefects()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.cvdefectsSetInt32Array">
            <summary>Задает оболочка совместимости lrreport.set_cvdefects(Int32[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.cvrmserrorGet">
            <summary>Задает оболочка совместимости lrreport.get_cvrmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.cvrmserrorSetDouble">
            <summary>Задает оболочка совместимости lrreport.set_cvrmserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.innerobjGet">
            <summary>Задает оболочка совместимости lrreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.make_copy">
            <summary>Задает оболочка совместимости lrreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.ncvdefectsGet">
            <summary>Задает оболочка совместимости lrreport.get_ncvdefects()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.ncvdefectsSetInt32">
            <summary>Задает оболочка совместимости lrreport.set_ncvdefects(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.rmserrorGet">
            <summary>Задает оболочка совместимости lrreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.rmserrorSetDouble">
            <summary>Задает оболочка совместимости lrreport.set_rmserror(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlrreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.avgerrorGet">
            <summary>Задает оболочка совместимости lrreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.avgerrorSetDouble">
            <summary>Задает оболочка совместимости lrreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.avgrelerrorGet">
            <summary>Задает оболочка совместимости lrreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости lrreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.cGet">
            <summary>Задает оболочка совместимости lrreport.get_c()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.cSetDoubleMdArray2">
            <summary>Задает оболочка совместимости lrreport.set_c(Double[,] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.cvavgerrorGet">
            <summary>Задает оболочка совместимости lrreport.get_cvavgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.cvavgerrorSetDouble">
            <summary>Задает оболочка совместимости lrreport.set_cvavgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.cvavgrelerrorGet">
            <summary>Задает оболочка совместимости lrreport.get_cvavgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.cvavgrelerrorSetDouble">
            <summary>Задает оболочка совместимости lrreport.set_cvavgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.cvdefectsGet">
            <summary>Задает оболочка совместимости lrreport.get_cvdefects()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.cvdefectsSetInt32Array">
            <summary>Задает оболочка совместимости lrreport.set_cvdefects(Int32[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.cvrmserrorGet">
            <summary>Задает оболочка совместимости lrreport.get_cvrmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.cvrmserrorSetDouble">
            <summary>Задает оболочка совместимости lrreport.set_cvrmserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости lrreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости lrreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.ncvdefectsGet">
            <summary>Задает оболочка совместимости lrreport.get_ncvdefects()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.ncvdefectsSetInt32">
            <summary>Задает оболочка совместимости lrreport.set_ncvdefects(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.rmserrorGet">
            <summary>Задает оболочка совместимости lrreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlrreport.AllInstances.rmserrorSetDouble">
            <summary>Задает оболочка совместимости lrreport.set_rmserror(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfit">
            <summary>Тип оболочки совместимости для alglib+lsfit</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.#ctor(alglib.lsfit)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Constructor">
            <summary>Задает оболочка совместимости lsfit.lsfit()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit._pexec_barycentricfitfloaterhormannDoubleArrayDoubleArrayInt32Int32Int32Refratintalglibbarycentricinterpolantlsfitalglibbarycentricfitreport">
            <summary>Задает оболочка совместимости lsfit._pexec_barycentricfitfloaterhormann(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, barycentricinterpolant b, barycentricfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit._pexec_barycentricfitfloaterhormannwcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32Refratintalglibbarycentricinterpolantlsfitalglibbarycentricfitreport">
            <summary>Задает оболочка совместимости lsfit._pexec_barycentricfitfloaterhormannwc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, barycentricinterpolant b, barycentricfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit._pexec_lsfitlinearDoubleArrayDoubleMdArray2Int32Int32Int32RefDoubleArrayReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit._pexec_lsfitlinear(Double[] y, Double[,] fmatrix, Int32 n, Int32 m, Int32&amp; info, Double[]&amp; c, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit._pexec_lsfitlinearcDoubleArrayDoubleMdArray2DoubleMdArray2Int32Int32Int32Int32RefDoubleArrayReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit._pexec_lsfitlinearc(Double[] y, Double[,] fmatrix, Double[,] cmatrix, Int32 n, Int32 m, Int32 k, Int32&amp; info, Double[]&amp; c, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit._pexec_lsfitlinearwDoubleArrayDoubleArrayDoubleMdArray2Int32Int32Int32RefDoubleArrayReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit._pexec_lsfitlinearw(Double[] y, Double[] w, Double[,] fmatrix, Int32 n, Int32 m, Int32&amp; info, Double[]&amp; c, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit._pexec_lsfitlinearwcDoubleArrayDoubleArrayDoubleMdArray2DoubleMdArray2Int32Int32Int32Int32RefDoubleArrayReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit._pexec_lsfitlinearwc(Double[] y, Double[] w, Double[,] fmatrix, Double[,] cmatrix, Int32 n, Int32 m, Int32 k, Int32&amp; info, Double[]&amp; c, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit._pexec_polynomialfitDoubleArrayDoubleArrayInt32Int32Int32Refratintalglibbarycentricinterpolantlsfitalglibpolynomialfitreport">
            <summary>Задает оболочка совместимости lsfit._pexec_polynomialfit(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, barycentricinterpolant p, polynomialfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit._pexec_polynomialfitwcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32Refratintalglibbarycentricinterpolantlsfitalglibpolynomialfitreport">
            <summary>Задает оболочка совместимости lsfit._pexec_polynomialfitwc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, barycentricinterpolant p, polynomialfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit._pexec_spline1dfitcubicDoubleArrayDoubleArrayInt32Int32Int32Refspline1dalglibspline1dinterpolantlsfitalglibspline1dfitreport">
            <summary>Задает оболочка совместимости lsfit._pexec_spline1dfitcubic(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, spline1dinterpolant s, spline1dfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit._pexec_spline1dfitcubicwcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32Refspline1dalglibspline1dinterpolantlsfitalglibspline1dfitreport">
            <summary>Задает оболочка совместимости lsfit._pexec_spline1dfitcubicwc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, spline1dinterpolant s, spline1dfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit._pexec_spline1dfithermiteDoubleArrayDoubleArrayInt32Int32Int32Refspline1dalglibspline1dinterpolantlsfitalglibspline1dfitreport">
            <summary>Задает оболочка совместимости lsfit._pexec_spline1dfithermite(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, spline1dinterpolant s, spline1dfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit._pexec_spline1dfithermitewcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32Refspline1dalglibspline1dinterpolantlsfitalglibspline1dfitreport">
            <summary>Задает оболочка совместимости lsfit._pexec_spline1dfithermitewc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, spline1dinterpolant s, spline1dfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit._pexec_spline1dfitpenalizedDoubleArrayDoubleArrayInt32Int32DoubleInt32Refspline1dalglibspline1dinterpolantlsfitalglibspline1dfitreport">
            <summary>Задает оболочка совместимости lsfit._pexec_spline1dfitpenalized(Double[] x, Double[] y, Int32 n, Int32 m, Double rho, Int32&amp; info, spline1dinterpolant s, spline1dfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit._pexec_spline1dfitpenalizedwDoubleArrayDoubleArrayDoubleArrayInt32Int32DoubleInt32Refspline1dalglibspline1dinterpolantlsfitalglibspline1dfitreport">
            <summary>Задает оболочка совместимости lsfit._pexec_spline1dfitpenalizedw(Double[] x, Double[] y, Double[] w, Int32 n, Int32 m, Double rho, Int32&amp; info, spline1dinterpolant s, spline1dfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.barycentriccalcbasisratintalglibbarycentricinterpolantDoubleDoubleArrayRef">
            <summary>Задает оболочка совместимости lsfit.barycentriccalcbasis(barycentricinterpolant b, Double t, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.barycentricfitfloaterhormannDoubleArrayDoubleArrayInt32Int32Int32Refratintalglibbarycentricinterpolantlsfitalglibbarycentricfitreport">
            <summary>Задает оболочка совместимости lsfit.barycentricfitfloaterhormann(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, barycentricinterpolant b, barycentricfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.barycentricfitfloaterhormannwcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32Refratintalglibbarycentricinterpolantlsfitalglibbarycentricfitreport">
            <summary>Задает оболочка совместимости lsfit.barycentricfitfloaterhormannwc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, barycentricinterpolant b, barycentricfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.barycentricfitwcfixeddDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32Int32Refratintalglibbarycentricinterpolantlsfitalglibbarycentricfitreport">
            <summary>Задает оболочка совместимости lsfit.barycentricfitwcfixedd(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32 d, Int32&amp; info, barycentricinterpolant b, barycentricfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.clearreportlsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit.clearreport(lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.estimateerrorsDoubleMdArray2DoubleArrayDoubleArrayDoubleArrayDoubleArrayDoubleArrayInt32Int32lsfitalgliblsfitreportDoubleMdArray2RefInt32">
            <summary>Задает оболочка совместимости lsfit.estimateerrors(Double[,] f1, Double[] f0, Double[] y, Double[] w, Double[] x, Double[] s, Int32 n, Int32 k, lsfitreport rep, Double[,]&amp; z, Int32 zkind)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.internalchebyshevfitDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32RefDoubleArrayReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit.internalchebyshevfit(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, Double[]&amp; c, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.logisticcalc4DoubleDoubleDoubleDoubleDouble">
            <summary>Задает оболочка совместимости lsfit.logisticcalc4(Double x, Double a, Double b, Double c, Double d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.logisticcalc5DoubleDoubleDoubleDoubleDoubleDouble">
            <summary>Задает оболочка совместимости lsfit.logisticcalc5(Double x, Double a, Double b, Double c, Double d, Double g)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.logisticfit45xDoubleArrayDoubleArrayInt32DoubleDoubleBooleanDoubleDoubleInt32DoubleRefDoubleRefDoubleRefDoubleRefDoubleReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit.logisticfit45x(Double[] x, Double[] y, Int32 n, Double cnstrleft, Double cnstrright, Boolean is4pl, Double lambdav, Double epsx, Int32 rscnt, Double&amp; a, Double&amp; b, Double&amp; c, Double&amp; d, Double&amp; g, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.logisticfit4DoubleArrayDoubleArrayInt32DoubleRefDoubleRefDoubleRefDoubleReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit.logisticfit4(Double[] x, Double[] y, Int32 n, Double&amp; a, Double&amp; b, Double&amp; c, Double&amp; d, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.logisticfit4ecDoubleArrayDoubleArrayInt32DoubleDoubleDoubleRefDoubleRefDoubleRefDoubleReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit.logisticfit4ec(Double[] x, Double[] y, Int32 n, Double cnstrleft, Double cnstrright, Double&amp; a, Double&amp; b, Double&amp; c, Double&amp; d, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.logisticfit5DoubleArrayDoubleArrayInt32DoubleRefDoubleRefDoubleRefDoubleRefDoubleReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit.logisticfit5(Double[] x, Double[] y, Int32 n, Double&amp; a, Double&amp; b, Double&amp; c, Double&amp; d, Double&amp; g, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.logisticfit5ecDoubleArrayDoubleArrayInt32DoubleDoubleDoubleRefDoubleRefDoubleRefDoubleRefDoubleReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit.logisticfit5ec(Double[] x, Double[] y, Int32 n, Double cnstrleft, Double cnstrright, Double&amp; a, Double&amp; b, Double&amp; c, Double&amp; d, Double&amp; g, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.logisticfitinternalDoubleArrayDoubleArrayInt32BooleanDoubleminlmalglibminlmstateminlmalglibminlmreportDoubleArrayRefDoubleRef">
            <summary>Задает оболочка совместимости lsfit.logisticfitinternal(Double[] x, Double[] y, Int32 n, Boolean is4pl, Double lambdav, minlmstate state, minlmreport replm, Double[]&amp; p1, Double&amp; flast)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitclearrequestfieldslsfitalgliblsfitstate">
            <summary>Задает оболочка совместимости lsfit.lsfitclearrequestfields(lsfitstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitcreatefDoubleMdArray2DoubleArrayDoubleArrayInt32Int32Int32Doublelsfitalgliblsfitstate">
            <summary>Задает оболочка совместимости lsfit.lsfitcreatef(Double[,] x, Double[] y, Double[] c, Int32 n, Int32 m, Int32 k, Double diffstep, lsfitstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitcreatefgDoubleMdArray2DoubleArrayDoubleArrayInt32Int32Int32Booleanlsfitalgliblsfitstate">
            <summary>Задает оболочка совместимости lsfit.lsfitcreatefg(Double[,] x, Double[] y, Double[] c, Int32 n, Int32 m, Int32 k, Boolean cheapfg, lsfitstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitcreatefghDoubleMdArray2DoubleArrayDoubleArrayInt32Int32Int32lsfitalgliblsfitstate">
            <summary>Задает оболочка совместимости lsfit.lsfitcreatefgh(Double[,] x, Double[] y, Double[] c, Int32 n, Int32 m, Int32 k, lsfitstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitcreatewfDoubleMdArray2DoubleArrayDoubleArrayDoubleArrayInt32Int32Int32Doublelsfitalgliblsfitstate">
            <summary>Задает оболочка совместимости lsfit.lsfitcreatewf(Double[,] x, Double[] y, Double[] w, Double[] c, Int32 n, Int32 m, Int32 k, Double diffstep, lsfitstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitcreatewfgDoubleMdArray2DoubleArrayDoubleArrayDoubleArrayInt32Int32Int32Booleanlsfitalgliblsfitstate">
            <summary>Задает оболочка совместимости lsfit.lsfitcreatewfg(Double[,] x, Double[] y, Double[] w, Double[] c, Int32 n, Int32 m, Int32 k, Boolean cheapfg, lsfitstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitcreatewfghDoubleMdArray2DoubleArrayDoubleArrayDoubleArrayInt32Int32Int32lsfitalgliblsfitstate">
            <summary>Задает оболочка совместимости lsfit.lsfitcreatewfgh(Double[,] x, Double[] y, Double[] w, Double[] c, Int32 n, Int32 m, Int32 k, lsfitstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfititerationlsfitalgliblsfitstate">
            <summary>Задает оболочка совместимости lsfit.lsfititeration(lsfitstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitlinearDoubleArrayDoubleMdArray2Int32Int32Int32RefDoubleArrayReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit.lsfitlinear(Double[] y, Double[,] fmatrix, Int32 n, Int32 m, Int32&amp; info, Double[]&amp; c, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitlinearcDoubleArrayDoubleMdArray2DoubleMdArray2Int32Int32Int32Int32RefDoubleArrayReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit.lsfitlinearc(Double[] y, Double[,] fmatrix, Double[,] cmatrix, Int32 n, Int32 m, Int32 k, Int32&amp; info, Double[]&amp; c, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitlinearinternalDoubleArrayDoubleArrayDoubleMdArray2Int32Int32Int32RefDoubleArrayReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit.lsfitlinearinternal(Double[] y, Double[] w, Double[,] fmatrix, Int32 n, Int32 m, Int32&amp; info, Double[]&amp; c, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitlinearwDoubleArrayDoubleArrayDoubleMdArray2Int32Int32Int32RefDoubleArrayReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit.lsfitlinearw(Double[] y, Double[] w, Double[,] fmatrix, Int32 n, Int32 m, Int32&amp; info, Double[]&amp; c, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitlinearwcDoubleArrayDoubleArrayDoubleMdArray2DoubleMdArray2Int32Int32Int32Int32RefDoubleArrayReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit.lsfitlinearwc(Double[] y, Double[] w, Double[,] fmatrix, Double[,] cmatrix, Int32 n, Int32 m, Int32 k, Int32&amp; info, Double[]&amp; c, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitresultslsfitalgliblsfitstateInt32RefDoubleArrayReflsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfit.lsfitresults(lsfitstate state, Int32&amp; info, Double[]&amp; c, lsfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitscalexyDoubleArrayRefDoubleArrayRefDoubleArrayRefInt32DoubleArrayRefDoubleArrayRefInt32ArrayInt32DoubleRefDoubleRefDoubleRefDoubleRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости lsfit.lsfitscalexy(Double[]&amp; x, Double[]&amp; y, Double[]&amp; w, Int32 n, Double[]&amp; xc, Double[]&amp; yc, Int32[] dc, Int32 k, Double&amp; xa, Double&amp; xb, Double&amp; sa, Double&amp; sb, Double[]&amp; xoriginal, Double[]&amp; yoriginal)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitsetbclsfitalgliblsfitstateDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости lsfit.lsfitsetbc(lsfitstate state, Double[] bndl, Double[] bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitsetcondlsfitalgliblsfitstateDoubleDoubleInt32">
            <summary>Задает оболочка совместимости lsfit.lsfitsetcond(lsfitstate state, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitsetgradientchecklsfitalgliblsfitstateDouble">
            <summary>Задает оболочка совместимости lsfit.lsfitsetgradientcheck(lsfitstate state, Double teststep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitsetscalelsfitalgliblsfitstateDoubleArray">
            <summary>Задает оболочка совместимости lsfit.lsfitsetscale(lsfitstate state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitsetstpmaxlsfitalgliblsfitstateDouble">
            <summary>Задает оболочка совместимости lsfit.lsfitsetstpmax(lsfitstate state, Double stpmax)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lsfitsetxreplsfitalgliblsfitstateBoolean">
            <summary>Задает оболочка совместимости lsfit.lsfitsetxrep(lsfitstate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lstfitpiecewiselinearrdpDoubleArrayDoubleArrayInt32DoubleDoubleArrayRefDoubleArrayRefInt32Ref">
            <summary>Задает оболочка совместимости lsfit.lstfitpiecewiselinearrdp(Double[] x, Double[] y, Int32 n, Double eps, Double[]&amp; x2, Double[]&amp; y2, Int32&amp; nsections)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.lstfitpiecewiselinearrdpfixedDoubleArrayDoubleArrayInt32Int32DoubleArrayRefDoubleArrayRefInt32Ref">
            <summary>Задает оболочка совместимости lsfit.lstfitpiecewiselinearrdpfixed(Double[] x, Double[] y, Int32 n, Int32 m, Double[]&amp; x2, Double[]&amp; y2, Int32&amp; nsections)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.polynomialfitDoubleArrayDoubleArrayInt32Int32Int32Refratintalglibbarycentricinterpolantlsfitalglibpolynomialfitreport">
            <summary>Задает оболочка совместимости lsfit.polynomialfit(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, barycentricinterpolant p, polynomialfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.polynomialfitwcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32Refratintalglibbarycentricinterpolantlsfitalglibpolynomialfitreport">
            <summary>Задает оболочка совместимости lsfit.polynomialfitwc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, barycentricinterpolant p, polynomialfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.rdpanalyzesectionDoubleArrayDoubleArrayInt32Int32Int32RefDoubleRef">
            <summary>Задает оболочка совместимости lsfit.rdpanalyzesection(Double[] x, Double[] y, Int32 i0, Int32 i1, Int32&amp; worstidx, Double&amp; worsterror)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.rdprecursiveDoubleArrayDoubleArrayInt32Int32DoubleDoubleArrayDoubleArrayInt32Ref">
            <summary>Задает оболочка совместимости lsfit.rdprecursive(Double[] x, Double[] y, Int32 i0, Int32 i1, Double eps, Double[] xout, Double[] yout, Int32&amp; nout)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.spline1dfitcubicDoubleArrayDoubleArrayInt32Int32Int32Refspline1dalglibspline1dinterpolantlsfitalglibspline1dfitreport">
            <summary>Задает оболочка совместимости lsfit.spline1dfitcubic(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, spline1dinterpolant s, spline1dfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.spline1dfitcubicwcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32Refspline1dalglibspline1dinterpolantlsfitalglibspline1dfitreport">
            <summary>Задает оболочка совместимости lsfit.spline1dfitcubicwc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, spline1dinterpolant s, spline1dfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.spline1dfithermiteDoubleArrayDoubleArrayInt32Int32Int32Refspline1dalglibspline1dinterpolantlsfitalglibspline1dfitreport">
            <summary>Задает оболочка совместимости lsfit.spline1dfithermite(Double[] x, Double[] y, Int32 n, Int32 m, Int32&amp; info, spline1dinterpolant s, spline1dfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.spline1dfithermitewcDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32Refspline1dalglibspline1dinterpolantlsfitalglibspline1dfitreport">
            <summary>Задает оболочка совместимости lsfit.spline1dfithermitewc(Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, spline1dinterpolant s, spline1dfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.spline1dfitinternalInt32DoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayDoubleArrayInt32ArrayInt32Int32Int32Refspline1dalglibspline1dinterpolantlsfitalglibspline1dfitreport">
            <summary>Задает оболочка совместимости lsfit.spline1dfitinternal(Int32 st, Double[] x, Double[] y, Double[] w, Int32 n, Double[] xc, Double[] yc, Int32[] dc, Int32 k, Int32 m, Int32&amp; info, spline1dinterpolant s, spline1dfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.spline1dfitpenalizedDoubleArrayDoubleArrayInt32Int32DoubleInt32Refspline1dalglibspline1dinterpolantlsfitalglibspline1dfitreport">
            <summary>Задает оболочка совместимости lsfit.spline1dfitpenalized(Double[] x, Double[] y, Int32 n, Int32 m, Double rho, Int32&amp; info, spline1dinterpolant s, spline1dfitreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.spline1dfitpenalizedwDoubleArrayDoubleArrayDoubleArrayInt32Int32DoubleInt32Refspline1dalglibspline1dinterpolantlsfitalglibspline1dfitreport">
            <summary>Задает оболочка совместимости lsfit.spline1dfitpenalizedw(Double[] x, Double[] y, Double[] w, Int32 n, Int32 m, Double rho, Int32&amp; info, spline1dinterpolant s, spline1dfitreport rep)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfit.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfit.Shimbarycentricfitreport">
            <summary>Тип оболочки совместимости для alglib+lsfit+barycentricfitreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimbarycentricfitreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimbarycentricfitreport.#ctor(alglib.lsfit.barycentricfitreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimbarycentricfitreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimbarycentricfitreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimbarycentricfitreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimbarycentricfitreport.Constructor">
            <summary>Задает оболочка совместимости barycentricfitreport.barycentricfitreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimbarycentricfitreport.init">
            <summary>Задает оболочка совместимости barycentricfitreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimbarycentricfitreport.make_copy">
            <summary>Задает оболочка совместимости barycentricfitreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfit.Shimbarycentricfitreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimbarycentricfitreport.AllInstances.init">
            <summary>Задает оболочка совместимости barycentricfitreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimbarycentricfitreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости barycentricfitreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitreport">
            <summary>Тип оболочки совместимости для alglib+lsfit+lsfitreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitreport.#ctor(alglib.lsfit.lsfitreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitreport.Constructor">
            <summary>Задает оболочка совместимости lsfitreport.lsfitreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitreport.init">
            <summary>Задает оболочка совместимости lsfitreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitreport.make_copy">
            <summary>Задает оболочка совместимости lsfitreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitreport.AllInstances.init">
            <summary>Задает оболочка совместимости lsfitreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости lsfitreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitstate">
            <summary>Тип оболочки совместимости для alglib+lsfit+lsfitstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitstate.#ctor(alglib.lsfit.lsfitstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitstate.Constructor">
            <summary>Задает оболочка совместимости lsfitstate.lsfitstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitstate.init">
            <summary>Задает оболочка совместимости lsfitstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitstate.make_copy">
            <summary>Задает оболочка совместимости lsfitstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitstate.AllInstances.init">
            <summary>Задает оболочка совместимости lsfitstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimlsfitstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости lsfitstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfit.Shimpolynomialfitreport">
            <summary>Тип оболочки совместимости для alglib+lsfit+polynomialfitreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimpolynomialfitreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimpolynomialfitreport.#ctor(alglib.lsfit.polynomialfitreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimpolynomialfitreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimpolynomialfitreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimpolynomialfitreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimpolynomialfitreport.Constructor">
            <summary>Задает оболочка совместимости polynomialfitreport.polynomialfitreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimpolynomialfitreport.init">
            <summary>Задает оболочка совместимости polynomialfitreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimpolynomialfitreport.make_copy">
            <summary>Задает оболочка совместимости polynomialfitreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfit.Shimpolynomialfitreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimpolynomialfitreport.AllInstances.init">
            <summary>Задает оболочка совместимости polynomialfitreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimpolynomialfitreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости polynomialfitreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfit.Shimspline1dfitreport">
            <summary>Тип оболочки совместимости для alglib+lsfit+spline1dfitreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimspline1dfitreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimspline1dfitreport.#ctor(alglib.lsfit.spline1dfitreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimspline1dfitreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfit.Shimspline1dfitreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimspline1dfitreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimspline1dfitreport.Constructor">
            <summary>Задает оболочка совместимости spline1dfitreport.spline1dfitreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimspline1dfitreport.init">
            <summary>Задает оболочка совместимости spline1dfitreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimspline1dfitreport.make_copy">
            <summary>Задает оболочка совместимости spline1dfitreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfit.Shimspline1dfitreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimspline1dfitreport.AllInstances.init">
            <summary>Задает оболочка совместимости spline1dfitreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfit.Shimspline1dfitreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости spline1dfitreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfitreport">
            <summary>Тип оболочки совместимости для alglib+lsfitreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfitreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfitreport.#ctor(alglib.lsfitreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfitreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfitreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.Constructor">
            <summary>Задает оболочка совместимости lsfitreport.lsfitreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.Constructorlsfitalgliblsfitreport">
            <summary>Задает оболочка совместимости lsfitreport.lsfitreport(lsfitreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.avgerrorGet">
            <summary>Задает оболочка совместимости lsfitreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.avgerrorSetDouble">
            <summary>Задает оболочка совместимости lsfitreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.avgrelerrorGet">
            <summary>Задает оболочка совместимости lsfitreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости lsfitreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.covparGet">
            <summary>Задает оболочка совместимости lsfitreport.get_covpar()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.covparSetDoubleMdArray2">
            <summary>Задает оболочка совместимости lsfitreport.set_covpar(Double[,] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.errcurveGet">
            <summary>Задает оболочка совместимости lsfitreport.get_errcurve()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.errcurveSetDoubleArray">
            <summary>Задает оболочка совместимости lsfitreport.set_errcurve(Double[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.errparGet">
            <summary>Задает оболочка совместимости lsfitreport.get_errpar()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.errparSetDoubleArray">
            <summary>Задает оболочка совместимости lsfitreport.set_errpar(Double[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.innerobjGet">
            <summary>Задает оболочка совместимости lsfitreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.iterationscountGet">
            <summary>Задает оболочка совместимости lsfitreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.iterationscountSetInt32">
            <summary>Задает оболочка совместимости lsfitreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.make_copy">
            <summary>Задает оболочка совместимости lsfitreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.maxerrorGet">
            <summary>Задает оболочка совместимости lsfitreport.get_maxerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.maxerrorSetDouble">
            <summary>Задает оболочка совместимости lsfitreport.set_maxerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.noiseGet">
            <summary>Задает оболочка совместимости lsfitreport.get_noise()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.noiseSetDoubleArray">
            <summary>Задает оболочка совместимости lsfitreport.set_noise(Double[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.r2Get">
            <summary>Задает оболочка совместимости lsfitreport.get_r2()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.r2SetDouble">
            <summary>Задает оболочка совместимости lsfitreport.set_r2(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.rmserrorGet">
            <summary>Задает оболочка совместимости lsfitreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.rmserrorSetDouble">
            <summary>Задает оболочка совместимости lsfitreport.set_rmserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.taskrcondGet">
            <summary>Задает оболочка совместимости lsfitreport.get_taskrcond()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.taskrcondSetDouble">
            <summary>Задает оболочка совместимости lsfitreport.set_taskrcond(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.varidxGet">
            <summary>Задает оболочка совместимости lsfitreport.get_varidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.varidxSetInt32">
            <summary>Задает оболочка совместимости lsfitreport.set_varidx(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.wrmserrorGet">
            <summary>Задает оболочка совместимости lsfitreport.get_wrmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.wrmserrorSetDouble">
            <summary>Задает оболочка совместимости lsfitreport.set_wrmserror(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.avgerrorGet">
            <summary>Задает оболочка совместимости lsfitreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.avgerrorSetDouble">
            <summary>Задает оболочка совместимости lsfitreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.avgrelerrorGet">
            <summary>Задает оболочка совместимости lsfitreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости lsfitreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.covparGet">
            <summary>Задает оболочка совместимости lsfitreport.get_covpar()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.covparSetDoubleMdArray2">
            <summary>Задает оболочка совместимости lsfitreport.set_covpar(Double[,] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.errcurveGet">
            <summary>Задает оболочка совместимости lsfitreport.get_errcurve()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.errcurveSetDoubleArray">
            <summary>Задает оболочка совместимости lsfitreport.set_errcurve(Double[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.errparGet">
            <summary>Задает оболочка совместимости lsfitreport.get_errpar()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.errparSetDoubleArray">
            <summary>Задает оболочка совместимости lsfitreport.set_errpar(Double[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости lsfitreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.iterationscountGet">
            <summary>Задает оболочка совместимости lsfitreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.iterationscountSetInt32">
            <summary>Задает оболочка совместимости lsfitreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости lsfitreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.maxerrorGet">
            <summary>Задает оболочка совместимости lsfitreport.get_maxerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.maxerrorSetDouble">
            <summary>Задает оболочка совместимости lsfitreport.set_maxerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.noiseGet">
            <summary>Задает оболочка совместимости lsfitreport.get_noise()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.noiseSetDoubleArray">
            <summary>Задает оболочка совместимости lsfitreport.set_noise(Double[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.r2Get">
            <summary>Задает оболочка совместимости lsfitreport.get_r2()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.r2SetDouble">
            <summary>Задает оболочка совместимости lsfitreport.set_r2(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.rmserrorGet">
            <summary>Задает оболочка совместимости lsfitreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.rmserrorSetDouble">
            <summary>Задает оболочка совместимости lsfitreport.set_rmserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.taskrcondGet">
            <summary>Задает оболочка совместимости lsfitreport.get_taskrcond()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.taskrcondSetDouble">
            <summary>Задает оболочка совместимости lsfitreport.set_taskrcond(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.varidxGet">
            <summary>Задает оболочка совместимости lsfitreport.get_varidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.varidxSetInt32">
            <summary>Задает оболочка совместимости lsfitreport.set_varidx(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.wrmserrorGet">
            <summary>Задает оболочка совместимости lsfitreport.get_wrmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitreport.AllInstances.wrmserrorSetDouble">
            <summary>Задает оболочка совместимости lsfitreport.set_wrmserror(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfitstate">
            <summary>Тип оболочки совместимости для alglib+lsfitstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfitstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfitstate.#ctor(alglib.lsfitstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfitstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimlsfitstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.Constructor">
            <summary>Задает оболочка совместимости lsfitstate.lsfitstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.Constructorlsfitalgliblsfitstate">
            <summary>Задает оболочка совместимости lsfitstate.lsfitstate(lsfitstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.cGet">
            <summary>Задает оболочка совместимости lsfitstate.get_c()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.fGet">
            <summary>Задает оболочка совместимости lsfitstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.fSetDouble">
            <summary>Задает оболочка совместимости lsfitstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.gGet">
            <summary>Задает оболочка совместимости lsfitstate.get_g()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.hGet">
            <summary>Задает оболочка совместимости lsfitstate.get_h()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.innerobjGet">
            <summary>Задает оболочка совместимости lsfitstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.make_copy">
            <summary>Задает оболочка совместимости lsfitstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.needfGet">
            <summary>Задает оболочка совместимости lsfitstate.get_needf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.needfSetBoolean">
            <summary>Задает оболочка совместимости lsfitstate.set_needf(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.needfgGet">
            <summary>Задает оболочка совместимости lsfitstate.get_needfg()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.needfgSetBoolean">
            <summary>Задает оболочка совместимости lsfitstate.set_needfg(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.needfghGet">
            <summary>Задает оболочка совместимости lsfitstate.get_needfgh()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.needfghSetBoolean">
            <summary>Задает оболочка совместимости lsfitstate.set_needfgh(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.xGet">
            <summary>Задает оболочка совместимости lsfitstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.xupdatedGet">
            <summary>Задает оболочка совместимости lsfitstate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости lsfitstate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.cGet">
            <summary>Задает оболочка совместимости lsfitstate.get_c()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.fGet">
            <summary>Задает оболочка совместимости lsfitstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.fSetDouble">
            <summary>Задает оболочка совместимости lsfitstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.gGet">
            <summary>Задает оболочка совместимости lsfitstate.get_g()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.hGet">
            <summary>Задает оболочка совместимости lsfitstate.get_h()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости lsfitstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости lsfitstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.needfGet">
            <summary>Задает оболочка совместимости lsfitstate.get_needf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.needfSetBoolean">
            <summary>Задает оболочка совместимости lsfitstate.set_needf(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.needfgGet">
            <summary>Задает оболочка совместимости lsfitstate.get_needfg()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.needfgSetBoolean">
            <summary>Задает оболочка совместимости lsfitstate.set_needfg(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.needfghGet">
            <summary>Задает оболочка совместимости lsfitstate.get_needfgh()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.needfghSetBoolean">
            <summary>Задает оболочка совместимости lsfitstate.set_needfgh(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.xGet">
            <summary>Задает оболочка совместимости lsfitstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.xupdatedGet">
            <summary>Задает оболочка совместимости lsfitstate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimlsfitstate.AllInstances.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости lsfitstate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmannwhitneyu">
            <summary>Тип оболочки совместимости для alglib+mannwhitneyu</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmannwhitneyu.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmannwhitneyu.#ctor(alglib.mannwhitneyu)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmannwhitneyu.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmannwhitneyu.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.Constructor">
            <summary>Задает оболочка совместимости mannwhitneyu.mannwhitneyu()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.mannwhitneyutestDoubleArrayInt32DoubleArrayInt32DoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости mannwhitneyu.mannwhitneyutest(Double[] x, Int32 n, Double[] y, Int32 m, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.uchebDoubleDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости mannwhitneyu.ucheb(Double x, Double c, Double&amp; tj, Double&amp; tj1, Double&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.uninterpolateDoubleDoubleDoubleInt32">
            <summary>Задает оболочка совместимости mannwhitneyu.uninterpolate(Double p1, Double p2, Double p3, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.usigma000Int32Int32">
            <summary>Задает оболочка совместимости mannwhitneyu.usigma000(Int32 n1, Int32 n2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.usigma075Int32Int32">
            <summary>Задает оболочка совместимости mannwhitneyu.usigma075(Int32 n1, Int32 n2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.usigma150Int32Int32">
            <summary>Задает оболочка совместимости mannwhitneyu.usigma150(Int32 n1, Int32 n2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.usigma225Int32Int32">
            <summary>Задает оболочка совместимости mannwhitneyu.usigma225(Int32 n1, Int32 n2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.usigma300Int32Int32">
            <summary>Задает оболочка совместимости mannwhitneyu.usigma300(Int32 n1, Int32 n2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.usigma333Int32Int32">
            <summary>Задает оболочка совместимости mannwhitneyu.usigma333(Int32 n1, Int32 n2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.usigma367Int32Int32">
            <summary>Задает оболочка совместимости mannwhitneyu.usigma367(Int32 n1, Int32 n2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.usigma400Int32Int32">
            <summary>Задает оболочка совместимости mannwhitneyu.usigma400(Int32 n1, Int32 n2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.usigmaDoubleInt32Int32">
            <summary>Задает оболочка совместимости mannwhitneyu.usigma(Double s, Int32 n1, Int32 n2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln10n100Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln10n100(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln10n10Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln10n10(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln10n11Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln10n11(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln10n12Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln10n12(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln10n13Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln10n13(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln10n14Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln10n14(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln10n15Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln10n15(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln10n30Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln10n30(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln11n100Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln11n100(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln11n11Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln11n11(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln11n12Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln11n12(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln11n13Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln11n13(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln11n14Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln11n14(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln11n15Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln11n15(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln11n30Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln11n30(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln12n100Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln12n100(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln12n12Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln12n12(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln12n13Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln12n13(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln12n14Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln12n14(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln12n15Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln12n15(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln12n30Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln12n30(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln13n100Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln13n100(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln13n13Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln13n13(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln13n14Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln13n14(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln13n15Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln13n15(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln13n30Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln13n30(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln14n100Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln14n100(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln14n14Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln14n14(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln14n15Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln14n15(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln14n30Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln14n30(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n100Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n100(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n10Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n10(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n11Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n11(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n12Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n12(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n13Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n13(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n14Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n14(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n15Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n15(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n16Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n16(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n17Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n17(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n18Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n18(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n19Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n19(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n20Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n20(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n21Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n21(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n22Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n22(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n23Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n23(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n24Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n24(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n25Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n25(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n26Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n26(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n27Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n27(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n28Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n28(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n29Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n29(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n30Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n30(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n5Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n5(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n6Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n6(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n7Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n7(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n8Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n8(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln5n9Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln5n9(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln6n100Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln6n100(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln6n10Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln6n10(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln6n11Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln6n11(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln6n12Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln6n12(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln6n13Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln6n13(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln6n14Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln6n14(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln6n15Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln6n15(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln6n30Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln6n30(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln6n6Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln6n6(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln6n7Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln6n7(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln6n8Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln6n8(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln6n9Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln6n9(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln7n100Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln7n100(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln7n10Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln7n10(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln7n11Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln7n11(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln7n12Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln7n12(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln7n13Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln7n13(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln7n14Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln7n14(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln7n15Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln7n15(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln7n30Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln7n30(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln7n7Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln7n7(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln7n8Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln7n8(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln7n9Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln7n9(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln8n100Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln8n100(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln8n10Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln8n10(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln8n11Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln8n11(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln8n12Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln8n12(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln8n13Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln8n13(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln8n14Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln8n14(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln8n15Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln8n15(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln8n30Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln8n30(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln8n8Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln8n8(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln8n9Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln8n9(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln9n100Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln9n100(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln9n10Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln9n10(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln9n11Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln9n11(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln9n12Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln9n12(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln9n13Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln9n13(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln9n14Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln9n14(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln9n15Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln9n15(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln9n30Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln9n30(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmannwhitneyu.utbln9n9Double">
            <summary>Задает оболочка совместимости mannwhitneyu.utbln9n9(Double s)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmannwhitneyu.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmatdet">
            <summary>Тип оболочки совместимости для alglib+matdet</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatdet.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatdet.#ctor(alglib.matdet)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatdet.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatdet.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatdet.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatdet.Constructor">
            <summary>Задает оболочка совместимости matdet.matdet()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatdet.cmatrixdetalglibcomplexMdArray2Int32">
            <summary>Задает оболочка совместимости matdet.cmatrixdet(complex[,] a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatdet.cmatrixludetalglibcomplexMdArray2Int32ArrayInt32">
            <summary>Задает оболочка совместимости matdet.cmatrixludet(complex[,] a, Int32[] pivots, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatdet.rmatrixdetDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости matdet.rmatrixdet(Double[,] a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatdet.rmatrixludetDoubleMdArray2Int32ArrayInt32">
            <summary>Задает оболочка совместимости matdet.rmatrixludet(Double[,] a, Int32[] pivots, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatdet.spdmatrixcholeskydetDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости matdet.spdmatrixcholeskydet(Double[,] a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatdet.spdmatrixdetDoubleMdArray2Int32Boolean">
            <summary>Задает оболочка совместимости matdet.spdmatrixdet(Double[,] a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmatdet.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmatgen">
            <summary>Тип оболочки совместимости для alglib+matgen</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatgen.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatgen.#ctor(alglib.matgen)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatgen.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatgen.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.Constructor">
            <summary>Задает оболочка совместимости matgen.matgen()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.cmatrixrndcondInt32DoublealglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости matgen.cmatrixrndcond(Int32 n, Double c, complex[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.cmatrixrndorthogonalInt32alglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости matgen.cmatrixrndorthogonal(Int32 n, complex[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.cmatrixrndorthogonalfromtheleftalglibcomplexMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости matgen.cmatrixrndorthogonalfromtheleft(complex[,]&amp; a, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.cmatrixrndorthogonalfromtherightalglibcomplexMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости matgen.cmatrixrndorthogonalfromtheright(complex[,]&amp; a, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.hmatrixrndcondInt32DoublealglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости matgen.hmatrixrndcond(Int32 n, Double c, complex[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.hmatrixrndmultiplyalglibcomplexMdArray2RefInt32">
            <summary>Задает оболочка совместимости matgen.hmatrixrndmultiply(complex[,]&amp; a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.hpdmatrixrndcondInt32DoublealglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости matgen.hpdmatrixrndcond(Int32 n, Double c, complex[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.rmatrixrndcondInt32DoubleDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости matgen.rmatrixrndcond(Int32 n, Double c, Double[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.rmatrixrndorthogonalInt32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости matgen.rmatrixrndorthogonal(Int32 n, Double[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.rmatrixrndorthogonalfromtheleftDoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости matgen.rmatrixrndorthogonalfromtheleft(Double[,]&amp; a, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.rmatrixrndorthogonalfromtherightDoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости matgen.rmatrixrndorthogonalfromtheright(Double[,]&amp; a, Int32 m, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.smatrixrndcondInt32DoubleDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости matgen.smatrixrndcond(Int32 n, Double c, Double[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.smatrixrndmultiplyDoubleMdArray2RefInt32">
            <summary>Задает оболочка совместимости matgen.smatrixrndmultiply(Double[,]&amp; a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatgen.spdmatrixrndcondInt32DoubleDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости matgen.spdmatrixrndcond(Int32 n, Double c, Double[,]&amp; a)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmatgen.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmath">
            <summary>Тип оболочки совместимости для alglib+math</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmath.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmath.#ctor(alglib.math)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmath.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmath.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmath.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmath.Constructor">
            <summary>Задает оболочка совместимости math.math()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmath.StaticConstructor">
            <summary>Задает оболочка совместимости math.math()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmath.abscomplexalglibcomplex">
            <summary>Задает оболочка совместимости math.abscomplex(complex z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmath.conjalglibcomplex">
            <summary>Задает оболочка совместимости math.conj(complex z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmath.csqralglibcomplex">
            <summary>Задает оболочка совместимости math.csqr(complex z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmath.isfiniteDouble">
            <summary>Задает оболочка совместимости math.isfinite(Double d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmath.randomintegerInt32">
            <summary>Задает оболочка совместимости math.randominteger(Int32 N)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmath.randomreal">
            <summary>Задает оболочка совместимости math.randomreal()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmath.sqrDouble">
            <summary>Задает оболочка совместимости math.sqr(Double X)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmath.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmatinv">
            <summary>Тип оболочки совместимости для alglib+matinv</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatinv.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatinv.#ctor(alglib.matinv)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatinv.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatinv.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.Constructor">
            <summary>Задает оболочка совместимости matinv.matinv()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv._pexec_cmatrixinversealglibcomplexMdArray2RefInt32Int32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv._pexec_cmatrixinverse(complex[,]&amp; a, Int32 n, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv._pexec_cmatrixluinversealglibcomplexMdArray2RefInt32ArrayInt32Int32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv._pexec_cmatrixluinverse(complex[,]&amp; a, Int32[] pivots, Int32 n, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv._pexec_cmatrixtrinversealglibcomplexMdArray2RefInt32BooleanBooleanInt32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv._pexec_cmatrixtrinverse(complex[,]&amp; a, Int32 n, Boolean isupper, Boolean isunit, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv._pexec_hpdmatrixcholeskyinversealglibcomplexMdArray2RefInt32BooleanInt32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv._pexec_hpdmatrixcholeskyinverse(complex[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv._pexec_hpdmatrixinversealglibcomplexMdArray2RefInt32BooleanInt32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv._pexec_hpdmatrixinverse(complex[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv._pexec_rmatrixinverseDoubleMdArray2RefInt32Int32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv._pexec_rmatrixinverse(Double[,]&amp; a, Int32 n, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv._pexec_rmatrixluinverseDoubleMdArray2RefInt32ArrayInt32Int32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv._pexec_rmatrixluinverse(Double[,]&amp; a, Int32[] pivots, Int32 n, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv._pexec_rmatrixtrinverseDoubleMdArray2RefInt32BooleanBooleanInt32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv._pexec_rmatrixtrinverse(Double[,]&amp; a, Int32 n, Boolean isupper, Boolean isunit, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv._pexec_spdmatrixcholeskyinverseDoubleMdArray2RefInt32BooleanInt32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv._pexec_spdmatrixcholeskyinverse(Double[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv._pexec_spdmatrixinverseDoubleMdArray2RefInt32BooleanInt32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv._pexec_spdmatrixinverse(Double[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.cmatrixinversealglibcomplexMdArray2RefInt32Int32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv.cmatrixinverse(complex[,]&amp; a, Int32 n, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.cmatrixluinversealglibcomplexMdArray2RefInt32ArrayInt32Int32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv.cmatrixluinverse(complex[,]&amp; a, Int32[] pivots, Int32 n, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.cmatrixluinverserecalglibcomplexMdArray2RefInt32Int32alglibcomplexArrayRefInt32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv.cmatrixluinverserec(complex[,]&amp; a, Int32 offs, Int32 n, complex[]&amp; work, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.cmatrixtrinversealglibcomplexMdArray2RefInt32BooleanBooleanInt32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv.cmatrixtrinverse(complex[,]&amp; a, Int32 n, Boolean isupper, Boolean isunit, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.cmatrixtrinverserecalglibcomplexMdArray2RefInt32Int32BooleanBooleanalglibcomplexArrayRefInt32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv.cmatrixtrinverserec(complex[,]&amp; a, Int32 offs, Int32 n, Boolean isupper, Boolean isunit, complex[]&amp; tmp, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.hpdmatrixcholeskyinversealglibcomplexMdArray2RefInt32BooleanInt32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv.hpdmatrixcholeskyinverse(complex[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.hpdmatrixcholeskyinverserecalglibcomplexMdArray2RefInt32Int32BooleanalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости matinv.hpdmatrixcholeskyinverserec(complex[,]&amp; a, Int32 offs, Int32 n, Boolean isupper, complex[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.hpdmatrixinversealglibcomplexMdArray2RefInt32BooleanInt32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv.hpdmatrixinverse(complex[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.rmatrixinverseDoubleMdArray2RefInt32Int32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv.rmatrixinverse(Double[,]&amp; a, Int32 n, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.rmatrixluinverseDoubleMdArray2RefInt32ArrayInt32Int32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv.rmatrixluinverse(Double[,]&amp; a, Int32[] pivots, Int32 n, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.rmatrixluinverserecDoubleMdArray2RefInt32Int32DoubleArrayRefapservalglibsintegermatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv.rmatrixluinverserec(Double[,]&amp; a, Int32 offs, Int32 n, Double[]&amp; work, sinteger info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.rmatrixtrinverseDoubleMdArray2RefInt32BooleanBooleanInt32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv.rmatrixtrinverse(Double[,]&amp; a, Int32 n, Boolean isupper, Boolean isunit, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.rmatrixtrinverserecDoubleMdArray2Int32Int32BooleanBooleanDoubleArrayapservalglibsintegermatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv.rmatrixtrinverserec(Double[,] a, Int32 offs, Int32 n, Boolean isupper, Boolean isunit, Double[] tmp, sinteger info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.spdmatrixcholeskyinverseDoubleMdArray2RefInt32BooleanInt32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv.spdmatrixcholeskyinverse(Double[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.spdmatrixcholeskyinverserecDoubleMdArray2RefInt32Int32BooleanDoubleArrayRef">
            <summary>Задает оболочка совместимости matinv.spdmatrixcholeskyinverserec(Double[,]&amp; a, Int32 offs, Int32 n, Boolean isupper, Double[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.spdmatrixinverseDoubleMdArray2RefInt32BooleanInt32Refmatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinv.spdmatrixinverse(Double[,]&amp; a, Int32 n, Boolean isupper, Int32&amp; info, matinvreport rep)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmatinv.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmatinv.Shimmatinvreport">
            <summary>Тип оболочки совместимости для alglib+matinv+matinvreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatinv.Shimmatinvreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatinv.Shimmatinvreport.#ctor(alglib.matinv.matinvreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatinv.Shimmatinvreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatinv.Shimmatinvreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.Shimmatinvreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.Shimmatinvreport.Constructor">
            <summary>Задает оболочка совместимости matinvreport.matinvreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.Shimmatinvreport.init">
            <summary>Задает оболочка совместимости matinvreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.Shimmatinvreport.make_copy">
            <summary>Задает оболочка совместимости matinvreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmatinv.Shimmatinvreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.Shimmatinvreport.AllInstances.init">
            <summary>Задает оболочка совместимости matinvreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinv.Shimmatinvreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости matinvreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmatinvreport">
            <summary>Тип оболочки совместимости для alglib+matinvreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatinvreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatinvreport.#ctor(alglib.matinvreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatinvreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmatinvreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinvreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinvreport.Constructor">
            <summary>Задает оболочка совместимости matinvreport.matinvreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinvreport.Constructormatinvalglibmatinvreport">
            <summary>Задает оболочка совместимости matinvreport.matinvreport(matinvreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinvreport.innerobjGet">
            <summary>Задает оболочка совместимости matinvreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinvreport.make_copy">
            <summary>Задает оболочка совместимости matinvreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinvreport.r1Get">
            <summary>Задает оболочка совместимости matinvreport.get_r1()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinvreport.r1SetDouble">
            <summary>Задает оболочка совместимости matinvreport.set_r1(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinvreport.rinfGet">
            <summary>Задает оболочка совместимости matinvreport.get_rinf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinvreport.rinfSetDouble">
            <summary>Задает оболочка совместимости matinvreport.set_rinf(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmatinvreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinvreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости matinvreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinvreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости matinvreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinvreport.AllInstances.r1Get">
            <summary>Задает оболочка совместимости matinvreport.get_r1()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinvreport.AllInstances.r1SetDouble">
            <summary>Задает оболочка совместимости matinvreport.set_r1(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinvreport.AllInstances.rinfGet">
            <summary>Задает оболочка совместимости matinvreport.get_rinf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmatinvreport.AllInstances.rinfSetDouble">
            <summary>Задает оболочка совместимости matinvreport.set_rinf(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmcpd">
            <summary>Тип оболочки совместимости для alglib+mcpd</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpd.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpd.#ctor(alglib.mcpd)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpd.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpd.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.Constructor">
            <summary>Задает оболочка совместимости mcpd.mcpd()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdaddbcmcpdalglibmcpdstateInt32Int32DoubleDouble">
            <summary>Задает оболочка совместимости mcpd.mcpdaddbc(mcpdstate s, Int32 i, Int32 j, Double bndl, Double bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdaddecmcpdalglibmcpdstateInt32Int32Double">
            <summary>Задает оболочка совместимости mcpd.mcpdaddec(mcpdstate s, Int32 i, Int32 j, Double c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdaddtrackmcpdalglibmcpdstateDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mcpd.mcpdaddtrack(mcpdstate s, Double[,] xy, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdcreateInt32mcpdalglibmcpdstate">
            <summary>Задает оболочка совместимости mcpd.mcpdcreate(Int32 n, mcpdstate s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdcreateentryInt32Int32mcpdalglibmcpdstate">
            <summary>Задает оболочка совместимости mcpd.mcpdcreateentry(Int32 n, Int32 entrystate, mcpdstate s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdcreateentryexitInt32Int32Int32mcpdalglibmcpdstate">
            <summary>Задает оболочка совместимости mcpd.mcpdcreateentryexit(Int32 n, Int32 entrystate, Int32 exitstate, mcpdstate s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdcreateexitInt32Int32mcpdalglibmcpdstate">
            <summary>Задает оболочка совместимости mcpd.mcpdcreateexit(Int32 n, Int32 exitstate, mcpdstate s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdinitInt32Int32Int32mcpdalglibmcpdstate">
            <summary>Задает оболочка совместимости mcpd.mcpdinit(Int32 n, Int32 entrystate, Int32 exitstate, mcpdstate s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdresultsmcpdalglibmcpdstateDoubleMdArray2Refmcpdalglibmcpdreport">
            <summary>Задает оболочка совместимости mcpd.mcpdresults(mcpdstate s, Double[,]&amp; p, mcpdreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdsetbcmcpdalglibmcpdstateDoubleMdArray2DoubleMdArray2">
            <summary>Задает оболочка совместимости mcpd.mcpdsetbc(mcpdstate s, Double[,] bndl, Double[,] bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdsetecmcpdalglibmcpdstateDoubleMdArray2">
            <summary>Задает оболочка совместимости mcpd.mcpdsetec(mcpdstate s, Double[,] ec)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdsetlcmcpdalglibmcpdstateDoubleMdArray2Int32ArrayInt32">
            <summary>Задает оболочка совместимости mcpd.mcpdsetlc(mcpdstate s, Double[,] c, Int32[] ct, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdsetpredictionweightsmcpdalglibmcpdstateDoubleArray">
            <summary>Задает оболочка совместимости mcpd.mcpdsetpredictionweights(mcpdstate s, Double[] pw)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdsetpriormcpdalglibmcpdstateDoubleMdArray2">
            <summary>Задает оболочка совместимости mcpd.mcpdsetprior(mcpdstate s, Double[,] pp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdsettikhonovregularizermcpdalglibmcpdstateDouble">
            <summary>Задает оболочка совместимости mcpd.mcpdsettikhonovregularizer(mcpdstate s, Double v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.mcpdsolvemcpdalglibmcpdstate">
            <summary>Задает оболочка совместимости mcpd.mcpdsolve(mcpdstate s)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmcpd.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdreport">
            <summary>Тип оболочки совместимости для alglib+mcpd+mcpdreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdreport.#ctor(alglib.mcpd.mcpdreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdreport.Constructor">
            <summary>Задает оболочка совместимости mcpdreport.mcpdreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdreport.init">
            <summary>Задает оболочка совместимости mcpdreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdreport.make_copy">
            <summary>Задает оболочка совместимости mcpdreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdreport.AllInstances.init">
            <summary>Задает оболочка совместимости mcpdreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mcpdreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdstate">
            <summary>Тип оболочки совместимости для alglib+mcpd+mcpdstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdstate.#ctor(alglib.mcpd.mcpdstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdstate.Constructor">
            <summary>Задает оболочка совместимости mcpdstate.mcpdstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdstate.init">
            <summary>Задает оболочка совместимости mcpdstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdstate.make_copy">
            <summary>Задает оболочка совместимости mcpdstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdstate.AllInstances.init">
            <summary>Задает оболочка совместимости mcpdstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpd.Shimmcpdstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mcpdstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmcpdreport">
            <summary>Тип оболочки совместимости для alglib+mcpdreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpdreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpdreport.#ctor(alglib.mcpdreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpdreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpdreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.Constructor">
            <summary>Задает оболочка совместимости mcpdreport.mcpdreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.Constructormcpdalglibmcpdreport">
            <summary>Задает оболочка совместимости mcpdreport.mcpdreport(mcpdreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.inneriterationscountGet">
            <summary>Задает оболочка совместимости mcpdreport.get_inneriterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.inneriterationscountSetInt32">
            <summary>Задает оболочка совместимости mcpdreport.set_inneriterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.innerobjGet">
            <summary>Задает оболочка совместимости mcpdreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.make_copy">
            <summary>Задает оболочка совместимости mcpdreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.nfevGet">
            <summary>Задает оболочка совместимости mcpdreport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.nfevSetInt32">
            <summary>Задает оболочка совместимости mcpdreport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.outeriterationscountGet">
            <summary>Задает оболочка совместимости mcpdreport.get_outeriterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.outeriterationscountSetInt32">
            <summary>Задает оболочка совместимости mcpdreport.set_outeriterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.terminationtypeGet">
            <summary>Задает оболочка совместимости mcpdreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости mcpdreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmcpdreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.AllInstances.inneriterationscountGet">
            <summary>Задает оболочка совместимости mcpdreport.get_inneriterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.AllInstances.inneriterationscountSetInt32">
            <summary>Задает оболочка совместимости mcpdreport.set_inneriterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости mcpdreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mcpdreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.AllInstances.nfevGet">
            <summary>Задает оболочка совместимости mcpdreport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.AllInstances.nfevSetInt32">
            <summary>Задает оболочка совместимости mcpdreport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.AllInstances.outeriterationscountGet">
            <summary>Задает оболочка совместимости mcpdreport.get_outeriterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.AllInstances.outeriterationscountSetInt32">
            <summary>Задает оболочка совместимости mcpdreport.set_outeriterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.AllInstances.terminationtypeGet">
            <summary>Задает оболочка совместимости mcpdreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdreport.AllInstances.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости mcpdreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmcpdstate">
            <summary>Тип оболочки совместимости для alglib+mcpdstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpdstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpdstate.#ctor(alglib.mcpdstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpdstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmcpdstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdstate.Constructor">
            <summary>Задает оболочка совместимости mcpdstate.mcpdstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdstate.Constructormcpdalglibmcpdstate">
            <summary>Задает оболочка совместимости mcpdstate.mcpdstate(mcpdstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdstate.innerobjGet">
            <summary>Задает оболочка совместимости mcpdstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdstate.make_copy">
            <summary>Задает оболочка совместимости mcpdstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmcpdstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости mcpdstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmcpdstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mcpdstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminasareport">
            <summary>Тип оболочки совместимости для alglib+minasareport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminasareport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminasareport.#ctor(alglib.minasareport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminasareport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminasareport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.Constructor">
            <summary>Задает оболочка совместимости minasareport.minasareport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.Constructormincompalglibminasareport">
            <summary>Задает оболочка совместимости minasareport.minasareport(minasareport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.activeconstraintsGet">
            <summary>Задает оболочка совместимости minasareport.get_activeconstraints()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.activeconstraintsSetInt32">
            <summary>Задает оболочка совместимости minasareport.set_activeconstraints(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.innerobjGet">
            <summary>Задает оболочка совместимости minasareport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.iterationscountGet">
            <summary>Задает оболочка совместимости minasareport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.iterationscountSetInt32">
            <summary>Задает оболочка совместимости minasareport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.make_copy">
            <summary>Задает оболочка совместимости minasareport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.nfevGet">
            <summary>Задает оболочка совместимости minasareport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.nfevSetInt32">
            <summary>Задает оболочка совместимости minasareport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.terminationtypeGet">
            <summary>Задает оболочка совместимости minasareport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости minasareport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminasareport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.AllInstances.activeconstraintsGet">
            <summary>Задает оболочка совместимости minasareport.get_activeconstraints()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.AllInstances.activeconstraintsSetInt32">
            <summary>Задает оболочка совместимости minasareport.set_activeconstraints(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости minasareport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.AllInstances.iterationscountGet">
            <summary>Задает оболочка совместимости minasareport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.AllInstances.iterationscountSetInt32">
            <summary>Задает оболочка совместимости minasareport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minasareport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.AllInstances.nfevGet">
            <summary>Задает оболочка совместимости minasareport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.AllInstances.nfevSetInt32">
            <summary>Задает оболочка совместимости minasareport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.AllInstances.terminationtypeGet">
            <summary>Задает оболочка совместимости minasareport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasareport.AllInstances.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости minasareport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminasastate">
            <summary>Тип оболочки совместимости для alglib+minasastate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminasastate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminasastate.#ctor(alglib.minasastate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminasastate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminasastate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.Constructor">
            <summary>Задает оболочка совместимости minasastate.minasastate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.Constructormincompalglibminasastate">
            <summary>Задает оболочка совместимости minasastate.minasastate(minasastate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.fGet">
            <summary>Задает оболочка совместимости minasastate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.fSetDouble">
            <summary>Задает оболочка совместимости minasastate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.gGet">
            <summary>Задает оболочка совместимости minasastate.get_g()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.innerobjGet">
            <summary>Задает оболочка совместимости minasastate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.make_copy">
            <summary>Задает оболочка совместимости minasastate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.needfgGet">
            <summary>Задает оболочка совместимости minasastate.get_needfg()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.needfgSetBoolean">
            <summary>Задает оболочка совместимости minasastate.set_needfg(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.xGet">
            <summary>Задает оболочка совместимости minasastate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.xupdatedGet">
            <summary>Задает оболочка совместимости minasastate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости minasastate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminasastate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.AllInstances.fGet">
            <summary>Задает оболочка совместимости minasastate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.AllInstances.fSetDouble">
            <summary>Задает оболочка совместимости minasastate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.AllInstances.gGet">
            <summary>Задает оболочка совместимости minasastate.get_g()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости minasastate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minasastate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.AllInstances.needfgGet">
            <summary>Задает оболочка совместимости minasastate.get_needfg()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.AllInstances.needfgSetBoolean">
            <summary>Задает оболочка совместимости minasastate.set_needfg(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.AllInstances.xGet">
            <summary>Задает оболочка совместимости minasastate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.AllInstances.xupdatedGet">
            <summary>Задает оболочка совместимости minasastate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminasastate.AllInstances.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости minasastate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminbleic">
            <summary>Тип оболочки совместимости для alglib+minbleic</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleic.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleic.#ctor(alglib.minbleic)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleic.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleic.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.Constructor">
            <summary>Задает оболочка совместимости minbleic.minbleic()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.clearrequestfieldsminbleicalglibminbleicstate">
            <summary>Задает оболочка совместимости minbleic.clearrequestfields(minbleicstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleiccreateInt32DoubleArrayminbleicalglibminbleicstate">
            <summary>Задает оболочка совместимости minbleic.minbleiccreate(Int32 n, Double[] x, minbleicstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleiccreatefInt32DoubleArrayDoubleminbleicalglibminbleicstate">
            <summary>Задает оболочка совместимости minbleic.minbleiccreatef(Int32 n, Double[] x, Double diffstep, minbleicstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicemergencyterminationminbleicalglibminbleicstate">
            <summary>Задает оболочка совместимости minbleic.minbleicemergencytermination(minbleicstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicinitinternalInt32DoubleArrayDoubleminbleicalglibminbleicstate">
            <summary>Задает оболочка совместимости minbleic.minbleicinitinternal(Int32 n, Double[] x, Double diffstep, minbleicstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleiciterationminbleicalglibminbleicstate">
            <summary>Задает оболочка совместимости minbleic.minbleiciteration(minbleicstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicrequestterminationminbleicalglibminbleicstate">
            <summary>Задает оболочка совместимости minbleic.minbleicrequesttermination(minbleicstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicrestartfromminbleicalglibminbleicstateDoubleArray">
            <summary>Задает оболочка совместимости minbleic.minbleicrestartfrom(minbleicstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicresultsbufminbleicalglibminbleicstateDoubleArrayRefminbleicalglibminbleicreport">
            <summary>Задает оболочка совместимости minbleic.minbleicresultsbuf(minbleicstate state, Double[]&amp; x, minbleicreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicresultsminbleicalglibminbleicstateDoubleArrayRefminbleicalglibminbleicreport">
            <summary>Задает оболочка совместимости minbleic.minbleicresults(minbleicstate state, Double[]&amp; x, minbleicreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicsetbcminbleicalglibminbleicstateDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости minbleic.minbleicsetbc(minbleicstate state, Double[] bndl, Double[] bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicsetcondminbleicalglibminbleicstateDoubleDoubleDoubleInt32">
            <summary>Задает оболочка совместимости minbleic.minbleicsetcond(minbleicstate state, Double epsg, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicsetdrepminbleicalglibminbleicstateBoolean">
            <summary>Задает оболочка совместимости minbleic.minbleicsetdrep(minbleicstate state, Boolean needdrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicsetgradientcheckminbleicalglibminbleicstateDouble">
            <summary>Задает оболочка совместимости minbleic.minbleicsetgradientcheck(minbleicstate state, Double teststep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicsetlcminbleicalglibminbleicstateDoubleMdArray2Int32ArrayInt32">
            <summary>Задает оболочка совместимости minbleic.minbleicsetlc(minbleicstate state, Double[,] c, Int32[] ct, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicsetprecdefaultminbleicalglibminbleicstate">
            <summary>Задает оболочка совместимости minbleic.minbleicsetprecdefault(minbleicstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicsetprecdiagminbleicalglibminbleicstateDoubleArray">
            <summary>Задает оболочка совместимости minbleic.minbleicsetprecdiag(minbleicstate state, Double[] d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicsetprecscaleminbleicalglibminbleicstate">
            <summary>Задает оболочка совместимости minbleic.minbleicsetprecscale(minbleicstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicsetscaleminbleicalglibminbleicstateDoubleArray">
            <summary>Задает оболочка совместимости minbleic.minbleicsetscale(minbleicstate state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicsetstpmaxminbleicalglibminbleicstateDouble">
            <summary>Задает оболочка совместимости minbleic.minbleicsetstpmax(minbleicstate state, Double stpmax)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.minbleicsetxrepminbleicalglibminbleicstateBoolean">
            <summary>Задает оболочка совместимости minbleic.minbleicsetxrep(minbleicstate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.updateestimateofgoodstepDoubleRefDouble">
            <summary>Задает оболочка совместимости minbleic.updateestimateofgoodstep(Double&amp; estimate, Double newstep)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminbleic.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicreport">
            <summary>Тип оболочки совместимости для alglib+minbleic+minbleicreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicreport.#ctor(alglib.minbleic.minbleicreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicreport.Constructor">
            <summary>Задает оболочка совместимости minbleicreport.minbleicreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicreport.init">
            <summary>Задает оболочка совместимости minbleicreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicreport.make_copy">
            <summary>Задает оболочка совместимости minbleicreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicreport.AllInstances.init">
            <summary>Задает оболочка совместимости minbleicreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minbleicreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicstate">
            <summary>Тип оболочки совместимости для alglib+minbleic+minbleicstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicstate.#ctor(alglib.minbleic.minbleicstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicstate.Constructor">
            <summary>Задает оболочка совместимости minbleicstate.minbleicstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicstate.init">
            <summary>Задает оболочка совместимости minbleicstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicstate.make_copy">
            <summary>Задает оболочка совместимости minbleicstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicstate.AllInstances.init">
            <summary>Задает оболочка совместимости minbleicstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleic.Shimminbleicstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minbleicstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminbleicreport">
            <summary>Тип оболочки совместимости для alglib+minbleicreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleicreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleicreport.#ctor(alglib.minbleicreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleicreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleicreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.Constructor">
            <summary>Задает оболочка совместимости minbleicreport.minbleicreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.Constructorminbleicalglibminbleicreport">
            <summary>Задает оболочка совместимости minbleicreport.minbleicreport(minbleicreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.debugdxGet">
            <summary>Задает оболочка совместимости minbleicreport.get_debugdx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.debugdxSetDouble">
            <summary>Задает оболочка совместимости minbleicreport.set_debugdx(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.debugeqerrGet">
            <summary>Задает оболочка совместимости minbleicreport.get_debugeqerr()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.debugeqerrSetDouble">
            <summary>Задает оболочка совместимости minbleicreport.set_debugeqerr(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.debugfeasgpaitsGet">
            <summary>Задает оболочка совместимости minbleicreport.get_debugfeasgpaits()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.debugfeasgpaitsSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_debugfeasgpaits(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.debugfeasqpitsGet">
            <summary>Задает оболочка совместимости minbleicreport.get_debugfeasqpits()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.debugfeasqpitsSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_debugfeasqpits(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.debugffGet">
            <summary>Задает оболочка совместимости minbleicreport.get_debugff()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.debugffSetDouble">
            <summary>Задает оболочка совместимости minbleicreport.set_debugff(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.debugfsGet">
            <summary>Задает оболочка совместимости minbleicreport.get_debugfs()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.debugfsSetDouble">
            <summary>Задает оболочка совместимости minbleicreport.set_debugfs(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.inneriterationscountGet">
            <summary>Задает оболочка совместимости minbleicreport.get_inneriterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.inneriterationscountSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_inneriterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.innerobjGet">
            <summary>Задает оболочка совместимости minbleicreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.iterationscountGet">
            <summary>Задает оболочка совместимости minbleicreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.iterationscountSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.make_copy">
            <summary>Задает оболочка совместимости minbleicreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.nfevGet">
            <summary>Задает оболочка совместимости minbleicreport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.nfevSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.outeriterationscountGet">
            <summary>Задает оболочка совместимости minbleicreport.get_outeriterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.outeriterationscountSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_outeriterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.terminationtypeGet">
            <summary>Задает оболочка совместимости minbleicreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.varidxGet">
            <summary>Задает оболочка совместимости minbleicreport.get_varidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.varidxSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_varidx(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.debugdxGet">
            <summary>Задает оболочка совместимости minbleicreport.get_debugdx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.debugdxSetDouble">
            <summary>Задает оболочка совместимости minbleicreport.set_debugdx(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.debugeqerrGet">
            <summary>Задает оболочка совместимости minbleicreport.get_debugeqerr()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.debugeqerrSetDouble">
            <summary>Задает оболочка совместимости minbleicreport.set_debugeqerr(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.debugfeasgpaitsGet">
            <summary>Задает оболочка совместимости minbleicreport.get_debugfeasgpaits()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.debugfeasgpaitsSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_debugfeasgpaits(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.debugfeasqpitsGet">
            <summary>Задает оболочка совместимости minbleicreport.get_debugfeasqpits()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.debugfeasqpitsSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_debugfeasqpits(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.debugffGet">
            <summary>Задает оболочка совместимости minbleicreport.get_debugff()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.debugffSetDouble">
            <summary>Задает оболочка совместимости minbleicreport.set_debugff(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.debugfsGet">
            <summary>Задает оболочка совместимости minbleicreport.get_debugfs()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.debugfsSetDouble">
            <summary>Задает оболочка совместимости minbleicreport.set_debugfs(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.inneriterationscountGet">
            <summary>Задает оболочка совместимости minbleicreport.get_inneriterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.inneriterationscountSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_inneriterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости minbleicreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.iterationscountGet">
            <summary>Задает оболочка совместимости minbleicreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.iterationscountSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minbleicreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.nfevGet">
            <summary>Задает оболочка совместимости minbleicreport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.nfevSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.outeriterationscountGet">
            <summary>Задает оболочка совместимости minbleicreport.get_outeriterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.outeriterationscountSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_outeriterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.terminationtypeGet">
            <summary>Задает оболочка совместимости minbleicreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.varidxGet">
            <summary>Задает оболочка совместимости minbleicreport.get_varidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicreport.AllInstances.varidxSetInt32">
            <summary>Задает оболочка совместимости minbleicreport.set_varidx(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminbleicstate">
            <summary>Тип оболочки совместимости для alglib+minbleicstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleicstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleicstate.#ctor(alglib.minbleicstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleicstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminbleicstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.Constructor">
            <summary>Задает оболочка совместимости minbleicstate.minbleicstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.Constructorminbleicalglibminbleicstate">
            <summary>Задает оболочка совместимости minbleicstate.minbleicstate(minbleicstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.fGet">
            <summary>Задает оболочка совместимости minbleicstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.fSetDouble">
            <summary>Задает оболочка совместимости minbleicstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.gGet">
            <summary>Задает оболочка совместимости minbleicstate.get_g()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.innerobjGet">
            <summary>Задает оболочка совместимости minbleicstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.make_copy">
            <summary>Задает оболочка совместимости minbleicstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.needfGet">
            <summary>Задает оболочка совместимости minbleicstate.get_needf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.needfSetBoolean">
            <summary>Задает оболочка совместимости minbleicstate.set_needf(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.needfgGet">
            <summary>Задает оболочка совместимости minbleicstate.get_needfg()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.needfgSetBoolean">
            <summary>Задает оболочка совместимости minbleicstate.set_needfg(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.xGet">
            <summary>Задает оболочка совместимости minbleicstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.xupdatedGet">
            <summary>Задает оболочка совместимости minbleicstate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости minbleicstate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminbleicstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.AllInstances.fGet">
            <summary>Задает оболочка совместимости minbleicstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.AllInstances.fSetDouble">
            <summary>Задает оболочка совместимости minbleicstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.AllInstances.gGet">
            <summary>Задает оболочка совместимости minbleicstate.get_g()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости minbleicstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minbleicstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.AllInstances.needfGet">
            <summary>Задает оболочка совместимости minbleicstate.get_needf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.AllInstances.needfSetBoolean">
            <summary>Задает оболочка совместимости minbleicstate.set_needf(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.AllInstances.needfgGet">
            <summary>Задает оболочка совместимости minbleicstate.get_needfg()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.AllInstances.needfgSetBoolean">
            <summary>Задает оболочка совместимости minbleicstate.set_needfg(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.AllInstances.xGet">
            <summary>Задает оболочка совместимости minbleicstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.AllInstances.xupdatedGet">
            <summary>Задает оболочка совместимости minbleicstate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminbleicstate.AllInstances.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости minbleicstate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincg">
            <summary>Тип оболочки совместимости для alglib+mincg</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincg.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincg.#ctor(alglib.mincg)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincg.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincg.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.Constructor">
            <summary>Задает оболочка совместимости mincg.mincg()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.clearrequestfieldsmincgalglibmincgstate">
            <summary>Задает оболочка совместимости mincg.clearrequestfields(mincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgcreateInt32DoubleArraymincgalglibmincgstate">
            <summary>Задает оболочка совместимости mincg.mincgcreate(Int32 n, Double[] x, mincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgcreatefInt32DoubleArrayDoublemincgalglibmincgstate">
            <summary>Задает оболочка совместимости mincg.mincgcreatef(Int32 n, Double[] x, Double diffstep, mincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincginitinternalInt32Doublemincgalglibmincgstate">
            <summary>Задает оболочка совместимости mincg.mincginitinternal(Int32 n, Double diffstep, mincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgiterationmincgalglibmincgstate">
            <summary>Задает оболочка совместимости mincg.mincgiteration(mincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincglastgoodstepmincgalglibmincgstate">
            <summary>Задает оболочка совместимости mincg.mincglastgoodstep(mincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgrequestterminationmincgalglibmincgstate">
            <summary>Задает оболочка совместимости mincg.mincgrequesttermination(mincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgrestartfrommincgalglibmincgstateDoubleArray">
            <summary>Задает оболочка совместимости mincg.mincgrestartfrom(mincgstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgresultsbufmincgalglibmincgstateDoubleArrayRefmincgalglibmincgreport">
            <summary>Задает оболочка совместимости mincg.mincgresultsbuf(mincgstate state, Double[]&amp; x, mincgreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgresultsmincgalglibmincgstateDoubleArrayRefmincgalglibmincgreport">
            <summary>Задает оболочка совместимости mincg.mincgresults(mincgstate state, Double[]&amp; x, mincgreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgsetcgtypemincgalglibmincgstateInt32">
            <summary>Задает оболочка совместимости mincg.mincgsetcgtype(mincgstate state, Int32 cgtype)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgsetcondmincgalglibmincgstateDoubleDoubleDoubleInt32">
            <summary>Задает оболочка совместимости mincg.mincgsetcond(mincgstate state, Double epsg, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgsetdrepmincgalglibmincgstateBoolean">
            <summary>Задает оболочка совместимости mincg.mincgsetdrep(mincgstate state, Boolean needdrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgsetgradientcheckmincgalglibmincgstateDouble">
            <summary>Задает оболочка совместимости mincg.mincgsetgradientcheck(mincgstate state, Double teststep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgsetprecdefaultmincgalglibmincgstate">
            <summary>Задает оболочка совместимости mincg.mincgsetprecdefault(mincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgsetprecdiagfastmincgalglibmincgstateDoubleArray">
            <summary>Задает оболочка совместимости mincg.mincgsetprecdiagfast(mincgstate state, Double[] d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgsetprecdiagmincgalglibmincgstateDoubleArray">
            <summary>Задает оболочка совместимости mincg.mincgsetprecdiag(mincgstate state, Double[] d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgsetpreclowrankfastmincgalglibmincgstateDoubleArrayDoubleArrayDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mincg.mincgsetpreclowrankfast(mincgstate state, Double[] d1, Double[] c, Double[,] v, Int32 vcnt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgsetprecscalemincgalglibmincgstate">
            <summary>Задает оболочка совместимости mincg.mincgsetprecscale(mincgstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgsetprecvarpartmincgalglibmincgstateDoubleArray">
            <summary>Задает оболочка совместимости mincg.mincgsetprecvarpart(mincgstate state, Double[] d2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgsetscalemincgalglibmincgstateDoubleArray">
            <summary>Задает оболочка совместимости mincg.mincgsetscale(mincgstate state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgsetstpmaxmincgalglibmincgstateDouble">
            <summary>Задает оболочка совместимости mincg.mincgsetstpmax(mincgstate state, Double stpmax)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgsetxrepmincgalglibmincgstateBoolean">
            <summary>Задает оболочка совместимости mincg.mincgsetxrep(mincgstate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.mincgsuggeststepmincgalglibmincgstateDouble">
            <summary>Задает оболочка совместимости mincg.mincgsuggeststep(mincgstate state, Double stp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.preconditionedmultiply2mincgalglibmincgstateDoubleArrayRefDoubleArrayRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости mincg.preconditionedmultiply2(mincgstate state, Double[]&amp; x, Double[]&amp; y, Double[]&amp; work0, Double[]&amp; work1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.preconditionedmultiplymincgalglibmincgstateDoubleArrayRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости mincg.preconditionedmultiply(mincgstate state, Double[]&amp; x, Double[]&amp; work0, Double[]&amp; work1)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincg.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincg.Shimmincgreport">
            <summary>Тип оболочки совместимости для alglib+mincg+mincgreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincg.Shimmincgreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincg.Shimmincgreport.#ctor(alglib.mincg.mincgreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincg.Shimmincgreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincg.Shimmincgreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.Shimmincgreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.Shimmincgreport.Constructor">
            <summary>Задает оболочка совместимости mincgreport.mincgreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.Shimmincgreport.init">
            <summary>Задает оболочка совместимости mincgreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.Shimmincgreport.make_copy">
            <summary>Задает оболочка совместимости mincgreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincg.Shimmincgreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.Shimmincgreport.AllInstances.init">
            <summary>Задает оболочка совместимости mincgreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.Shimmincgreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mincgreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincg.Shimmincgstate">
            <summary>Тип оболочки совместимости для alglib+mincg+mincgstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincg.Shimmincgstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincg.Shimmincgstate.#ctor(alglib.mincg.mincgstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincg.Shimmincgstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincg.Shimmincgstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.Shimmincgstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.Shimmincgstate.Constructor">
            <summary>Задает оболочка совместимости mincgstate.mincgstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.Shimmincgstate.init">
            <summary>Задает оболочка совместимости mincgstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.Shimmincgstate.make_copy">
            <summary>Задает оболочка совместимости mincgstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincg.Shimmincgstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.Shimmincgstate.AllInstances.init">
            <summary>Задает оболочка совместимости mincgstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincg.Shimmincgstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mincgstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincgreport">
            <summary>Тип оболочки совместимости для alglib+mincgreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincgreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincgreport.#ctor(alglib.mincgreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincgreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincgreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.Constructor">
            <summary>Задает оболочка совместимости mincgreport.mincgreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.Constructormincgalglibmincgreport">
            <summary>Задает оболочка совместимости mincgreport.mincgreport(mincgreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.innerobjGet">
            <summary>Задает оболочка совместимости mincgreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.iterationscountGet">
            <summary>Задает оболочка совместимости mincgreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.iterationscountSetInt32">
            <summary>Задает оболочка совместимости mincgreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.make_copy">
            <summary>Задает оболочка совместимости mincgreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.nfevGet">
            <summary>Задает оболочка совместимости mincgreport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.nfevSetInt32">
            <summary>Задает оболочка совместимости mincgreport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.terminationtypeGet">
            <summary>Задает оболочка совместимости mincgreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости mincgreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.varidxGet">
            <summary>Задает оболочка совместимости mincgreport.get_varidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.varidxSetInt32">
            <summary>Задает оболочка совместимости mincgreport.set_varidx(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincgreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости mincgreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.AllInstances.iterationscountGet">
            <summary>Задает оболочка совместимости mincgreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.AllInstances.iterationscountSetInt32">
            <summary>Задает оболочка совместимости mincgreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mincgreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.AllInstances.nfevGet">
            <summary>Задает оболочка совместимости mincgreport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.AllInstances.nfevSetInt32">
            <summary>Задает оболочка совместимости mincgreport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.AllInstances.terminationtypeGet">
            <summary>Задает оболочка совместимости mincgreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.AllInstances.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости mincgreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.AllInstances.varidxGet">
            <summary>Задает оболочка совместимости mincgreport.get_varidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgreport.AllInstances.varidxSetInt32">
            <summary>Задает оболочка совместимости mincgreport.set_varidx(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincgstate">
            <summary>Тип оболочки совместимости для alglib+mincgstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincgstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincgstate.#ctor(alglib.mincgstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincgstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincgstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.Constructor">
            <summary>Задает оболочка совместимости mincgstate.mincgstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.Constructormincgalglibmincgstate">
            <summary>Задает оболочка совместимости mincgstate.mincgstate(mincgstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.fGet">
            <summary>Задает оболочка совместимости mincgstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.fSetDouble">
            <summary>Задает оболочка совместимости mincgstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.gGet">
            <summary>Задает оболочка совместимости mincgstate.get_g()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.innerobjGet">
            <summary>Задает оболочка совместимости mincgstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.make_copy">
            <summary>Задает оболочка совместимости mincgstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.needfGet">
            <summary>Задает оболочка совместимости mincgstate.get_needf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.needfSetBoolean">
            <summary>Задает оболочка совместимости mincgstate.set_needf(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.needfgGet">
            <summary>Задает оболочка совместимости mincgstate.get_needfg()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.needfgSetBoolean">
            <summary>Задает оболочка совместимости mincgstate.set_needfg(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.xGet">
            <summary>Задает оболочка совместимости mincgstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.xupdatedGet">
            <summary>Задает оболочка совместимости mincgstate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости mincgstate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincgstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.AllInstances.fGet">
            <summary>Задает оболочка совместимости mincgstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.AllInstances.fSetDouble">
            <summary>Задает оболочка совместимости mincgstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.AllInstances.gGet">
            <summary>Задает оболочка совместимости mincgstate.get_g()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости mincgstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mincgstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.AllInstances.needfGet">
            <summary>Задает оболочка совместимости mincgstate.get_needf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.AllInstances.needfSetBoolean">
            <summary>Задает оболочка совместимости mincgstate.set_needf(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.AllInstances.needfgGet">
            <summary>Задает оболочка совместимости mincgstate.get_needfg()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.AllInstances.needfgSetBoolean">
            <summary>Задает оболочка совместимости mincgstate.set_needfg(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.AllInstances.xGet">
            <summary>Задает оболочка совместимости mincgstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.AllInstances.xupdatedGet">
            <summary>Задает оболочка совместимости mincgstate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincgstate.AllInstances.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости mincgstate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincomp">
            <summary>Тип оболочки совместимости для alglib+mincomp</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincomp.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincomp.#ctor(alglib.mincomp)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincomp.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincomp.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.Constructor">
            <summary>Задает оболочка совместимости mincomp.mincomp()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.asaboundedantigradnormmincompalglibminasastate">
            <summary>Задает оболочка совместимости mincomp.asaboundedantigradnorm(minasastate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.asad1normmincompalglibminasastate">
            <summary>Задает оболочка совместимости mincomp.asad1norm(minasastate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.asaginormmincompalglibminasastate">
            <summary>Задает оболочка совместимости mincomp.asaginorm(minasastate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.asauisemptymincompalglibminasastate">
            <summary>Задает оболочка совместимости mincomp.asauisempty(minasastate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.clearrequestfieldsmincompalglibminasastate">
            <summary>Задает оболочка совместимости mincomp.clearrequestfields(minasastate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.minasacreateInt32DoubleArrayDoubleArrayDoubleArraymincompalglibminasastate">
            <summary>Задает оболочка совместимости mincomp.minasacreate(Int32 n, Double[] x, Double[] bndl, Double[] bndu, minasastate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.minasaiterationmincompalglibminasastate">
            <summary>Задает оболочка совместимости mincomp.minasaiteration(minasastate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.minasarestartfrommincompalglibminasastateDoubleArrayDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости mincomp.minasarestartfrom(minasastate state, Double[] x, Double[] bndl, Double[] bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.minasaresultsbufmincompalglibminasastateDoubleArrayRefmincompalglibminasareport">
            <summary>Задает оболочка совместимости mincomp.minasaresultsbuf(minasastate state, Double[]&amp; x, minasareport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.minasaresultsmincompalglibminasastateDoubleArrayRefmincompalglibminasareport">
            <summary>Задает оболочка совместимости mincomp.minasaresults(minasastate state, Double[]&amp; x, minasareport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.minasasetalgorithmmincompalglibminasastateInt32">
            <summary>Задает оболочка совместимости mincomp.minasasetalgorithm(minasastate state, Int32 algotype)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.minasasetcondmincompalglibminasastateDoubleDoubleDoubleInt32">
            <summary>Задает оболочка совместимости mincomp.minasasetcond(minasastate state, Double epsg, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.minasasetstpmaxmincompalglibminasastateDouble">
            <summary>Задает оболочка совместимости mincomp.minasasetstpmax(minasastate state, Double stpmax)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.minasasetxrepmincompalglibminasastateBoolean">
            <summary>Задает оболочка совместимости mincomp.minasasetxrep(minasastate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.minbleicsetbarrierdecayminbleicalglibminbleicstateDouble">
            <summary>Задает оболочка совместимости mincomp.minbleicsetbarrierdecay(minbleicstate state, Double mudecay)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.minbleicsetbarrierwidthminbleicalglibminbleicstateDouble">
            <summary>Задает оболочка совместимости mincomp.minbleicsetbarrierwidth(minbleicstate state, Double mu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.minlbfgssetcholeskypreconditionerminlbfgsalglibminlbfgsstateDoubleMdArray2Boolean">
            <summary>Задает оболочка совместимости mincomp.minlbfgssetcholeskypreconditioner(minlbfgsstate state, Double[,] p, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.minlbfgssetdefaultpreconditionerminlbfgsalglibminlbfgsstate">
            <summary>Задает оболочка совместимости mincomp.minlbfgssetdefaultpreconditioner(minlbfgsstate state)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincomp.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincomp.Shimminasareport">
            <summary>Тип оболочки совместимости для alglib+mincomp+minasareport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincomp.Shimminasareport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincomp.Shimminasareport.#ctor(alglib.mincomp.minasareport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincomp.Shimminasareport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincomp.Shimminasareport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.Shimminasareport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.Shimminasareport.Constructor">
            <summary>Задает оболочка совместимости minasareport.minasareport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.Shimminasareport.init">
            <summary>Задает оболочка совместимости minasareport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.Shimminasareport.make_copy">
            <summary>Задает оболочка совместимости minasareport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincomp.Shimminasareport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.Shimminasareport.AllInstances.init">
            <summary>Задает оболочка совместимости minasareport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.Shimminasareport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minasareport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincomp.Shimminasastate">
            <summary>Тип оболочки совместимости для alglib+mincomp+minasastate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincomp.Shimminasastate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincomp.Shimminasastate.#ctor(alglib.mincomp.minasastate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincomp.Shimminasastate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmincomp.Shimminasastate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.Shimminasastate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.Shimminasastate.Constructor">
            <summary>Задает оболочка совместимости minasastate.minasastate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.Shimminasastate.init">
            <summary>Задает оболочка совместимости minasastate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.Shimminasastate.make_copy">
            <summary>Задает оболочка совместимости minasastate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmincomp.Shimminasastate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.Shimminasastate.AllInstances.init">
            <summary>Задает оболочка совместимости minasastate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmincomp.Shimminasastate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minasastate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlbfgs">
            <summary>Тип оболочки совместимости для alglib+minlbfgs</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgs.#ctor(alglib.minlbfgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.Constructor">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgs()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.clearrequestfieldsminlbfgsalglibminlbfgsstate">
            <summary>Задает оболочка совместимости minlbfgs.clearrequestfields(minlbfgsstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgscreateInt32Int32DoubleArrayminlbfgsalglibminlbfgsstate">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgscreate(Int32 n, Int32 m, Double[] x, minlbfgsstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgscreatefInt32Int32DoubleArrayDoubleminlbfgsalglibminlbfgsstate">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgscreatef(Int32 n, Int32 m, Double[] x, Double diffstep, minlbfgsstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgscreatexInt32Int32DoubleArrayInt32Doubleminlbfgsalglibminlbfgsstate">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgscreatex(Int32 n, Int32 m, Double[] x, Int32 flags, Double diffstep, minlbfgsstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgsiterationminlbfgsalglibminlbfgsstate">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgsiteration(minlbfgsstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgsrequestterminationminlbfgsalglibminlbfgsstate">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgsrequesttermination(minlbfgsstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgsrestartfromminlbfgsalglibminlbfgsstateDoubleArray">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgsrestartfrom(minlbfgsstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgsresultsbufminlbfgsalglibminlbfgsstateDoubleArrayRefminlbfgsalglibminlbfgsreport">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgsresultsbuf(minlbfgsstate state, Double[]&amp; x, minlbfgsreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgsresultsminlbfgsalglibminlbfgsstateDoubleArrayRefminlbfgsalglibminlbfgsreport">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgsresults(minlbfgsstate state, Double[]&amp; x, minlbfgsreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgssetcondminlbfgsalglibminlbfgsstateDoubleDoubleDoubleInt32">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgssetcond(minlbfgsstate state, Double epsg, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgssetgradientcheckminlbfgsalglibminlbfgsstateDouble">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgssetgradientcheck(minlbfgsstate state, Double teststep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgssetpreccholeskyminlbfgsalglibminlbfgsstateDoubleMdArray2Boolean">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgssetpreccholesky(minlbfgsstate state, Double[,] p, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgssetprecdefaultminlbfgsalglibminlbfgsstate">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgssetprecdefault(minlbfgsstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgssetprecdiagminlbfgsalglibminlbfgsstateDoubleArray">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgssetprecdiag(minlbfgsstate state, Double[] d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgssetpreclowrankexactminlbfgsalglibminlbfgsstateDoubleArrayDoubleArrayDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgssetpreclowrankexact(minlbfgsstate state, Double[] d, Double[] c, Double[,] w, Int32 cnt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgssetprecrankklbfgsfastminlbfgsalglibminlbfgsstateDoubleArrayDoubleArrayDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgssetprecrankklbfgsfast(minlbfgsstate state, Double[] d, Double[] c, Double[,] w, Int32 cnt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgssetprecscaleminlbfgsalglibminlbfgsstate">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgssetprecscale(minlbfgsstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgssetscaleminlbfgsalglibminlbfgsstateDoubleArray">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgssetscale(minlbfgsstate state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgssetstpmaxminlbfgsalglibminlbfgsstateDouble">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgssetstpmax(minlbfgsstate state, Double stpmax)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.minlbfgssetxrepminlbfgsalglibminlbfgsstateBoolean">
            <summary>Задает оболочка совместимости minlbfgs.minlbfgssetxrep(minlbfgsstate state, Boolean needxrep)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlbfgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsreport">
            <summary>Тип оболочки совместимости для alglib+minlbfgs+minlbfgsreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsreport.#ctor(alglib.minlbfgs.minlbfgsreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsreport.Constructor">
            <summary>Задает оболочка совместимости minlbfgsreport.minlbfgsreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsreport.init">
            <summary>Задает оболочка совместимости minlbfgsreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsreport.make_copy">
            <summary>Задает оболочка совместимости minlbfgsreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsreport.AllInstances.init">
            <summary>Задает оболочка совместимости minlbfgsreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minlbfgsreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsstate">
            <summary>Тип оболочки совместимости для alglib+minlbfgs+minlbfgsstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsstate.#ctor(alglib.minlbfgs.minlbfgsstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsstate.Constructor">
            <summary>Задает оболочка совместимости minlbfgsstate.minlbfgsstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsstate.init">
            <summary>Задает оболочка совместимости minlbfgsstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsstate.make_copy">
            <summary>Задает оболочка совместимости minlbfgsstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsstate.AllInstances.init">
            <summary>Задает оболочка совместимости minlbfgsstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgs.Shimminlbfgsstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minlbfgsstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlbfgsreport">
            <summary>Тип оболочки совместимости для alglib+minlbfgsreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgsreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgsreport.#ctor(alglib.minlbfgsreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgsreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgsreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.Constructor">
            <summary>Задает оболочка совместимости minlbfgsreport.minlbfgsreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.Constructorminlbfgsalglibminlbfgsreport">
            <summary>Задает оболочка совместимости minlbfgsreport.minlbfgsreport(minlbfgsreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.innerobjGet">
            <summary>Задает оболочка совместимости minlbfgsreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.iterationscountGet">
            <summary>Задает оболочка совместимости minlbfgsreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.iterationscountSetInt32">
            <summary>Задает оболочка совместимости minlbfgsreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.make_copy">
            <summary>Задает оболочка совместимости minlbfgsreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.nfevGet">
            <summary>Задает оболочка совместимости minlbfgsreport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.nfevSetInt32">
            <summary>Задает оболочка совместимости minlbfgsreport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.terminationtypeGet">
            <summary>Задает оболочка совместимости minlbfgsreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости minlbfgsreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.varidxGet">
            <summary>Задает оболочка совместимости minlbfgsreport.get_varidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.varidxSetInt32">
            <summary>Задает оболочка совместимости minlbfgsreport.set_varidx(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlbfgsreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости minlbfgsreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.AllInstances.iterationscountGet">
            <summary>Задает оболочка совместимости minlbfgsreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.AllInstances.iterationscountSetInt32">
            <summary>Задает оболочка совместимости minlbfgsreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minlbfgsreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.AllInstances.nfevGet">
            <summary>Задает оболочка совместимости minlbfgsreport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.AllInstances.nfevSetInt32">
            <summary>Задает оболочка совместимости minlbfgsreport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.AllInstances.terminationtypeGet">
            <summary>Задает оболочка совместимости minlbfgsreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.AllInstances.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости minlbfgsreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.AllInstances.varidxGet">
            <summary>Задает оболочка совместимости minlbfgsreport.get_varidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsreport.AllInstances.varidxSetInt32">
            <summary>Задает оболочка совместимости minlbfgsreport.set_varidx(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlbfgsstate">
            <summary>Тип оболочки совместимости для alglib+minlbfgsstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgsstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgsstate.#ctor(alglib.minlbfgsstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgsstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlbfgsstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.Constructor">
            <summary>Задает оболочка совместимости minlbfgsstate.minlbfgsstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.Constructorminlbfgsalglibminlbfgsstate">
            <summary>Задает оболочка совместимости minlbfgsstate.minlbfgsstate(minlbfgsstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.fGet">
            <summary>Задает оболочка совместимости minlbfgsstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.fSetDouble">
            <summary>Задает оболочка совместимости minlbfgsstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.gGet">
            <summary>Задает оболочка совместимости minlbfgsstate.get_g()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.innerobjGet">
            <summary>Задает оболочка совместимости minlbfgsstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.make_copy">
            <summary>Задает оболочка совместимости minlbfgsstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.needfGet">
            <summary>Задает оболочка совместимости minlbfgsstate.get_needf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.needfSetBoolean">
            <summary>Задает оболочка совместимости minlbfgsstate.set_needf(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.needfgGet">
            <summary>Задает оболочка совместимости minlbfgsstate.get_needfg()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.needfgSetBoolean">
            <summary>Задает оболочка совместимости minlbfgsstate.set_needfg(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.xGet">
            <summary>Задает оболочка совместимости minlbfgsstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.xupdatedGet">
            <summary>Задает оболочка совместимости minlbfgsstate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости minlbfgsstate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlbfgsstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.AllInstances.fGet">
            <summary>Задает оболочка совместимости minlbfgsstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.AllInstances.fSetDouble">
            <summary>Задает оболочка совместимости minlbfgsstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.AllInstances.gGet">
            <summary>Задает оболочка совместимости minlbfgsstate.get_g()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости minlbfgsstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minlbfgsstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.AllInstances.needfGet">
            <summary>Задает оболочка совместимости minlbfgsstate.get_needf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.AllInstances.needfSetBoolean">
            <summary>Задает оболочка совместимости minlbfgsstate.set_needf(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.AllInstances.needfgGet">
            <summary>Задает оболочка совместимости minlbfgsstate.get_needfg()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.AllInstances.needfgSetBoolean">
            <summary>Задает оболочка совместимости minlbfgsstate.set_needfg(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.AllInstances.xGet">
            <summary>Задает оболочка совместимости minlbfgsstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.AllInstances.xupdatedGet">
            <summary>Задает оболочка совместимости minlbfgsstate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlbfgsstate.AllInstances.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости minlbfgsstate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlm">
            <summary>Тип оболочки совместимости для alglib+minlm</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlm.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlm.#ctor(alglib.minlm)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlm.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlm.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.Constructor">
            <summary>Задает оболочка совместимости minlm.minlm()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.boundedscaledantigradnormminlmalglibminlmstateDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости minlm.boundedscaledantigradnorm(minlmstate state, Double[] x, Double[] g)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.clearrequestfieldsminlmalglibminlmstate">
            <summary>Задает оболочка совместимости minlm.clearrequestfields(minlmstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.decreaselambdaDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости minlm.decreaselambda(Double&amp; lambdav, Double&amp; nu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.increaselambdaDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости minlm.increaselambda(Double&amp; lambdav, Double&amp; nu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.lmprepareInt32Int32Booleanminlmalglibminlmstate">
            <summary>Задает оболочка совместимости minlm.lmprepare(Int32 n, Int32 m, Boolean havegrad, minlmstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmcreatefghInt32DoubleArrayminlmalglibminlmstate">
            <summary>Задает оболочка совместимости minlm.minlmcreatefgh(Int32 n, Double[] x, minlmstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmcreatefgjInt32Int32DoubleArrayminlmalglibminlmstate">
            <summary>Задает оболочка совместимости minlm.minlmcreatefgj(Int32 n, Int32 m, Double[] x, minlmstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmcreatefjInt32Int32DoubleArrayminlmalglibminlmstate">
            <summary>Задает оболочка совместимости minlm.minlmcreatefj(Int32 n, Int32 m, Double[] x, minlmstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmcreatevInt32Int32DoubleArrayDoubleminlmalglibminlmstate">
            <summary>Задает оболочка совместимости minlm.minlmcreatev(Int32 n, Int32 m, Double[] x, Double diffstep, minlmstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmcreatevgjInt32Int32DoubleArrayminlmalglibminlmstate">
            <summary>Задает оболочка совместимости minlm.minlmcreatevgj(Int32 n, Int32 m, Double[] x, minlmstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmcreatevjInt32Int32DoubleArrayminlmalglibminlmstate">
            <summary>Задает оболочка совместимости minlm.minlmcreatevj(Int32 n, Int32 m, Double[] x, minlmstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmiterationminlmalglibminlmstate">
            <summary>Задает оболочка совместимости minlm.minlmiteration(minlmstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmrequestterminationminlmalglibminlmstate">
            <summary>Задает оболочка совместимости minlm.minlmrequesttermination(minlmstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmrestartfromminlmalglibminlmstateDoubleArray">
            <summary>Задает оболочка совместимости minlm.minlmrestartfrom(minlmstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmresultsbufminlmalglibminlmstateDoubleArrayRefminlmalglibminlmreport">
            <summary>Задает оболочка совместимости minlm.minlmresultsbuf(minlmstate state, Double[]&amp; x, minlmreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmresultsminlmalglibminlmstateDoubleArrayRefminlmalglibminlmreport">
            <summary>Задает оболочка совместимости minlm.minlmresults(minlmstate state, Double[]&amp; x, minlmreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmsetacctypeminlmalglibminlmstateInt32">
            <summary>Задает оболочка совместимости minlm.minlmsetacctype(minlmstate state, Int32 acctype)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmsetbcminlmalglibminlmstateDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости minlm.minlmsetbc(minlmstate state, Double[] bndl, Double[] bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmsetcondminlmalglibminlmstateDoubleDoubleDoubleInt32">
            <summary>Задает оболочка совместимости minlm.minlmsetcond(minlmstate state, Double epsg, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmsetgradientcheckminlmalglibminlmstateDouble">
            <summary>Задает оболочка совместимости minlm.minlmsetgradientcheck(minlmstate state, Double teststep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmsetscaleminlmalglibminlmstateDoubleArray">
            <summary>Задает оболочка совместимости minlm.minlmsetscale(minlmstate state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmsetstpmaxminlmalglibminlmstateDouble">
            <summary>Задает оболочка совместимости minlm.minlmsetstpmax(minlmstate state, Double stpmax)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.minlmsetxrepminlmalglibminlmstateBoolean">
            <summary>Задает оболочка совместимости minlm.minlmsetxrep(minlmstate state, Boolean needxrep)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlm.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlm.Shimminlmreport">
            <summary>Тип оболочки совместимости для alglib+minlm+minlmreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlm.Shimminlmreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlm.Shimminlmreport.#ctor(alglib.minlm.minlmreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlm.Shimminlmreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlm.Shimminlmreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.Shimminlmreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.Shimminlmreport.Constructor">
            <summary>Задает оболочка совместимости minlmreport.minlmreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.Shimminlmreport.init">
            <summary>Задает оболочка совместимости minlmreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.Shimminlmreport.make_copy">
            <summary>Задает оболочка совместимости minlmreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlm.Shimminlmreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.Shimminlmreport.AllInstances.init">
            <summary>Задает оболочка совместимости minlmreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.Shimminlmreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minlmreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlm.Shimminlmstate">
            <summary>Тип оболочки совместимости для alglib+minlm+minlmstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlm.Shimminlmstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlm.Shimminlmstate.#ctor(alglib.minlm.minlmstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlm.Shimminlmstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlm.Shimminlmstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.Shimminlmstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.Shimminlmstate.Constructor">
            <summary>Задает оболочка совместимости minlmstate.minlmstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.Shimminlmstate.init">
            <summary>Задает оболочка совместимости minlmstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.Shimminlmstate.make_copy">
            <summary>Задает оболочка совместимости minlmstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlm.Shimminlmstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.Shimminlmstate.AllInstances.init">
            <summary>Задает оболочка совместимости minlmstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlm.Shimminlmstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minlmstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlmreport">
            <summary>Тип оболочки совместимости для alglib+minlmreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlmreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlmreport.#ctor(alglib.minlmreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlmreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlmreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.Constructor">
            <summary>Задает оболочка совместимости minlmreport.minlmreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.Constructorminlmalglibminlmreport">
            <summary>Задает оболочка совместимости minlmreport.minlmreport(minlmreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.funcidxGet">
            <summary>Задает оболочка совместимости minlmreport.get_funcidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.funcidxSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_funcidx(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.innerobjGet">
            <summary>Задает оболочка совместимости minlmreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.iterationscountGet">
            <summary>Задает оболочка совместимости minlmreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.iterationscountSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.make_copy">
            <summary>Задает оболочка совместимости minlmreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.ncholeskyGet">
            <summary>Задает оболочка совместимости minlmreport.get_ncholesky()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.ncholeskySetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_ncholesky(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.nfuncGet">
            <summary>Задает оболочка совместимости minlmreport.get_nfunc()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.nfuncSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_nfunc(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.ngradGet">
            <summary>Задает оболочка совместимости minlmreport.get_ngrad()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.ngradSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_ngrad(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.nhessGet">
            <summary>Задает оболочка совместимости minlmreport.get_nhess()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.nhessSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_nhess(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.njacGet">
            <summary>Задает оболочка совместимости minlmreport.get_njac()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.njacSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_njac(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.terminationtypeGet">
            <summary>Задает оболочка совместимости minlmreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.varidxGet">
            <summary>Задает оболочка совместимости minlmreport.get_varidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.varidxSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_varidx(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.funcidxGet">
            <summary>Задает оболочка совместимости minlmreport.get_funcidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.funcidxSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_funcidx(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости minlmreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.iterationscountGet">
            <summary>Задает оболочка совместимости minlmreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.iterationscountSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minlmreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.ncholeskyGet">
            <summary>Задает оболочка совместимости minlmreport.get_ncholesky()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.ncholeskySetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_ncholesky(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.nfuncGet">
            <summary>Задает оболочка совместимости minlmreport.get_nfunc()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.nfuncSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_nfunc(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.ngradGet">
            <summary>Задает оболочка совместимости minlmreport.get_ngrad()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.ngradSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_ngrad(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.nhessGet">
            <summary>Задает оболочка совместимости minlmreport.get_nhess()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.nhessSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_nhess(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.njacGet">
            <summary>Задает оболочка совместимости minlmreport.get_njac()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.njacSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_njac(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.terminationtypeGet">
            <summary>Задает оболочка совместимости minlmreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.varidxGet">
            <summary>Задает оболочка совместимости minlmreport.get_varidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmreport.AllInstances.varidxSetInt32">
            <summary>Задает оболочка совместимости minlmreport.set_varidx(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlmstate">
            <summary>Тип оболочки совместимости для alglib+minlmstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlmstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlmstate.#ctor(alglib.minlmstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlmstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminlmstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.Constructor">
            <summary>Задает оболочка совместимости minlmstate.minlmstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.Constructorminlmalglibminlmstate">
            <summary>Задает оболочка совместимости minlmstate.minlmstate(minlmstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.fGet">
            <summary>Задает оболочка совместимости minlmstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.fSetDouble">
            <summary>Задает оболочка совместимости minlmstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.fiGet">
            <summary>Задает оболочка совместимости minlmstate.get_fi()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.gGet">
            <summary>Задает оболочка совместимости minlmstate.get_g()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.hGet">
            <summary>Задает оболочка совместимости minlmstate.get_h()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.innerobjGet">
            <summary>Задает оболочка совместимости minlmstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.jGet">
            <summary>Задает оболочка совместимости minlmstate.get_j()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.make_copy">
            <summary>Задает оболочка совместимости minlmstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.needfGet">
            <summary>Задает оболочка совместимости minlmstate.get_needf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.needfSetBoolean">
            <summary>Задает оболочка совместимости minlmstate.set_needf(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.needfgGet">
            <summary>Задает оболочка совместимости minlmstate.get_needfg()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.needfgSetBoolean">
            <summary>Задает оболочка совместимости minlmstate.set_needfg(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.needfghGet">
            <summary>Задает оболочка совместимости minlmstate.get_needfgh()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.needfghSetBoolean">
            <summary>Задает оболочка совместимости minlmstate.set_needfgh(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.needfiGet">
            <summary>Задает оболочка совместимости minlmstate.get_needfi()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.needfiSetBoolean">
            <summary>Задает оболочка совместимости minlmstate.set_needfi(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.needfijGet">
            <summary>Задает оболочка совместимости minlmstate.get_needfij()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.needfijSetBoolean">
            <summary>Задает оболочка совместимости minlmstate.set_needfij(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.xGet">
            <summary>Задает оболочка совместимости minlmstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.xupdatedGet">
            <summary>Задает оболочка совместимости minlmstate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости minlmstate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.fGet">
            <summary>Задает оболочка совместимости minlmstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.fSetDouble">
            <summary>Задает оболочка совместимости minlmstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.fiGet">
            <summary>Задает оболочка совместимости minlmstate.get_fi()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.gGet">
            <summary>Задает оболочка совместимости minlmstate.get_g()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.hGet">
            <summary>Задает оболочка совместимости minlmstate.get_h()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости minlmstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.jGet">
            <summary>Задает оболочка совместимости minlmstate.get_j()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minlmstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.needfGet">
            <summary>Задает оболочка совместимости minlmstate.get_needf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.needfSetBoolean">
            <summary>Задает оболочка совместимости minlmstate.set_needf(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.needfgGet">
            <summary>Задает оболочка совместимости minlmstate.get_needfg()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.needfgSetBoolean">
            <summary>Задает оболочка совместимости minlmstate.set_needfg(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.needfghGet">
            <summary>Задает оболочка совместимости minlmstate.get_needfgh()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.needfghSetBoolean">
            <summary>Задает оболочка совместимости minlmstate.set_needfgh(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.needfiGet">
            <summary>Задает оболочка совместимости minlmstate.get_needfi()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.needfiSetBoolean">
            <summary>Задает оболочка совместимости minlmstate.set_needfi(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.needfijGet">
            <summary>Задает оболочка совместимости minlmstate.get_needfij()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.needfijSetBoolean">
            <summary>Задает оболочка совместимости minlmstate.set_needfij(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.xGet">
            <summary>Задает оболочка совместимости minlmstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.xupdatedGet">
            <summary>Задает оболочка совместимости minlmstate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminlmstate.AllInstances.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости minlmstate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminnlc">
            <summary>Тип оболочки совместимости для alglib+minnlc</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlc.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlc.#ctor(alglib.minnlc)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlc.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlc.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.Constructor">
            <summary>Задает оболочка совместимости minnlc.minnlc()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.auliterationminnlcalglibminnlcstate">
            <summary>Задает оболочка совместимости minnlc.auliteration(minnlcstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.clearpreconditionerminlbfgsalglibminlbfgsstate">
            <summary>Задает оболочка совместимости minnlc.clearpreconditioner(minlbfgsstate auloptimizer)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.clearrequestfieldsminnlcalglibminnlcstate">
            <summary>Задает оболочка совместимости minnlc.clearrequestfields(minnlcstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlccreateInt32DoubleArrayminnlcalglibminnlcstate">
            <summary>Задает оболочка совместимости minnlc.minnlccreate(Int32 n, Double[] x, minnlcstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlccreatefInt32DoubleArrayDoubleminnlcalglibminnlcstate">
            <summary>Задает оболочка совместимости minnlc.minnlccreatef(Int32 n, Double[] x, Double diffstep, minnlcstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcequalitypenaltyfunctionDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости minnlc.minnlcequalitypenaltyfunction(Double alpha, Double&amp; f, Double&amp; df, Double&amp; d2f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcinequalitypenaltyfunctionDoubleDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости minnlc.minnlcinequalitypenaltyfunction(Double alpha, Double stabilizingpoint, Double&amp; f, Double&amp; df, Double&amp; d2f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcinequalityshiftfunctionDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости minnlc.minnlcinequalityshiftfunction(Double alpha, Double&amp; f, Double&amp; df, Double&amp; d2f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcinitinternalInt32DoubleArrayDoubleminnlcalglibminnlcstate">
            <summary>Задает оболочка совместимости minnlc.minnlcinitinternal(Int32 n, Double[] x, Double diffstep, minnlcstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlciterationminnlcalglibminnlcstate">
            <summary>Задает оболочка совместимости minnlc.minnlciteration(minnlcstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcrestartfromminnlcalglibminnlcstateDoubleArray">
            <summary>Задает оболочка совместимости minnlc.minnlcrestartfrom(minnlcstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcresultsbufminnlcalglibminnlcstateDoubleArrayRefminnlcalglibminnlcreport">
            <summary>Задает оболочка совместимости minnlc.minnlcresultsbuf(minnlcstate state, Double[]&amp; x, minnlcreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcresultsminnlcalglibminnlcstateDoubleArrayRefminnlcalglibminnlcreport">
            <summary>Задает оболочка совместимости minnlc.minnlcresults(minnlcstate state, Double[]&amp; x, minnlcreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcsetalgoaulminnlcalglibminnlcstateDoubleInt32">
            <summary>Задает оболочка совместимости minnlc.minnlcsetalgoaul(minnlcstate state, Double rho, Int32 itscnt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcsetbcminnlcalglibminnlcstateDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости minnlc.minnlcsetbc(minnlcstate state, Double[] bndl, Double[] bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcsetcondminnlcalglibminnlcstateDoubleDoubleDoubleInt32">
            <summary>Задает оболочка совместимости minnlc.minnlcsetcond(minnlcstate state, Double epsg, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcsetgradientcheckminnlcalglibminnlcstateDouble">
            <summary>Задает оболочка совместимости minnlc.minnlcsetgradientcheck(minnlcstate state, Double teststep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcsetlcminnlcalglibminnlcstateDoubleMdArray2Int32ArrayInt32">
            <summary>Задает оболочка совместимости minnlc.minnlcsetlc(minnlcstate state, Double[,] c, Int32[] ct, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcsetnlcminnlcalglibminnlcstateInt32Int32">
            <summary>Задает оболочка совместимости minnlc.minnlcsetnlc(minnlcstate state, Int32 nlec, Int32 nlic)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcsetprecexactlowrankminnlcalglibminnlcstateInt32">
            <summary>Задает оболочка совместимости minnlc.minnlcsetprecexactlowrank(minnlcstate state, Int32 updatefreq)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcsetprecinexactminnlcalglibminnlcstate">
            <summary>Задает оболочка совместимости minnlc.minnlcsetprecinexact(minnlcstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcsetprecnoneminnlcalglibminnlcstate">
            <summary>Задает оболочка совместимости minnlc.minnlcsetprecnone(minnlcstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcsetscaleminnlcalglibminnlcstateDoubleArray">
            <summary>Задает оболочка совместимости minnlc.minnlcsetscale(minnlcstate state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.minnlcsetxrepminnlcalglibminnlcstateBoolean">
            <summary>Задает оболочка совместимости minnlc.minnlcsetxrep(minnlcstate state, Boolean needxrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.penaltybcDoubleArrayDoubleArrayBooleanArrayDoubleArrayBooleanArrayDoubleArrayInt32DoubleDoubleDoubleRefDoubleArray">
            <summary>Задает оболочка совместимости minnlc.penaltybc(Double[] x, Double[] bndl, Boolean[] hasbndl, Double[] bndu, Boolean[] hasbndu, Double[] nubc, Int32 n, Double rho, Double stabilizingpoint, Double&amp; f, Double[] g)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.penaltylcDoubleArrayDoubleMdArray2DoubleArrayInt32Int32Int32DoubleDoubleDoubleRefDoubleArray">
            <summary>Задает оболочка совместимости minnlc.penaltylc(Double[] x, Double[,] cleic, Double[] nulc, Int32 n, Int32 nec, Int32 nic, Double rho, Double stabilizingpoint, Double&amp; f, Double[] g)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.penaltynlcDoubleArrayDoubleMdArray2DoubleArrayInt32Int32Int32DoubleDoubleDoubleRefDoubleArray">
            <summary>Задает оболочка совместимости minnlc.penaltynlc(Double[] fi, Double[,] j, Double[] nunlc, Int32 n, Int32 ng, Int32 nh, Double rho, Double stabilizingpoint, Double&amp; f, Double[] g)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.updatepreconditionerInt32Int32Int32RefminlbfgsalglibminlbfgsstateDoubleArrayDoubleDoubleDoubleArrayBooleanArrayDoubleArrayBooleanArrayDoubleArrayDoubleMdArray2DoubleArrayDoubleArrayDoubleMdArray2DoubleArrayDoubleArrayRefDoubleArrayRefDoubleMdArray2RefInt32">
            <summary>Задает оболочка совместимости minnlc.updatepreconditioner(Int32 prectype, Int32 updatefreq, Int32&amp; preccounter, minlbfgsstate auloptimizer, Double[] x, Double rho, Double gammak, Double[] bndl, Boolean[] hasbndl, Double[] bndu, Boolean[] hasbndu, Double[] nubc, Double[,] cleic, Double[] nulc, Double[] fi, Double[,] jac, Double[] nunlc, Double[]&amp; bufd, Double[]&amp; bufc, Double[,]&amp; bufw, Int32 n, Int32 nec, Int32 nic, Int32 ng, Int32 nh)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminnlc.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcreport">
            <summary>Тип оболочки совместимости для alglib+minnlc+minnlcreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcreport.#ctor(alglib.minnlc.minnlcreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcreport.Constructor">
            <summary>Задает оболочка совместимости minnlcreport.minnlcreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcreport.init">
            <summary>Задает оболочка совместимости minnlcreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcreport.make_copy">
            <summary>Задает оболочка совместимости minnlcreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcreport.AllInstances.init">
            <summary>Задает оболочка совместимости minnlcreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minnlcreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcstate">
            <summary>Тип оболочки совместимости для alglib+minnlc+minnlcstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcstate.#ctor(alglib.minnlc.minnlcstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcstate.Constructor">
            <summary>Задает оболочка совместимости minnlcstate.minnlcstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcstate.init">
            <summary>Задает оболочка совместимости minnlcstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcstate.make_copy">
            <summary>Задает оболочка совместимости minnlcstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcstate.AllInstances.init">
            <summary>Задает оболочка совместимости minnlcstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlc.Shimminnlcstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minnlcstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminnlcreport">
            <summary>Тип оболочки совместимости для alglib+minnlcreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlcreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlcreport.#ctor(alglib.minnlcreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlcreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlcreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.Constructor">
            <summary>Задает оболочка совместимости minnlcreport.minnlcreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.Constructorminnlcalglibminnlcreport">
            <summary>Задает оболочка совместимости minnlcreport.minnlcreport(minnlcreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.dbgphase0itsGet">
            <summary>Задает оболочка совместимости minnlcreport.get_dbgphase0its()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.dbgphase0itsSetInt32">
            <summary>Задает оболочка совместимости minnlcreport.set_dbgphase0its(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.funcidxGet">
            <summary>Задает оболочка совместимости minnlcreport.get_funcidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.funcidxSetInt32">
            <summary>Задает оболочка совместимости minnlcreport.set_funcidx(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.innerobjGet">
            <summary>Задает оболочка совместимости minnlcreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.iterationscountGet">
            <summary>Задает оболочка совместимости minnlcreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.iterationscountSetInt32">
            <summary>Задает оболочка совместимости minnlcreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.make_copy">
            <summary>Задает оболочка совместимости minnlcreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.nfevGet">
            <summary>Задает оболочка совместимости minnlcreport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.nfevSetInt32">
            <summary>Задает оболочка совместимости minnlcreport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.terminationtypeGet">
            <summary>Задает оболочка совместимости minnlcreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости minnlcreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.varidxGet">
            <summary>Задает оболочка совместимости minnlcreport.get_varidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.varidxSetInt32">
            <summary>Задает оболочка совместимости minnlcreport.set_varidx(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminnlcreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.AllInstances.dbgphase0itsGet">
            <summary>Задает оболочка совместимости minnlcreport.get_dbgphase0its()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.AllInstances.dbgphase0itsSetInt32">
            <summary>Задает оболочка совместимости minnlcreport.set_dbgphase0its(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.AllInstances.funcidxGet">
            <summary>Задает оболочка совместимости minnlcreport.get_funcidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.AllInstances.funcidxSetInt32">
            <summary>Задает оболочка совместимости minnlcreport.set_funcidx(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости minnlcreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.AllInstances.iterationscountGet">
            <summary>Задает оболочка совместимости minnlcreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.AllInstances.iterationscountSetInt32">
            <summary>Задает оболочка совместимости minnlcreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minnlcreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.AllInstances.nfevGet">
            <summary>Задает оболочка совместимости minnlcreport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.AllInstances.nfevSetInt32">
            <summary>Задает оболочка совместимости minnlcreport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.AllInstances.terminationtypeGet">
            <summary>Задает оболочка совместимости minnlcreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.AllInstances.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости minnlcreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.AllInstances.varidxGet">
            <summary>Задает оболочка совместимости minnlcreport.get_varidx()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcreport.AllInstances.varidxSetInt32">
            <summary>Задает оболочка совместимости minnlcreport.set_varidx(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminnlcstate">
            <summary>Тип оболочки совместимости для alglib+minnlcstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlcstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlcstate.#ctor(alglib.minnlcstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlcstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminnlcstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.Constructor">
            <summary>Задает оболочка совместимости minnlcstate.minnlcstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.Constructorminnlcalglibminnlcstate">
            <summary>Задает оболочка совместимости minnlcstate.minnlcstate(minnlcstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.fGet">
            <summary>Задает оболочка совместимости minnlcstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.fSetDouble">
            <summary>Задает оболочка совместимости minnlcstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.fiGet">
            <summary>Задает оболочка совместимости minnlcstate.get_fi()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.innerobjGet">
            <summary>Задает оболочка совместимости minnlcstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.jGet">
            <summary>Задает оболочка совместимости minnlcstate.get_j()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.make_copy">
            <summary>Задает оболочка совместимости minnlcstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.needfiGet">
            <summary>Задает оболочка совместимости minnlcstate.get_needfi()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.needfiSetBoolean">
            <summary>Задает оболочка совместимости minnlcstate.set_needfi(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.needfijGet">
            <summary>Задает оболочка совместимости minnlcstate.get_needfij()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.needfijSetBoolean">
            <summary>Задает оболочка совместимости minnlcstate.set_needfij(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.xGet">
            <summary>Задает оболочка совместимости minnlcstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.xupdatedGet">
            <summary>Задает оболочка совместимости minnlcstate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости minnlcstate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminnlcstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.AllInstances.fGet">
            <summary>Задает оболочка совместимости minnlcstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.AllInstances.fSetDouble">
            <summary>Задает оболочка совместимости minnlcstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.AllInstances.fiGet">
            <summary>Задает оболочка совместимости minnlcstate.get_fi()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости minnlcstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.AllInstances.jGet">
            <summary>Задает оболочка совместимости minnlcstate.get_j()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minnlcstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.AllInstances.needfiGet">
            <summary>Задает оболочка совместимости minnlcstate.get_needfi()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.AllInstances.needfiSetBoolean">
            <summary>Задает оболочка совместимости minnlcstate.set_needfi(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.AllInstances.needfijGet">
            <summary>Задает оболочка совместимости minnlcstate.get_needfij()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.AllInstances.needfijSetBoolean">
            <summary>Задает оболочка совместимости minnlcstate.set_needfij(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.AllInstances.xGet">
            <summary>Задает оболочка совместимости minnlcstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.AllInstances.xupdatedGet">
            <summary>Задает оболочка совместимости minnlcstate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminnlcstate.AllInstances.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости minnlcstate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminqp">
            <summary>Тип оболочки совместимости для alglib+minqp</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqp.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqp.#ctor(alglib.minqp)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqp.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqp.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.Constructor">
            <summary>Задает оболочка совместимости minqp.minqp()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpcreateInt32minqpalglibminqpstate">
            <summary>Задает оболочка совместимости minqp.minqpcreate(Int32 n, minqpstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpoptimizeminqpalglibminqpstate">
            <summary>Задает оболочка совместимости minqp.minqpoptimize(minqpstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpresultsbufminqpalglibminqpstateDoubleArrayRefminqpalglibminqpreport">
            <summary>Задает оболочка совместимости minqp.minqpresultsbuf(minqpstate state, Double[]&amp; x, minqpreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpresultsminqpalglibminqpstateDoubleArrayRefminqpalglibminqpreport">
            <summary>Задает оболочка совместимости minqp.minqpresults(minqpstate state, Double[]&amp; x, minqpreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqprewritediagonalminqpalglibminqpstateDoubleArray">
            <summary>Задает оболочка совместимости minqp.minqprewritediagonal(minqpstate state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpsetalgobleicminqpalglibminqpstateDoubleDoubleDoubleInt32">
            <summary>Задает оболочка совместимости minqp.minqpsetalgobleic(minqpstate state, Double epsg, Double epsf, Double epsx, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpsetalgocholeskyminqpalglibminqpstate">
            <summary>Задает оболочка совместимости minqp.minqpsetalgocholesky(minqpstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpsetalgoquickqpminqpalglibminqpstateDoubleDoubleDoubleInt32Boolean">
            <summary>Задает оболочка совместимости minqp.minqpsetalgoquickqp(minqpstate state, Double epsg, Double epsf, Double epsx, Int32 maxouterits, Boolean usenewton)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpsetbcminqpalglibminqpstateDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости minqp.minqpsetbc(minqpstate state, Double[] bndl, Double[] bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpsetlcminqpalglibminqpstateDoubleMdArray2Int32ArrayInt32">
            <summary>Задает оболочка совместимости minqp.minqpsetlc(minqpstate state, Double[,] c, Int32[] ct, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpsetlineartermfastminqpalglibminqpstateDoubleArray">
            <summary>Задает оболочка совместимости minqp.minqpsetlineartermfast(minqpstate state, Double[] b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpsetlineartermminqpalglibminqpstateDoubleArray">
            <summary>Задает оболочка совместимости minqp.minqpsetlinearterm(minqpstate state, Double[] b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpsetoriginfastminqpalglibminqpstateDoubleArray">
            <summary>Задает оболочка совместимости minqp.minqpsetoriginfast(minqpstate state, Double[] xorigin)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpsetoriginminqpalglibminqpstateDoubleArray">
            <summary>Задает оболочка совместимости minqp.minqpsetorigin(minqpstate state, Double[] xorigin)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpsetquadratictermfastminqpalglibminqpstateDoubleMdArray2BooleanDouble">
            <summary>Задает оболочка совместимости minqp.minqpsetquadratictermfast(minqpstate state, Double[,] a, Boolean isupper, Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpsetquadratictermminqpalglibminqpstateDoubleMdArray2Boolean">
            <summary>Задает оболочка совместимости minqp.minqpsetquadraticterm(minqpstate state, Double[,] a, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpsetquadratictermsparseminqpalglibminqpstatesparsealglibsparsematrixBoolean">
            <summary>Задает оболочка совместимости minqp.minqpsetquadratictermsparse(minqpstate state, sparsematrix a, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpsetscaleminqpalglibminqpstateDoubleArray">
            <summary>Задает оболочка совместимости minqp.minqpsetscale(minqpstate state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpsetstartingpointfastminqpalglibminqpstateDoubleArray">
            <summary>Задает оболочка совместимости minqp.minqpsetstartingpointfast(minqpstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.minqpsetstartingpointminqpalglibminqpstateDoubleArray">
            <summary>Задает оболочка совместимости minqp.minqpsetstartingpoint(minqpstate state, Double[] x)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminqp.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminqp.Shimminqpreport">
            <summary>Тип оболочки совместимости для alglib+minqp+minqpreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqp.Shimminqpreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqp.Shimminqpreport.#ctor(alglib.minqp.minqpreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqp.Shimminqpreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqp.Shimminqpreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.Shimminqpreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.Shimminqpreport.Constructor">
            <summary>Задает оболочка совместимости minqpreport.minqpreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.Shimminqpreport.init">
            <summary>Задает оболочка совместимости minqpreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.Shimminqpreport.make_copy">
            <summary>Задает оболочка совместимости minqpreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminqp.Shimminqpreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.Shimminqpreport.AllInstances.init">
            <summary>Задает оболочка совместимости minqpreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.Shimminqpreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minqpreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminqp.Shimminqpstate">
            <summary>Тип оболочки совместимости для alglib+minqp+minqpstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqp.Shimminqpstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqp.Shimminqpstate.#ctor(alglib.minqp.minqpstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqp.Shimminqpstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqp.Shimminqpstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.Shimminqpstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.Shimminqpstate.Constructor">
            <summary>Задает оболочка совместимости minqpstate.minqpstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.Shimminqpstate.init">
            <summary>Задает оболочка совместимости minqpstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.Shimminqpstate.make_copy">
            <summary>Задает оболочка совместимости minqpstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminqp.Shimminqpstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.Shimminqpstate.AllInstances.init">
            <summary>Задает оболочка совместимости minqpstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqp.Shimminqpstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minqpstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminqpreport">
            <summary>Тип оболочки совместимости для alglib+minqpreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqpreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqpreport.#ctor(alglib.minqpreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqpreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqpreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.Constructor">
            <summary>Задает оболочка совместимости minqpreport.minqpreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.Constructorminqpalglibminqpreport">
            <summary>Задает оболочка совместимости minqpreport.minqpreport(minqpreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.inneriterationscountGet">
            <summary>Задает оболочка совместимости minqpreport.get_inneriterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.inneriterationscountSetInt32">
            <summary>Задает оболочка совместимости minqpreport.set_inneriterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.innerobjGet">
            <summary>Задает оболочка совместимости minqpreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.make_copy">
            <summary>Задает оболочка совместимости minqpreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.ncholeskyGet">
            <summary>Задает оболочка совместимости minqpreport.get_ncholesky()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.ncholeskySetInt32">
            <summary>Задает оболочка совместимости minqpreport.set_ncholesky(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.nmvGet">
            <summary>Задает оболочка совместимости minqpreport.get_nmv()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.nmvSetInt32">
            <summary>Задает оболочка совместимости minqpreport.set_nmv(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.outeriterationscountGet">
            <summary>Задает оболочка совместимости minqpreport.get_outeriterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.outeriterationscountSetInt32">
            <summary>Задает оболочка совместимости minqpreport.set_outeriterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.terminationtypeGet">
            <summary>Задает оболочка совместимости minqpreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости minqpreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminqpreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.AllInstances.inneriterationscountGet">
            <summary>Задает оболочка совместимости minqpreport.get_inneriterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.AllInstances.inneriterationscountSetInt32">
            <summary>Задает оболочка совместимости minqpreport.set_inneriterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости minqpreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minqpreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.AllInstances.ncholeskyGet">
            <summary>Задает оболочка совместимости minqpreport.get_ncholesky()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.AllInstances.ncholeskySetInt32">
            <summary>Задает оболочка совместимости minqpreport.set_ncholesky(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.AllInstances.nmvGet">
            <summary>Задает оболочка совместимости minqpreport.get_nmv()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.AllInstances.nmvSetInt32">
            <summary>Задает оболочка совместимости minqpreport.set_nmv(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.AllInstances.outeriterationscountGet">
            <summary>Задает оболочка совместимости minqpreport.get_outeriterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.AllInstances.outeriterationscountSetInt32">
            <summary>Задает оболочка совместимости minqpreport.set_outeriterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.AllInstances.terminationtypeGet">
            <summary>Задает оболочка совместимости minqpreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpreport.AllInstances.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости minqpreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminqpstate">
            <summary>Тип оболочки совместимости для alglib+minqpstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqpstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqpstate.#ctor(alglib.minqpstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqpstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimminqpstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpstate.Constructor">
            <summary>Задает оболочка совместимости minqpstate.minqpstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpstate.Constructorminqpalglibminqpstate">
            <summary>Задает оболочка совместимости minqpstate.minqpstate(minqpstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpstate.innerobjGet">
            <summary>Задает оболочка совместимости minqpstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpstate.make_copy">
            <summary>Задает оболочка совместимости minqpstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimminqpstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости minqpstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimminqpstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости minqpstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpbase">
            <summary>Тип оболочки совместимости для alglib+mlpbase</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.#ctor(alglib.mlpbase)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Constructor">
            <summary>Задает оболочка совместимости mlpbase.mlpbase()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlpallerrorssparsesubsetmlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32Int32ArrayInt32mlpbasealglibmodelerrors">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlpallerrorssparsesubset(multilayerperceptron network, sparsematrix xy, Int32 setsize, Int32[] subset, Int32 subsetsize, modelerrors rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlpallerrorssubsetmlpbasealglibmultilayerperceptronDoubleMdArray2Int32Int32ArrayInt32mlpbasealglibmodelerrors">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlpallerrorssubset(multilayerperceptron network, Double[,] xy, Int32 setsize, Int32[] subset, Int32 subsetsize, modelerrors rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlpavgcemlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlpavgce(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlpavgcesparsemlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlpavgcesparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlpavgerrormlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlpavgerror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlpavgerrorsparsemlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlpavgerrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlpavgrelerrormlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlpavgrelerror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlpavgrelerrorsparsemlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlpavgrelerrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlpclserrormlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlpclserror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlperrormlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlperror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlperrorsparsemlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlperrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlperrorsparsesubsetmlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32Int32ArrayInt32">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlperrorsparsesubset(multilayerperceptron network, sparsematrix xy, Int32 setsize, Int32[] subset, Int32 subsetsize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlperrorsubsetmlpbasealglibmultilayerperceptronDoubleMdArray2Int32Int32ArrayInt32">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlperrorsubset(multilayerperceptron network, Double[,] xy, Int32 setsize, Int32[] subset, Int32 subsetsize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlpgradbatchmlpbasealglibmultilayerperceptronDoubleMdArray2Int32DoubleRefDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlpgradbatch(multilayerperceptron network, Double[,] xy, Int32 ssize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlpgradbatchsparsemlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32DoubleRefDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlpgradbatchsparse(multilayerperceptron network, sparsematrix xy, Int32 ssize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlpgradbatchsparsesubsetmlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32Int32ArrayInt32DoubleRefDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlpgradbatchsparsesubset(multilayerperceptron network, sparsematrix xy, Int32 setsize, Int32[] idx, Int32 subsetsize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlpgradbatchsubsetmlpbasealglibmultilayerperceptronDoubleMdArray2Int32Int32ArrayInt32DoubleRefDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlpgradbatchsubset(multilayerperceptron network, Double[,] xy, Int32 setsize, Int32[] idx, Int32 subsetsize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlprelclserrormlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlprelclserror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlprelclserrorsparsemlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlprelclserrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlprmserrormlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlprmserror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase._pexec_mlprmserrorsparsemlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости mlpbase._pexec_mlprmserrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.addactivationlayerInt32Int32ArrayRefInt32ArrayRefInt32ArrayRefInt32ArrayRefInt32Ref">
            <summary>Задает оболочка совместимости mlpbase.addactivationlayer(Int32 functype, Int32[]&amp; lsizes, Int32[]&amp; ltypes, Int32[]&amp; lconnfirst, Int32[]&amp; lconnlast, Int32&amp; lastproc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.addbiasedsummatorlayerInt32Int32ArrayRefInt32ArrayRefInt32ArrayRefInt32ArrayRefInt32Ref">
            <summary>Задает оболочка совместимости mlpbase.addbiasedsummatorlayer(Int32 ncount, Int32[]&amp; lsizes, Int32[]&amp; ltypes, Int32[]&amp; lconnfirst, Int32[]&amp; lconnlast, Int32&amp; lastproc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.addinputlayerInt32Int32ArrayRefInt32ArrayRefInt32ArrayRefInt32ArrayRefInt32Ref">
            <summary>Задает оболочка совместимости mlpbase.addinputlayer(Int32 ncount, Int32[]&amp; lsizes, Int32[]&amp; ltypes, Int32[]&amp; lconnfirst, Int32[]&amp; lconnlast, Int32&amp; lastproc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.addzerolayerInt32ArrayRefInt32ArrayRefInt32ArrayRefInt32ArrayRefInt32Ref">
            <summary>Задает оболочка совместимости mlpbase.addzerolayer(Int32[]&amp; lsizes, Int32[]&amp; ltypes, Int32[]&amp; lconnfirst, Int32[]&amp; lconnlast, Int32&amp; lastproc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.fillhighlevelinformationmlpbasealglibmultilayerperceptronInt32Int32Int32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости mlpbase.fillhighlevelinformation(multilayerperceptron network, Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, Boolean iscls, Boolean islinearout)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.hladdhiddenlayermlpbasealglibmultilayerperceptronInt32RefInt32RefInt32RefInt32RefInt32Int32Int32">
            <summary>Задает оболочка совместимости mlpbase.hladdhiddenlayer(multilayerperceptron network, Int32&amp; connidx, Int32&amp; neuroidx, Int32&amp; structinfoidx, Int32&amp; weightsidx, Int32 k, Int32 nprev, Int32 ncur)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.hladdinputlayermlpbasealglibmultilayerperceptronInt32RefInt32RefInt32RefInt32">
            <summary>Задает оболочка совместимости mlpbase.hladdinputlayer(multilayerperceptron network, Int32&amp; connidx, Int32&amp; neuroidx, Int32&amp; structinfoidx, Int32 nin)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.hladdoutputlayermlpbasealglibmultilayerperceptronInt32RefInt32RefInt32RefInt32RefInt32Int32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости mlpbase.hladdoutputlayer(multilayerperceptron network, Int32&amp; connidx, Int32&amp; neuroidx, Int32&amp; structinfoidx, Int32&amp; weightsidx, Int32 k, Int32 nprev, Int32 nout, Boolean iscls, Boolean islinearout)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpactivationfunctionDoubleInt32DoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости mlpbase.mlpactivationfunction(Double net, Int32 k, Double&amp; f, Double&amp; df, Double&amp; d2f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpallerrorssparsesubsetmlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32Int32ArrayInt32mlpbasealglibmodelerrors">
            <summary>Задает оболочка совместимости mlpbase.mlpallerrorssparsesubset(multilayerperceptron network, sparsematrix xy, Int32 setsize, Int32[] subset, Int32 subsetsize, modelerrors rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpallerrorssubsetmlpbasealglibmultilayerperceptronDoubleMdArray2Int32Int32ArrayInt32mlpbasealglibmodelerrors">
            <summary>Задает оболочка совместимости mlpbase.mlpallerrorssubset(multilayerperceptron network, Double[,] xy, Int32 setsize, Int32[] subset, Int32 subsetsize, modelerrors rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpallerrorsxmlpbasealglibmultilayerperceptronDoubleMdArray2sparsealglibsparsematrixInt32Int32Int32ArrayInt32Int32Int32smpalglibshared_poolmlpbasealglibmodelerrors">
            <summary>Задает оболочка совместимости mlpbase.mlpallerrorsx(multilayerperceptron network, Double[,] densexy, sparsematrix sparsexy, Int32 datasetsize, Int32 datasettype, Int32[] idx, Int32 subset0, Int32 subset1, Int32 subsettype, shared_pool buf, modelerrors rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpallocalglibserializermlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpalloc(serializer s, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpavgcemlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase.mlpavgce(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpavgcesparsemlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости mlpbase.mlpavgcesparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpavgerrormlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase.mlpavgerror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpavgerrorsparsemlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости mlpbase.mlpavgerrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpavgrelerrormlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase.mlpavgrelerror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpavgrelerrorsparsemlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости mlpbase.mlpavgrelerrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpchunkedgradientmlpbasealglibmultilayerperceptronDoubleMdArray2Int32Int32DoubleArrayDoubleArrayDoubleRefBoolean">
            <summary>Задает оболочка совместимости mlpbase.mlpchunkedgradient(multilayerperceptron network, Double[,] xy, Int32 cstart, Int32 csize, Double[] batch4buf, Double[] hpcbuf, Double&amp; e, Boolean naturalerrorfunc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpchunkedprocessmlpbasealglibmultilayerperceptronDoubleMdArray2Int32Int32DoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости mlpbase.mlpchunkedprocess(multilayerperceptron network, Double[,] xy, Int32 cstart, Int32 csize, Double[] batch4buf, Double[] hpcbuf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpclserrormlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase.mlpclserror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcopymlpbasealglibmultilayerperceptronmlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcopy(multilayerperceptron network1, multilayerperceptron network2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcopysharedmlpbasealglibmultilayerperceptronmlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcopyshared(multilayerperceptron network1, multilayerperceptron network2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcopytunableparametersmlpbasealglibmultilayerperceptronmlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcopytunableparameters(multilayerperceptron network1, multilayerperceptron network2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcreate0Int32Int32mlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcreate0(Int32 nin, Int32 nout, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcreate1Int32Int32Int32mlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcreate1(Int32 nin, Int32 nhid, Int32 nout, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcreate2Int32Int32Int32Int32mlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcreate2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcreateInt32Int32Int32ArrayInt32ArrayInt32ArrayInt32ArrayInt32Booleanmlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcreate(Int32 nin, Int32 nout, Int32[] lsizes, Int32[] ltypes, Int32[] lconnfirst, Int32[] lconnlast, Int32 layerscount, Boolean isclsnet, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcreateb0Int32Int32DoubleDoublemlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcreateb0(Int32 nin, Int32 nout, Double b, Double d, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcreateb1Int32Int32Int32DoubleDoublemlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcreateb1(Int32 nin, Int32 nhid, Int32 nout, Double b, Double d, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcreateb2Int32Int32Int32Int32DoubleDoublemlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcreateb2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, Double b, Double d, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcreatec0Int32Int32mlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcreatec0(Int32 nin, Int32 nout, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcreatec1Int32Int32Int32mlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcreatec1(Int32 nin, Int32 nhid, Int32 nout, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcreatec2Int32Int32Int32Int32mlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcreatec2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcreater0Int32Int32DoubleDoublemlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcreater0(Int32 nin, Int32 nout, Double a, Double b, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcreater1Int32Int32Int32DoubleDoublemlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcreater1(Int32 nin, Int32 nhid, Int32 nout, Double a, Double b, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpcreater2Int32Int32Int32Int32DoubleDoublemlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpcreater2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, Double a, Double b, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlperrormlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase.mlperror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlperrornmlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase.mlperrorn(multilayerperceptron network, Double[,] xy, Int32 ssize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlperrorsparsemlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости mlpbase.mlperrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlperrorsparsesubsetmlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32Int32ArrayInt32">
            <summary>Задает оболочка совместимости mlpbase.mlperrorsparsesubset(multilayerperceptron network, sparsematrix xy, Int32 setsize, Int32[] subset, Int32 subsetsize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlperrorsubsetmlpbasealglibmultilayerperceptronDoubleMdArray2Int32Int32ArrayInt32">
            <summary>Задает оболочка совместимости mlpbase.mlperrorsubset(multilayerperceptron network, Double[,] xy, Int32 setsize, Int32[] subset, Int32 subsetsize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpexporttunableparametersmlpbasealglibmultilayerperceptronDoubleArrayRefInt32Ref">
            <summary>Задает оболочка совместимости mlpbase.mlpexporttunableparameters(multilayerperceptron network, Double[]&amp; p, Int32&amp; pcount)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgetinputscalingmlpbasealglibmultilayerperceptronInt32DoubleRefDoubleRef">
            <summary>Задает оболочка совместимости mlpbase.mlpgetinputscaling(multilayerperceptron network, Int32 i, Double&amp; mean, Double&amp; sigma)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgetinputscountmlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpgetinputscount(multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgetlayerscountmlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpgetlayerscount(multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgetlayersizemlpbasealglibmultilayerperceptronInt32">
            <summary>Задает оболочка совместимости mlpbase.mlpgetlayersize(multilayerperceptron network, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgetneuroninfomlpbasealglibmultilayerperceptronInt32Int32Int32RefDoubleRef">
            <summary>Задает оболочка совместимости mlpbase.mlpgetneuroninfo(multilayerperceptron network, Int32 k, Int32 i, Int32&amp; fkind, Double&amp; threshold)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgetoutputscalingmlpbasealglibmultilayerperceptronInt32DoubleRefDoubleRef">
            <summary>Задает оболочка совместимости mlpbase.mlpgetoutputscaling(multilayerperceptron network, Int32 i, Double&amp; mean, Double&amp; sigma)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgetoutputscountmlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpgetoutputscount(multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgetweightmlpbasealglibmultilayerperceptronInt32Int32Int32Int32">
            <summary>Задает оболочка совместимости mlpbase.mlpgetweight(multilayerperceptron network, Int32 k0, Int32 i0, Int32 k1, Int32 i1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgetweightscountmlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpgetweightscount(multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgradbatchmlpbasealglibmultilayerperceptronDoubleMdArray2Int32DoubleRefDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpbase.mlpgradbatch(multilayerperceptron network, Double[,] xy, Int32 ssize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgradbatchsparsemlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32DoubleRefDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpbase.mlpgradbatchsparse(multilayerperceptron network, sparsematrix xy, Int32 ssize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgradbatchsparsesubsetmlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32Int32ArrayInt32DoubleRefDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpbase.mlpgradbatchsparsesubset(multilayerperceptron network, sparsematrix xy, Int32 setsize, Int32[] idx, Int32 subsetsize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgradbatchsubsetmlpbasealglibmultilayerperceptronDoubleMdArray2Int32Int32ArrayInt32DoubleRefDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpbase.mlpgradbatchsubset(multilayerperceptron network, Double[,] xy, Int32 setsize, Int32[] idx, Int32 subsetsize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgradbatchxmlpbasealglibmultilayerperceptronDoubleMdArray2sparsealglibsparsematrixInt32Int32Int32ArrayInt32Int32Int32smpalglibshared_poolsmpalglibshared_pool">
            <summary>Задает оболочка совместимости mlpbase.mlpgradbatchx(multilayerperceptron network, Double[,] densexy, sparsematrix sparsexy, Int32 datasetsize, Int32 datasettype, Int32[] idx, Int32 subset0, Int32 subset1, Int32 subsettype, shared_pool buf, shared_pool gradbuf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgradmlpbasealglibmultilayerperceptronDoubleArrayDoubleArrayDoubleRefDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpbase.mlpgrad(multilayerperceptron network, Double[] x, Double[] desiredy, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgradnbatchmlpbasealglibmultilayerperceptronDoubleMdArray2Int32DoubleRefDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpbase.mlpgradnbatch(multilayerperceptron network, Double[,] xy, Int32 ssize, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgradnmlpbasealglibmultilayerperceptronDoubleArrayDoubleArrayDoubleRefDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpbase.mlpgradn(multilayerperceptron network, Double[] x, Double[] desiredy, Double&amp; e, Double[]&amp; grad)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgradsplitcost">
            <summary>Задает оболочка совместимости mlpbase.mlpgradsplitcost()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpgradsplitsize">
            <summary>Задает оболочка совместимости mlpbase.mlpgradsplitsize()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlphessianbatchinternalmlpbasealglibmultilayerperceptronDoubleMdArray2Int32BooleanDoubleRefDoubleArrayRefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости mlpbase.mlphessianbatchinternal(multilayerperceptron network, Double[,] xy, Int32 ssize, Boolean naturalerr, Double&amp; e, Double[]&amp; grad, Double[,]&amp; h)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlphessianbatchmlpbasealglibmultilayerperceptronDoubleMdArray2Int32DoubleRefDoubleArrayRefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости mlpbase.mlphessianbatch(multilayerperceptron network, Double[,] xy, Int32 ssize, Double&amp; e, Double[]&amp; grad, Double[,]&amp; h)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlphessiannbatchmlpbasealglibmultilayerperceptronDoubleMdArray2Int32DoubleRefDoubleArrayRefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости mlpbase.mlphessiannbatch(multilayerperceptron network, Double[,] xy, Int32 ssize, Double&amp; e, Double[]&amp; grad, Double[,]&amp; h)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpimporttunableparametersmlpbasealglibmultilayerperceptronDoubleArray">
            <summary>Задает оболочка совместимости mlpbase.mlpimporttunableparameters(multilayerperceptron network, Double[] p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpinitpreprocessormlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase.mlpinitpreprocessor(multilayerperceptron network, Double[,] xy, Int32 ssize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpinitpreprocessorsparsemlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости mlpbase.mlpinitpreprocessorsparse(multilayerperceptron network, sparsematrix xy, Int32 ssize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpinitpreprocessorsparsesubsetmlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32Int32ArrayInt32">
            <summary>Задает оболочка совместимости mlpbase.mlpinitpreprocessorsparsesubset(multilayerperceptron network, sparsematrix xy, Int32 setsize, Int32[] idx, Int32 subsetsize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpinitpreprocessorsubsetmlpbasealglibmultilayerperceptronDoubleMdArray2Int32Int32ArrayInt32">
            <summary>Задает оболочка совместимости mlpbase.mlpinitpreprocessorsubset(multilayerperceptron network, Double[,] xy, Int32 setsize, Int32[] idx, Int32 subsetsize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpinternalcalculategradientmlpbasealglibmultilayerperceptronDoubleArrayDoubleArrayDoubleArrayRefDoubleArrayRefBoolean">
            <summary>Задает оболочка совместимости mlpbase.mlpinternalcalculategradient(multilayerperceptron network, Double[] neurons, Double[] weights, Double[]&amp; derror, Double[]&amp; grad, Boolean naturalerrorfunc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpinternalprocessvectorInt32ArrayDoubleArrayDoubleArrayDoubleArrayDoubleArrayRefDoubleArrayRefDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpbase.mlpinternalprocessvector(Int32[] structinfo, Double[] weights, Double[] columnmeans, Double[] columnsigmas, Double[]&amp; neurons, Double[]&amp; dfdnet, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpissoftmaxmlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpissoftmax(multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpntotalmlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpntotal(multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpprocessimlpbasealglibmultilayerperceptronDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpbase.mlpprocessi(multilayerperceptron network, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpprocessmlpbasealglibmultilayerperceptronDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpbase.mlpprocess(multilayerperceptron network, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlppropertiesmlpbasealglibmultilayerperceptronInt32RefInt32RefInt32Ref">
            <summary>Задает оболочка совместимости mlpbase.mlpproperties(multilayerperceptron network, Int32&amp; nin, Int32&amp; nout, Int32&amp; wcount)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlprandomizefullmlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlprandomizefull(multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlprandomizemlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlprandomize(multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlprelclserrormlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase.mlprelclserror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlprelclserrorsparsemlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости mlpbase.mlprelclserrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlprmserrormlpbasealglibmultilayerperceptronDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpbase.mlprmserror(multilayerperceptron network, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlprmserrorsparsemlpbasealglibmultilayerperceptronsparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости mlpbase.mlprmserrorsparse(multilayerperceptron network, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpsamearchitecturemlpbasealglibmultilayerperceptronmlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpsamearchitecture(multilayerperceptron network1, multilayerperceptron network2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpserializealglibserializermlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpserialize(serializer s, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpserializeoldmlpbasealglibmultilayerperceptronDoubleArrayRefInt32Ref">
            <summary>Задает оболочка совместимости mlpbase.mlpserializeold(multilayerperceptron network, Double[]&amp; ra, Int32&amp; rlen)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpsetinputscalingmlpbasealglibmultilayerperceptronInt32DoubleDouble">
            <summary>Задает оболочка совместимости mlpbase.mlpsetinputscaling(multilayerperceptron network, Int32 i, Double mean, Double sigma)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpsetneuroninfomlpbasealglibmultilayerperceptronInt32Int32Int32Double">
            <summary>Задает оболочка совместимости mlpbase.mlpsetneuroninfo(multilayerperceptron network, Int32 k, Int32 i, Int32 fkind, Double threshold)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpsetoutputscalingmlpbasealglibmultilayerperceptronInt32DoubleDouble">
            <summary>Задает оболочка совместимости mlpbase.mlpsetoutputscaling(multilayerperceptron network, Int32 i, Double mean, Double sigma)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpsetweightmlpbasealglibmultilayerperceptronInt32Int32Int32Int32Double">
            <summary>Задает оболочка совместимости mlpbase.mlpsetweight(multilayerperceptron network, Int32 k0, Int32 i0, Int32 k1, Int32 i1, Double w)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpunserializealglibserializermlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpunserialize(serializer s, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.mlpunserializeoldDoubleArraymlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlpbase.mlpunserializeold(Double[] ra, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.randomizebackwardpassmlpbasealglibmultilayerperceptronInt32Double">
            <summary>Задает оболочка совместимости mlpbase.randomizebackwardpass(multilayerperceptron network, Int32 neuronidx, Double v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.safecrossentropyDoubleDouble">
            <summary>Задает оболочка совместимости mlpbase.safecrossentropy(Double t, Double z)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpbase.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpbase.Shimmodelerrors">
            <summary>Тип оболочки совместимости для alglib+mlpbase+modelerrors</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.Shimmodelerrors.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.Shimmodelerrors.#ctor(alglib.mlpbase.modelerrors)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.Shimmodelerrors.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.Shimmodelerrors.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimmodelerrors.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimmodelerrors.Constructor">
            <summary>Задает оболочка совместимости modelerrors.modelerrors()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimmodelerrors.init">
            <summary>Задает оболочка совместимости modelerrors.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimmodelerrors.make_copy">
            <summary>Задает оболочка совместимости modelerrors.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpbase.Shimmodelerrors.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimmodelerrors.AllInstances.init">
            <summary>Задает оболочка совместимости modelerrors.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimmodelerrors.AllInstances.make_copy">
            <summary>Задает оболочка совместимости modelerrors.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpbase.Shimmultilayerperceptron">
            <summary>Тип оболочки совместимости для alglib+mlpbase+multilayerperceptron</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.Shimmultilayerperceptron.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.Shimmultilayerperceptron.#ctor(alglib.mlpbase.multilayerperceptron)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.Shimmultilayerperceptron.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.Shimmultilayerperceptron.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimmultilayerperceptron.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimmultilayerperceptron.Constructor">
            <summary>Задает оболочка совместимости multilayerperceptron.multilayerperceptron()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimmultilayerperceptron.init">
            <summary>Задает оболочка совместимости multilayerperceptron.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimmultilayerperceptron.make_copy">
            <summary>Задает оболочка совместимости multilayerperceptron.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpbase.Shimmultilayerperceptron.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimmultilayerperceptron.AllInstances.init">
            <summary>Задает оболочка совместимости multilayerperceptron.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimmultilayerperceptron.AllInstances.make_copy">
            <summary>Задает оболочка совместимости multilayerperceptron.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpbase.Shimsmlpgrad">
            <summary>Тип оболочки совместимости для alglib+mlpbase+smlpgrad</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.Shimsmlpgrad.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.Shimsmlpgrad.#ctor(alglib.mlpbase.smlpgrad)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.Shimsmlpgrad.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpbase.Shimsmlpgrad.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimsmlpgrad.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimsmlpgrad.Constructor">
            <summary>Задает оболочка совместимости smlpgrad.smlpgrad()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimsmlpgrad.init">
            <summary>Задает оболочка совместимости smlpgrad.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimsmlpgrad.make_copy">
            <summary>Задает оболочка совместимости smlpgrad.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpbase.Shimsmlpgrad.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimsmlpgrad.AllInstances.init">
            <summary>Задает оболочка совместимости smlpgrad.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpbase.Shimsmlpgrad.AllInstances.make_copy">
            <summary>Задает оболочка совместимости smlpgrad.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpcvreport">
            <summary>Тип оболочки совместимости для alglib+mlpcvreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpcvreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpcvreport.#ctor(alglib.mlpcvreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpcvreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpcvreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.Constructor">
            <summary>Задает оболочка совместимости mlpcvreport.mlpcvreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.Constructormlptrainalglibmlpcvreport">
            <summary>Задает оболочка совместимости mlpcvreport.mlpcvreport(mlpcvreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.avgceGet">
            <summary>Задает оболочка совместимости mlpcvreport.get_avgce()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.avgceSetDouble">
            <summary>Задает оболочка совместимости mlpcvreport.set_avgce(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.avgerrorGet">
            <summary>Задает оболочка совместимости mlpcvreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.avgerrorSetDouble">
            <summary>Задает оболочка совместимости mlpcvreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.avgrelerrorGet">
            <summary>Задает оболочка совместимости mlpcvreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости mlpcvreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.innerobjGet">
            <summary>Задает оболочка совместимости mlpcvreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.make_copy">
            <summary>Задает оболочка совместимости mlpcvreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.relclserrorGet">
            <summary>Задает оболочка совместимости mlpcvreport.get_relclserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.relclserrorSetDouble">
            <summary>Задает оболочка совместимости mlpcvreport.set_relclserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.rmserrorGet">
            <summary>Задает оболочка совместимости mlpcvreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.rmserrorSetDouble">
            <summary>Задает оболочка совместимости mlpcvreport.set_rmserror(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpcvreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.AllInstances.avgceGet">
            <summary>Задает оболочка совместимости mlpcvreport.get_avgce()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.AllInstances.avgceSetDouble">
            <summary>Задает оболочка совместимости mlpcvreport.set_avgce(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.AllInstances.avgerrorGet">
            <summary>Задает оболочка совместимости mlpcvreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.AllInstances.avgerrorSetDouble">
            <summary>Задает оболочка совместимости mlpcvreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.AllInstances.avgrelerrorGet">
            <summary>Задает оболочка совместимости mlpcvreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.AllInstances.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости mlpcvreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости mlpcvreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mlpcvreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.AllInstances.relclserrorGet">
            <summary>Задает оболочка совместимости mlpcvreport.get_relclserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.AllInstances.relclserrorSetDouble">
            <summary>Задает оболочка совместимости mlpcvreport.set_relclserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.AllInstances.rmserrorGet">
            <summary>Задает оболочка совместимости mlpcvreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpcvreport.AllInstances.rmserrorSetDouble">
            <summary>Задает оболочка совместимости mlpcvreport.set_rmserror(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpe">
            <summary>Тип оболочки совместимости для alglib+mlpe</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpe.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpe.#ctor(alglib.mlpe)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpe.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpe.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.Constructor">
            <summary>Задает оболочка совместимости mlpe.mlpe()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpeallerrorssparsemlpealglibmlpensemblesparsealglibsparsematrixInt32DoubleRefDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости mlpe.mlpeallerrorssparse(mlpensemble ensemble, sparsematrix xy, Int32 npoints, Double&amp; relcls, Double&amp; avgce, Double&amp; rms, Double&amp; avg, Double&amp; avgrel)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpeallerrorsxmlpealglibmlpensembleDoubleMdArray2sparsealglibsparsematrixInt32Int32Int32ArrayInt32Int32Int32smpalglibshared_poolmlpbasealglibmodelerrors">
            <summary>Задает оболочка совместимости mlpe.mlpeallerrorsx(mlpensemble ensemble, Double[,] densexy, sparsematrix sparsexy, Int32 datasetsize, Int32 datasettype, Int32[] idx, Int32 subset0, Int32 subset1, Int32 subsettype, shared_pool buf, modelerrors rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpeallocalglibserializermlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpealloc(serializer s, mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpeavgcemlpealglibmlpensembleDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpe.mlpeavgce(mlpensemble ensemble, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpeavgerrormlpealglibmlpensembleDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpe.mlpeavgerror(mlpensemble ensemble, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpeavgrelerrormlpealglibmlpensembleDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpe.mlpeavgrelerror(mlpensemble ensemble, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpecopymlpealglibmlpensemblemlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpecopy(mlpensemble ensemble1, mlpensemble ensemble2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpecreate0Int32Int32Int32mlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpecreate0(Int32 nin, Int32 nout, Int32 ensemblesize, mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpecreate1Int32Int32Int32Int32mlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpecreate1(Int32 nin, Int32 nhid, Int32 nout, Int32 ensemblesize, mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpecreate2Int32Int32Int32Int32Int32mlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpecreate2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, Int32 ensemblesize, mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpecreateb0Int32Int32DoubleDoubleInt32mlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpecreateb0(Int32 nin, Int32 nout, Double b, Double d, Int32 ensemblesize, mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpecreateb1Int32Int32Int32DoubleDoubleInt32mlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpecreateb1(Int32 nin, Int32 nhid, Int32 nout, Double b, Double d, Int32 ensemblesize, mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpecreateb2Int32Int32Int32Int32DoubleDoubleInt32mlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpecreateb2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, Double b, Double d, Int32 ensemblesize, mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpecreatec0Int32Int32Int32mlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpecreatec0(Int32 nin, Int32 nout, Int32 ensemblesize, mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpecreatec1Int32Int32Int32Int32mlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpecreatec1(Int32 nin, Int32 nhid, Int32 nout, Int32 ensemblesize, mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpecreatec2Int32Int32Int32Int32Int32mlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpecreatec2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, Int32 ensemblesize, mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpecreatefromnetworkmlpbasealglibmultilayerperceptronInt32mlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpecreatefromnetwork(multilayerperceptron network, Int32 ensemblesize, mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpecreater0Int32Int32DoubleDoubleInt32mlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpecreater0(Int32 nin, Int32 nout, Double a, Double b, Int32 ensemblesize, mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpecreater1Int32Int32Int32DoubleDoubleInt32mlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpecreater1(Int32 nin, Int32 nhid, Int32 nout, Double a, Double b, Int32 ensemblesize, mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpecreater2Int32Int32Int32Int32DoubleDoubleInt32mlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpecreater2(Int32 nin, Int32 nhid1, Int32 nhid2, Int32 nout, Double a, Double b, Int32 ensemblesize, mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpeissoftmaxmlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpeissoftmax(mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpeprocessimlpealglibmlpensembleDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpe.mlpeprocessi(mlpensemble ensemble, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpeprocessmlpealglibmlpensembleDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости mlpe.mlpeprocess(mlpensemble ensemble, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpepropertiesmlpealglibmlpensembleInt32RefInt32Ref">
            <summary>Задает оболочка совместимости mlpe.mlpeproperties(mlpensemble ensemble, Int32&amp; nin, Int32&amp; nout)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlperandomizemlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlperandomize(mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlperelclserrormlpealglibmlpensembleDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpe.mlperelclserror(mlpensemble ensemble, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpermserrormlpealglibmlpensembleDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlpe.mlpermserror(mlpensemble ensemble, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpeserializealglibserializermlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpeserialize(serializer s, mlpensemble ensemble)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.mlpeunserializealglibserializermlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpe.mlpeunserialize(serializer s, mlpensemble ensemble)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpe.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpe.Shimmlpensemble">
            <summary>Тип оболочки совместимости для alglib+mlpe+mlpensemble</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpe.Shimmlpensemble.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpe.Shimmlpensemble.#ctor(alglib.mlpe.mlpensemble)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpe.Shimmlpensemble.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpe.Shimmlpensemble.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.Shimmlpensemble.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.Shimmlpensemble.Constructor">
            <summary>Задает оболочка совместимости mlpensemble.mlpensemble()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.Shimmlpensemble.init">
            <summary>Задает оболочка совместимости mlpensemble.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.Shimmlpensemble.make_copy">
            <summary>Задает оболочка совместимости mlpensemble.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpe.Shimmlpensemble.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.Shimmlpensemble.AllInstances.init">
            <summary>Задает оболочка совместимости mlpensemble.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpe.Shimmlpensemble.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mlpensemble.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpensemble">
            <summary>Тип оболочки совместимости для alglib+mlpensemble</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpensemble.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpensemble.#ctor(alglib.mlpensemble)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpensemble.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpensemble.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpensemble.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpensemble.Constructor">
            <summary>Задает оболочка совместимости mlpensemble.mlpensemble()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpensemble.Constructormlpealglibmlpensemble">
            <summary>Задает оболочка совместимости mlpensemble.mlpensemble(mlpensemble obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpensemble.innerobjGet">
            <summary>Задает оболочка совместимости mlpensemble.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpensemble.make_copy">
            <summary>Задает оболочка совместимости mlpensemble.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpensemble.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpensemble.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости mlpensemble.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpensemble.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mlpensemble.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpreport">
            <summary>Тип оболочки совместимости для alglib+mlpreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpreport.#ctor(alglib.mlpreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlpreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.Constructor">
            <summary>Задает оболочка совместимости mlpreport.mlpreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.Constructormlptrainalglibmlpreport">
            <summary>Задает оболочка совместимости mlpreport.mlpreport(mlpreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.avgceGet">
            <summary>Задает оболочка совместимости mlpreport.get_avgce()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.avgceSetDouble">
            <summary>Задает оболочка совместимости mlpreport.set_avgce(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.avgerrorGet">
            <summary>Задает оболочка совместимости mlpreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.avgerrorSetDouble">
            <summary>Задает оболочка совместимости mlpreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.avgrelerrorGet">
            <summary>Задает оболочка совместимости mlpreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости mlpreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.innerobjGet">
            <summary>Задает оболочка совместимости mlpreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.make_copy">
            <summary>Задает оболочка совместимости mlpreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.ncholeskyGet">
            <summary>Задает оболочка совместимости mlpreport.get_ncholesky()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.ncholeskySetInt32">
            <summary>Задает оболочка совместимости mlpreport.set_ncholesky(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.ngradGet">
            <summary>Задает оболочка совместимости mlpreport.get_ngrad()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.ngradSetInt32">
            <summary>Задает оболочка совместимости mlpreport.set_ngrad(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.nhessGet">
            <summary>Задает оболочка совместимости mlpreport.get_nhess()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.nhessSetInt32">
            <summary>Задает оболочка совместимости mlpreport.set_nhess(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.relclserrorGet">
            <summary>Задает оболочка совместимости mlpreport.get_relclserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.relclserrorSetDouble">
            <summary>Задает оболочка совместимости mlpreport.set_relclserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.rmserrorGet">
            <summary>Задает оболочка совместимости mlpreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.rmserrorSetDouble">
            <summary>Задает оболочка совместимости mlpreport.set_rmserror(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.avgceGet">
            <summary>Задает оболочка совместимости mlpreport.get_avgce()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.avgceSetDouble">
            <summary>Задает оболочка совместимости mlpreport.set_avgce(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.avgerrorGet">
            <summary>Задает оболочка совместимости mlpreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.avgerrorSetDouble">
            <summary>Задает оболочка совместимости mlpreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.avgrelerrorGet">
            <summary>Задает оболочка совместимости mlpreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости mlpreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости mlpreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mlpreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.ncholeskyGet">
            <summary>Задает оболочка совместимости mlpreport.get_ncholesky()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.ncholeskySetInt32">
            <summary>Задает оболочка совместимости mlpreport.set_ncholesky(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.ngradGet">
            <summary>Задает оболочка совместимости mlpreport.get_ngrad()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.ngradSetInt32">
            <summary>Задает оболочка совместимости mlpreport.set_ngrad(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.nhessGet">
            <summary>Задает оболочка совместимости mlpreport.get_nhess()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.nhessSetInt32">
            <summary>Задает оболочка совместимости mlpreport.set_nhess(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.relclserrorGet">
            <summary>Задает оболочка совместимости mlpreport.get_relclserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.relclserrorSetDouble">
            <summary>Задает оболочка совместимости mlpreport.set_relclserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.rmserrorGet">
            <summary>Задает оболочка совместимости mlpreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlpreport.AllInstances.rmserrorSetDouble">
            <summary>Задает оболочка совместимости mlpreport.set_rmserror(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrain">
            <summary>Тип оболочки совместимости для alglib+mlptrain</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.#ctor(alglib.mlptrain)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Constructor">
            <summary>Задает оболочка совместимости mlptrain.mlptrain()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain._pexec_mlpcontinuetrainingmlptrainalglibmlptrainermlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlptrain._pexec_mlpcontinuetraining(mlptrainer s, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain._pexec_mlpkfoldcvmlptrainalglibmlptrainermlpbasealglibmultilayerperceptronInt32Int32mlptrainalglibmlpreport">
            <summary>Задает оболочка совместимости mlptrain._pexec_mlpkfoldcv(mlptrainer s, multilayerperceptron network, Int32 nrestarts, Int32 foldscount, mlpreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain._pexec_mlptrainensembleesmlptrainalglibmlptrainermlpealglibmlpensembleInt32mlptrainalglibmlpreport">
            <summary>Задает оболочка совместимости mlptrain._pexec_mlptrainensemblees(mlptrainer s, mlpensemble ensemble, Int32 nrestarts, mlpreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain._pexec_mlptrainnetworkmlptrainalglibmlptrainermlpbasealglibmultilayerperceptronInt32mlptrainalglibmlpreport">
            <summary>Задает оболочка совместимости mlptrain._pexec_mlptrainnetwork(mlptrainer s, multilayerperceptron network, Int32 nrestarts, mlpreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.initmlpetrnsessionmlpbasealglibmultilayerperceptronmlptrainalglibmlptrainermlptrainalglibmlpetrnsession">
            <summary>Задает оболочка совместимости mlptrain.initmlpetrnsession(multilayerperceptron individualnetwork, mlptrainer trainer, mlpetrnsession session)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.initmlpetrnsessionsmlpbasealglibmultilayerperceptronmlptrainalglibmlptrainersmpalglibshared_pool">
            <summary>Задает оболочка совместимости mlptrain.initmlpetrnsessions(multilayerperceptron individualnetwork, mlptrainer trainer, shared_pool sessions)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.initmlptrnsessionmlpbasealglibmultilayerperceptronBooleanmlptrainalglibmlptrainermlptrainalglibsmlptrnsession">
            <summary>Задает оболочка совместимости mlptrain.initmlptrnsession(multilayerperceptron networktrained, Boolean randomizenetwork, mlptrainer trainer, smlptrnsession session)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.initmlptrnsessionsmlpbasealglibmultilayerperceptronBooleanmlptrainalglibmlptrainersmpalglibshared_pool">
            <summary>Задает оболочка совместимости mlptrain.initmlptrnsessions(multilayerperceptron networktrained, Boolean randomizenetwork, mlptrainer trainer, shared_pool sessions)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpcontinuetrainingmlptrainalglibmlptrainermlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости mlptrain.mlpcontinuetraining(mlptrainer s, multilayerperceptron network)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpcontinuetrainingxmlptrainalglibmlptrainerInt32ArrayInt32Int32Refmlptrainalglibsmlptrnsession">
            <summary>Задает оболочка совместимости mlptrain.mlpcontinuetrainingx(mlptrainer s, Int32[] subset, Int32 subsetsize, Int32&amp; ngradbatch, smlptrnsession session)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpcreatetrainerInt32Int32mlptrainalglibmlptrainer">
            <summary>Задает оболочка совместимости mlptrain.mlpcreatetrainer(Int32 nin, Int32 nout, mlptrainer s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpcreatetrainerclsInt32Int32mlptrainalglibmlptrainer">
            <summary>Задает оболочка совместимости mlptrain.mlpcreatetrainercls(Int32 nin, Int32 nclasses, mlptrainer s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpebagginginternalmlpealglibmlpensembleDoubleMdArray2Int32DoubleInt32DoubleInt32BooleanInt32Refmlptrainalglibmlpreportmlptrainalglibmlpcvreport">
            <summary>Задает оболочка совместимости mlptrain.mlpebagginginternal(mlpensemble ensemble, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Double wstep, Int32 maxits, Boolean lmalgorithm, Int32&amp; info, mlpreport rep, mlpcvreport ooberrors)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpebagginglbfgsmlpealglibmlpensembleDoubleMdArray2Int32DoubleInt32DoubleInt32Int32Refmlptrainalglibmlpreportmlptrainalglibmlpcvreport">
            <summary>Задает оболочка совместимости mlptrain.mlpebagginglbfgs(mlpensemble ensemble, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Double wstep, Int32 maxits, Int32&amp; info, mlpreport rep, mlpcvreport ooberrors)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpebagginglmmlpealglibmlpensembleDoubleMdArray2Int32DoubleInt32Int32Refmlptrainalglibmlpreportmlptrainalglibmlpcvreport">
            <summary>Задает оболочка совместимости mlptrain.mlpebagginglm(mlpensemble ensemble, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Int32&amp; info, mlpreport rep, mlpcvreport ooberrors)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpetrainesmlpealglibmlpensembleDoubleMdArray2Int32DoubleInt32Int32Refmlptrainalglibmlpreport">
            <summary>Задает оболочка совместимости mlptrain.mlpetraines(mlpensemble ensemble, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Int32&amp; info, mlpreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpkfoldcvgeneralmlpbasealglibmultilayerperceptronDoubleMdArray2Int32DoubleInt32Int32BooleanDoubleInt32Int32Refmlptrainalglibmlpreportmlptrainalglibmlpcvreport">
            <summary>Задает оболочка совместимости mlptrain.mlpkfoldcvgeneral(multilayerperceptron n, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Int32 foldscount, Boolean lmalgorithm, Double wstep, Int32 maxits, Int32&amp; info, mlpreport rep, mlpcvreport cvrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpkfoldcvlbfgsmlpbasealglibmultilayerperceptronDoubleMdArray2Int32DoubleInt32DoubleInt32Int32Int32Refmlptrainalglibmlpreportmlptrainalglibmlpcvreport">
            <summary>Задает оболочка совместимости mlptrain.mlpkfoldcvlbfgs(multilayerperceptron network, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Double wstep, Int32 maxits, Int32 foldscount, Int32&amp; info, mlpreport rep, mlpcvreport cvrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpkfoldcvlmmlpbasealglibmultilayerperceptronDoubleMdArray2Int32DoubleInt32Int32Int32Refmlptrainalglibmlpreportmlptrainalglibmlpcvreport">
            <summary>Задает оболочка совместимости mlptrain.mlpkfoldcvlm(multilayerperceptron network, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Int32 foldscount, Int32&amp; info, mlpreport rep, mlpcvreport cvrep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpkfoldcvmlptrainalglibmlptrainermlpbasealglibmultilayerperceptronInt32Int32mlptrainalglibmlpreport">
            <summary>Задает оболочка совместимости mlptrain.mlpkfoldcv(mlptrainer s, multilayerperceptron network, Int32 nrestarts, Int32 foldscount, mlpreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpkfoldsplitDoubleMdArray2Int32Int32Int32BooleanInt32ArrayRef">
            <summary>Задает оболочка совместимости mlptrain.mlpkfoldsplit(Double[,] xy, Int32 npoints, Int32 nclasses, Int32 foldscount, Boolean stratifiedsplits, Int32[]&amp; folds)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpsetalgobatchmlptrainalglibmlptrainer">
            <summary>Задает оболочка совместимости mlptrain.mlpsetalgobatch(mlptrainer s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpsetcondmlptrainalglibmlptrainerDoubleInt32">
            <summary>Задает оболочка совместимости mlptrain.mlpsetcond(mlptrainer s, Double wstep, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpsetdatasetmlptrainalglibmlptrainerDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости mlptrain.mlpsetdataset(mlptrainer s, Double[,] xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpsetdecaymlptrainalglibmlptrainerDouble">
            <summary>Задает оболочка совместимости mlptrain.mlpsetdecay(mlptrainer s, Double decay)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpsetsparsedatasetmlptrainalglibmlptrainersparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости mlptrain.mlpsetsparsedataset(mlptrainer s, sparsematrix xy, Int32 npoints)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpstarttrainingmlptrainalglibmlptrainermlpbasealglibmultilayerperceptronBoolean">
            <summary>Задает оболочка совместимости mlptrain.mlpstarttraining(mlptrainer s, multilayerperceptron network, Boolean randomstart)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlpstarttrainingxmlptrainalglibmlptrainerBooleanInt32Int32ArrayInt32mlptrainalglibsmlptrnsession">
            <summary>Задает оболочка совместимости mlptrain.mlpstarttrainingx(mlptrainer s, Boolean randomstart, Int32 algokind, Int32[] subset, Int32 subsetsize, smlptrnsession session)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlptrainensembleesmlptrainalglibmlptrainermlpealglibmlpensembleInt32mlptrainalglibmlpreport">
            <summary>Задает оболочка совместимости mlptrain.mlptrainensemblees(mlptrainer s, mlpensemble ensemble, Int32 nrestarts, mlpreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlptrainensemblexmlptrainalglibmlptrainermlpealglibmlpensembleInt32Int32Int32Int32apservalglibsintegerBooleansmpalglibshared_pool">
            <summary>Задает оболочка совместимости mlptrain.mlptrainensemblex(mlptrainer s, mlpensemble ensemble, Int32 idx0, Int32 idx1, Int32 nrestarts, Int32 trainingmethod, sinteger ngrad, Boolean isrootcall, shared_pool esessions)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlptrainesmlpbasealglibmultilayerperceptronDoubleMdArray2Int32DoubleMdArray2Int32DoubleInt32Int32Refmlptrainalglibmlpreport">
            <summary>Задает оболочка совместимости mlptrain.mlptraines(multilayerperceptron network, Double[,] trnxy, Int32 trnsize, Double[,] valxy, Int32 valsize, Double decay, Int32 restarts, Int32&amp; info, mlpreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlptrainlbfgsmlpbasealglibmultilayerperceptronDoubleMdArray2Int32DoubleInt32DoubleInt32Int32Refmlptrainalglibmlpreport">
            <summary>Задает оболочка совместимости mlptrain.mlptrainlbfgs(multilayerperceptron network, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Double wstep, Int32 maxits, Int32&amp; info, mlpreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlptrainlmmlpbasealglibmultilayerperceptronDoubleMdArray2Int32DoubleInt32Int32Refmlptrainalglibmlpreport">
            <summary>Задает оболочка совместимости mlptrain.mlptrainlm(multilayerperceptron network, Double[,] xy, Int32 npoints, Double decay, Int32 restarts, Int32&amp; info, mlpreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlptrainnetworkmlptrainalglibmlptrainermlpbasealglibmultilayerperceptronInt32mlptrainalglibmlpreport">
            <summary>Задает оболочка совместимости mlptrain.mlptrainnetwork(mlptrainer s, multilayerperceptron network, Int32 nrestarts, mlpreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mlptrainnetworkxmlptrainalglibmlptrainerInt32Int32Int32ArrayInt32Int32ArrayInt32mlpbasealglibmultilayerperceptronmlptrainalglibmlpreportBooleansmpalglibshared_pool">
            <summary>Задает оболочка совместимости mlptrain.mlptrainnetworkx(mlptrainer s, Int32 nrestarts, Int32 algokind, Int32[] trnsubset, Int32 trnsubsetsize, Int32[] valsubset, Int32 valsubsetsize, multilayerperceptron network, mlpreport rep, Boolean isrootcall, shared_pool sessions)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.mthreadcvmlptrainalglibmlptrainerInt32Int32Int32ArrayInt32Int32DoubleMdArray2smpalglibshared_pool">
            <summary>Задает оболочка совместимости mlptrain.mthreadcv(mlptrainer s, Int32 rowsize, Int32 nrestarts, Int32[] folds, Int32 fold, Int32 dfold, Double[,] cvy, shared_pool pooldatacv)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrain.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpcvreport">
            <summary>Тип оболочки совместимости для alglib+mlptrain+mlpcvreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpcvreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpcvreport.#ctor(alglib.mlptrain.mlpcvreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpcvreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpcvreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpcvreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpcvreport.Constructor">
            <summary>Задает оболочка совместимости mlpcvreport.mlpcvreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpcvreport.init">
            <summary>Задает оболочка совместимости mlpcvreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpcvreport.make_copy">
            <summary>Задает оболочка совместимости mlpcvreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpcvreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpcvreport.AllInstances.init">
            <summary>Задает оболочка совместимости mlpcvreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpcvreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mlpcvreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpetrnsession">
            <summary>Тип оболочки совместимости для alglib+mlptrain+mlpetrnsession</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpetrnsession.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpetrnsession.#ctor(alglib.mlptrain.mlpetrnsession)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpetrnsession.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpetrnsession.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpetrnsession.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpetrnsession.Constructor">
            <summary>Задает оболочка совместимости mlpetrnsession.mlpetrnsession()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpetrnsession.init">
            <summary>Задает оболочка совместимости mlpetrnsession.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpetrnsession.make_copy">
            <summary>Задает оболочка совместимости mlpetrnsession.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpetrnsession.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpetrnsession.AllInstances.init">
            <summary>Задает оболочка совместимости mlpetrnsession.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpetrnsession.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mlpetrnsession.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpparallelizationcv">
            <summary>Тип оболочки совместимости для alglib+mlptrain+mlpparallelizationcv</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpparallelizationcv.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpparallelizationcv.#ctor(alglib.mlptrain.mlpparallelizationcv)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpparallelizationcv.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpparallelizationcv.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpparallelizationcv.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpparallelizationcv.Constructor">
            <summary>Задает оболочка совместимости mlpparallelizationcv.mlpparallelizationcv()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpparallelizationcv.init">
            <summary>Задает оболочка совместимости mlpparallelizationcv.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpparallelizationcv.make_copy">
            <summary>Задает оболочка совместимости mlpparallelizationcv.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpparallelizationcv.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpparallelizationcv.AllInstances.init">
            <summary>Задает оболочка совместимости mlpparallelizationcv.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpparallelizationcv.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mlpparallelizationcv.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpreport">
            <summary>Тип оболочки совместимости для alglib+mlptrain+mlpreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpreport.#ctor(alglib.mlptrain.mlpreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpreport.Constructor">
            <summary>Задает оболочка совместимости mlpreport.mlpreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpreport.init">
            <summary>Задает оболочка совместимости mlpreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpreport.make_copy">
            <summary>Задает оболочка совместимости mlpreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpreport.AllInstances.init">
            <summary>Задает оболочка совместимости mlpreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlpreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mlpreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlptrainer">
            <summary>Тип оболочки совместимости для alglib+mlptrain+mlptrainer</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlptrainer.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlptrainer.#ctor(alglib.mlptrain.mlptrainer)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlptrainer.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlptrainer.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlptrainer.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlptrainer.Constructor">
            <summary>Задает оболочка совместимости mlptrainer.mlptrainer()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlptrainer.init">
            <summary>Задает оболочка совместимости mlptrainer.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlptrainer.make_copy">
            <summary>Задает оболочка совместимости mlptrainer.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlptrainer.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlptrainer.AllInstances.init">
            <summary>Задает оболочка совместимости mlptrainer.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimmlptrainer.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mlptrainer.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrain.Shimsmlptrnsession">
            <summary>Тип оболочки совместимости для alglib+mlptrain+smlptrnsession</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimsmlptrnsession.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimsmlptrnsession.#ctor(alglib.mlptrain.smlptrnsession)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimsmlptrnsession.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrain.Shimsmlptrnsession.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimsmlptrnsession.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimsmlptrnsession.Constructor">
            <summary>Задает оболочка совместимости smlptrnsession.smlptrnsession()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimsmlptrnsession.init">
            <summary>Задает оболочка совместимости smlptrnsession.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimsmlptrnsession.make_copy">
            <summary>Задает оболочка совместимости smlptrnsession.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrain.Shimsmlptrnsession.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimsmlptrnsession.AllInstances.init">
            <summary>Задает оболочка совместимости smlptrnsession.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrain.Shimsmlptrnsession.AllInstances.make_copy">
            <summary>Задает оболочка совместимости smlptrnsession.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrainer">
            <summary>Тип оболочки совместимости для alglib+mlptrainer</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrainer.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrainer.#ctor(alglib.mlptrainer)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrainer.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmlptrainer.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrainer.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrainer.Constructor">
            <summary>Задает оболочка совместимости mlptrainer.mlptrainer()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrainer.Constructormlptrainalglibmlptrainer">
            <summary>Задает оболочка совместимости mlptrainer.mlptrainer(mlptrainer obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrainer.innerobjGet">
            <summary>Задает оболочка совместимости mlptrainer.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrainer.make_copy">
            <summary>Задает оболочка совместимости mlptrainer.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmlptrainer.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrainer.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости mlptrainer.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmlptrainer.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mlptrainer.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmnlreport">
            <summary>Тип оболочки совместимости для alglib+mnlreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmnlreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmnlreport.#ctor(alglib.mnlreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmnlreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmnlreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmnlreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmnlreport.Constructor">
            <summary>Задает оболочка совместимости mnlreport.mnlreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmnlreport.Constructorlogitalglibmnlreport">
            <summary>Задает оболочка совместимости mnlreport.mnlreport(mnlreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmnlreport.innerobjGet">
            <summary>Задает оболочка совместимости mnlreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmnlreport.make_copy">
            <summary>Задает оболочка совместимости mnlreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmnlreport.ngradGet">
            <summary>Задает оболочка совместимости mnlreport.get_ngrad()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmnlreport.ngradSetInt32">
            <summary>Задает оболочка совместимости mnlreport.set_ngrad(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmnlreport.nhessGet">
            <summary>Задает оболочка совместимости mnlreport.get_nhess()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmnlreport.nhessSetInt32">
            <summary>Задает оболочка совместимости mnlreport.set_nhess(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmnlreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmnlreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости mnlreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmnlreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости mnlreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmnlreport.AllInstances.ngradGet">
            <summary>Задает оболочка совместимости mnlreport.get_ngrad()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmnlreport.AllInstances.ngradSetInt32">
            <summary>Задает оболочка совместимости mnlreport.set_ngrad(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmnlreport.AllInstances.nhessGet">
            <summary>Задает оболочка совместимости mnlreport.get_nhess()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmnlreport.AllInstances.nhessSetInt32">
            <summary>Задает оболочка совместимости mnlreport.set_nhess(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmodelerrors">
            <summary>Тип оболочки совместимости для alglib+modelerrors</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmodelerrors.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmodelerrors.#ctor(alglib.modelerrors)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmodelerrors.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmodelerrors.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.Constructor">
            <summary>Задает оболочка совместимости modelerrors.modelerrors()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.Constructormlpbasealglibmodelerrors">
            <summary>Задает оболочка совместимости modelerrors.modelerrors(modelerrors obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.avgceGet">
            <summary>Задает оболочка совместимости modelerrors.get_avgce()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.avgceSetDouble">
            <summary>Задает оболочка совместимости modelerrors.set_avgce(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.avgerrorGet">
            <summary>Задает оболочка совместимости modelerrors.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.avgerrorSetDouble">
            <summary>Задает оболочка совместимости modelerrors.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.avgrelerrorGet">
            <summary>Задает оболочка совместимости modelerrors.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости modelerrors.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.innerobjGet">
            <summary>Задает оболочка совместимости modelerrors.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.make_copy">
            <summary>Задает оболочка совместимости modelerrors.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.relclserrorGet">
            <summary>Задает оболочка совместимости modelerrors.get_relclserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.relclserrorSetDouble">
            <summary>Задает оболочка совместимости modelerrors.set_relclserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.rmserrorGet">
            <summary>Задает оболочка совместимости modelerrors.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.rmserrorSetDouble">
            <summary>Задает оболочка совместимости modelerrors.set_rmserror(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmodelerrors.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.AllInstances.avgceGet">
            <summary>Задает оболочка совместимости modelerrors.get_avgce()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.AllInstances.avgceSetDouble">
            <summary>Задает оболочка совместимости modelerrors.set_avgce(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.AllInstances.avgerrorGet">
            <summary>Задает оболочка совместимости modelerrors.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.AllInstances.avgerrorSetDouble">
            <summary>Задает оболочка совместимости modelerrors.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.AllInstances.avgrelerrorGet">
            <summary>Задает оболочка совместимости modelerrors.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.AllInstances.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости modelerrors.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости modelerrors.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.AllInstances.make_copy">
            <summary>Задает оболочка совместимости modelerrors.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.AllInstances.relclserrorGet">
            <summary>Задает оболочка совместимости modelerrors.get_relclserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.AllInstances.relclserrorSetDouble">
            <summary>Задает оболочка совместимости modelerrors.set_relclserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.AllInstances.rmserrorGet">
            <summary>Задает оболочка совместимости modelerrors.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmodelerrors.AllInstances.rmserrorSetDouble">
            <summary>Задает оболочка совместимости modelerrors.set_rmserror(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmultilayerperceptron">
            <summary>Тип оболочки совместимости для alglib+multilayerperceptron</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmultilayerperceptron.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmultilayerperceptron.#ctor(alglib.multilayerperceptron)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmultilayerperceptron.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimmultilayerperceptron.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmultilayerperceptron.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmultilayerperceptron.Constructor">
            <summary>Задает оболочка совместимости multilayerperceptron.multilayerperceptron()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmultilayerperceptron.Constructormlpbasealglibmultilayerperceptron">
            <summary>Задает оболочка совместимости multilayerperceptron.multilayerperceptron(multilayerperceptron obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmultilayerperceptron.innerobjGet">
            <summary>Задает оболочка совместимости multilayerperceptron.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmultilayerperceptron.make_copy">
            <summary>Задает оболочка совместимости multilayerperceptron.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimmultilayerperceptron.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmultilayerperceptron.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости multilayerperceptron.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimmultilayerperceptron.AllInstances.make_copy">
            <summary>Задает оболочка совместимости multilayerperceptron.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnearestneighbor">
            <summary>Тип оболочки совместимости для alglib+nearestneighbor</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnearestneighbor.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnearestneighbor.#ctor(alglib.nearestneighbor)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnearestneighbor.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnearestneighbor.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.Constructor">
            <summary>Задает оболочка совместимости nearestneighbor.nearestneighbor()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreeallocalglibserializernearestneighboralglibkdtree">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreealloc(serializer s, kdtree tree)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreeallocdatasetdependentnearestneighboralglibkdtreeInt32Int32Int32">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreeallocdatasetdependent(kdtree kdt, Int32 n, Int32 nx, Int32 ny)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreeallocdatasetindependentnearestneighboralglibkdtreeInt32Int32">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreeallocdatasetindependent(kdtree kdt, Int32 nx, Int32 ny)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreealloctemporariesnearestneighboralglibkdtreeInt32Int32Int32">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreealloctemporaries(kdtree kdt, Int32 n, Int32 nx, Int32 ny)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreebuildDoubleMdArray2Int32Int32Int32Int32nearestneighboralglibkdtree">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreebuild(Double[,] xy, Int32 n, Int32 nx, Int32 ny, Int32 normtype, kdtree kdt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreebuildtaggedDoubleMdArray2Int32ArrayInt32Int32Int32Int32nearestneighboralglibkdtree">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreebuildtagged(Double[,] xy, Int32[] tags, Int32 n, Int32 nx, Int32 ny, Int32 normtype, kdtree kdt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreegeneratetreerecnearestneighboralglibkdtreeInt32RefInt32RefInt32Int32Int32">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreegeneratetreerec(kdtree kdt, Int32&amp; nodesoffs, Int32&amp; splitsoffs, Int32 i1, Int32 i2, Int32 maxleafsize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreeinitboxnearestneighboralglibkdtreeDoubleArray">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreeinitbox(kdtree kdt, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreequeryaknnnearestneighboralglibkdtreeDoubleArrayInt32BooleanDouble">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreequeryaknn(kdtree kdt, Double[] x, Int32 k, Boolean selfmatch, Double eps)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreequeryknnnearestneighboralglibkdtreeDoubleArrayInt32Boolean">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreequeryknn(kdtree kdt, Double[] x, Int32 k, Boolean selfmatch)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreequerynnrecnearestneighboralglibkdtreeInt32">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreequerynnrec(kdtree kdt, Int32 offs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreequeryresultsdistancesinearestneighboralglibkdtreeDoubleArrayRef">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreequeryresultsdistancesi(kdtree kdt, Double[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreequeryresultsdistancesnearestneighboralglibkdtreeDoubleArrayRef">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreequeryresultsdistances(kdtree kdt, Double[]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreequeryresultstagsinearestneighboralglibkdtreeInt32ArrayRef">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreequeryresultstagsi(kdtree kdt, Int32[]&amp; tags)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreequeryresultstagsnearestneighboralglibkdtreeInt32ArrayRef">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreequeryresultstags(kdtree kdt, Int32[]&amp; tags)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreequeryresultsxinearestneighboralglibkdtreeDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreequeryresultsxi(kdtree kdt, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreequeryresultsxnearestneighboralglibkdtreeDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreequeryresultsx(kdtree kdt, Double[,]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreequeryresultsxyinearestneighboralglibkdtreeDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreequeryresultsxyi(kdtree kdt, Double[,]&amp; xy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreequeryresultsxynearestneighboralglibkdtreeDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreequeryresultsxy(kdtree kdt, Double[,]&amp; xy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreequeryrnnnearestneighboralglibkdtreeDoubleArrayDoubleBoolean">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreequeryrnn(kdtree kdt, Double[] x, Double r, Boolean selfmatch)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreeserializealglibserializernearestneighboralglibkdtree">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreeserialize(serializer s, kdtree tree)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreesplitnearestneighboralglibkdtreeInt32Int32Int32DoubleInt32Ref">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreesplit(kdtree kdt, Int32 i1, Int32 i2, Int32 d, Double s, Int32&amp; i3)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.kdtreeunserializealglibserializernearestneighboralglibkdtree">
            <summary>Задает оболочка совместимости nearestneighbor.kdtreeunserialize(serializer s, kdtree tree)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnearestneighbor.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnearestneighbor.Shimkdtree">
            <summary>Тип оболочки совместимости для alglib+nearestneighbor+kdtree</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnearestneighbor.Shimkdtree.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnearestneighbor.Shimkdtree.#ctor(alglib.nearestneighbor.kdtree)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnearestneighbor.Shimkdtree.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnearestneighbor.Shimkdtree.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.Shimkdtree.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.Shimkdtree.Constructor">
            <summary>Задает оболочка совместимости kdtree.kdtree()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.Shimkdtree.init">
            <summary>Задает оболочка совместимости kdtree.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.Shimkdtree.make_copy">
            <summary>Задает оболочка совместимости kdtree.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnearestneighbor.Shimkdtree.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.Shimkdtree.AllInstances.init">
            <summary>Задает оболочка совместимости kdtree.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearestneighbor.Shimkdtree.AllInstances.make_copy">
            <summary>Задает оболочка совместимости kdtree.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnearunityunit">
            <summary>Тип оболочки совместимости для alglib+nearunityunit</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnearunityunit.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnearunityunit.#ctor(alglib.nearunityunit)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnearunityunit.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnearunityunit.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearunityunit.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearunityunit.Constructor">
            <summary>Задает оболочка совместимости nearunityunit.nearunityunit()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearunityunit.nucosm1Double">
            <summary>Задает оболочка совместимости nearunityunit.nucosm1(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearunityunit.nuexpm1Double">
            <summary>Задает оболочка совместимости nearunityunit.nuexpm1(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnearunityunit.nulog1pDouble">
            <summary>Задает оболочка совместимости nearunityunit.nulog1p(Double x)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnearunityunit.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnleq">
            <summary>Тип оболочки совместимости для alglib+nleq</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleq.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleq.#ctor(alglib.nleq)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleq.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleq.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.Constructor">
            <summary>Задает оболочка совместимости nleq.nleq()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.clearrequestfieldsnleqalglibnleqstate">
            <summary>Задает оболочка совместимости nleq.clearrequestfields(nleqstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.decreaselambdaDoubleRefDoubleRefDouble">
            <summary>Задает оболочка совместимости nleq.decreaselambda(Double&amp; lambdav, Double&amp; nu, Double lambdadown)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.increaselambdaDoubleRefDoubleRefDouble">
            <summary>Задает оболочка совместимости nleq.increaselambda(Double&amp; lambdav, Double&amp; nu, Double lambdaup)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.nleqcreatelmInt32Int32DoubleArraynleqalglibnleqstate">
            <summary>Задает оболочка совместимости nleq.nleqcreatelm(Int32 n, Int32 m, Double[] x, nleqstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.nleqiterationnleqalglibnleqstate">
            <summary>Задает оболочка совместимости nleq.nleqiteration(nleqstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.nleqrestartfromnleqalglibnleqstateDoubleArray">
            <summary>Задает оболочка совместимости nleq.nleqrestartfrom(nleqstate state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.nleqresultsbufnleqalglibnleqstateDoubleArrayRefnleqalglibnleqreport">
            <summary>Задает оболочка совместимости nleq.nleqresultsbuf(nleqstate state, Double[]&amp; x, nleqreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.nleqresultsnleqalglibnleqstateDoubleArrayRefnleqalglibnleqreport">
            <summary>Задает оболочка совместимости nleq.nleqresults(nleqstate state, Double[]&amp; x, nleqreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.nleqsetcondnleqalglibnleqstateDoubleInt32">
            <summary>Задает оболочка совместимости nleq.nleqsetcond(nleqstate state, Double epsf, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.nleqsetstpmaxnleqalglibnleqstateDouble">
            <summary>Задает оболочка совместимости nleq.nleqsetstpmax(nleqstate state, Double stpmax)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.nleqsetxrepnleqalglibnleqstateBoolean">
            <summary>Задает оболочка совместимости nleq.nleqsetxrep(nleqstate state, Boolean needxrep)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnleq.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnleq.Shimnleqreport">
            <summary>Тип оболочки совместимости для alglib+nleq+nleqreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleq.Shimnleqreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleq.Shimnleqreport.#ctor(alglib.nleq.nleqreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleq.Shimnleqreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleq.Shimnleqreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.Shimnleqreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.Shimnleqreport.Constructor">
            <summary>Задает оболочка совместимости nleqreport.nleqreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.Shimnleqreport.init">
            <summary>Задает оболочка совместимости nleqreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.Shimnleqreport.make_copy">
            <summary>Задает оболочка совместимости nleqreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnleq.Shimnleqreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.Shimnleqreport.AllInstances.init">
            <summary>Задает оболочка совместимости nleqreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.Shimnleqreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости nleqreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnleq.Shimnleqstate">
            <summary>Тип оболочки совместимости для alglib+nleq+nleqstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleq.Shimnleqstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleq.Shimnleqstate.#ctor(alglib.nleq.nleqstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleq.Shimnleqstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleq.Shimnleqstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.Shimnleqstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.Shimnleqstate.Constructor">
            <summary>Задает оболочка совместимости nleqstate.nleqstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.Shimnleqstate.init">
            <summary>Задает оболочка совместимости nleqstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.Shimnleqstate.make_copy">
            <summary>Задает оболочка совместимости nleqstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnleq.Shimnleqstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.Shimnleqstate.AllInstances.init">
            <summary>Задает оболочка совместимости nleqstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleq.Shimnleqstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости nleqstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnleqreport">
            <summary>Тип оболочки совместимости для alglib+nleqreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleqreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleqreport.#ctor(alglib.nleqreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleqreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleqreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.Constructor">
            <summary>Задает оболочка совместимости nleqreport.nleqreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.Constructornleqalglibnleqreport">
            <summary>Задает оболочка совместимости nleqreport.nleqreport(nleqreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.innerobjGet">
            <summary>Задает оболочка совместимости nleqreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.iterationscountGet">
            <summary>Задает оболочка совместимости nleqreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.iterationscountSetInt32">
            <summary>Задает оболочка совместимости nleqreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.make_copy">
            <summary>Задает оболочка совместимости nleqreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.nfuncGet">
            <summary>Задает оболочка совместимости nleqreport.get_nfunc()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.nfuncSetInt32">
            <summary>Задает оболочка совместимости nleqreport.set_nfunc(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.njacGet">
            <summary>Задает оболочка совместимости nleqreport.get_njac()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.njacSetInt32">
            <summary>Задает оболочка совместимости nleqreport.set_njac(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.terminationtypeGet">
            <summary>Задает оболочка совместимости nleqreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости nleqreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnleqreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости nleqreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.AllInstances.iterationscountGet">
            <summary>Задает оболочка совместимости nleqreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.AllInstances.iterationscountSetInt32">
            <summary>Задает оболочка совместимости nleqreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости nleqreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.AllInstances.nfuncGet">
            <summary>Задает оболочка совместимости nleqreport.get_nfunc()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.AllInstances.nfuncSetInt32">
            <summary>Задает оболочка совместимости nleqreport.set_nfunc(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.AllInstances.njacGet">
            <summary>Задает оболочка совместимости nleqreport.get_njac()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.AllInstances.njacSetInt32">
            <summary>Задает оболочка совместимости nleqreport.set_njac(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.AllInstances.terminationtypeGet">
            <summary>Задает оболочка совместимости nleqreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqreport.AllInstances.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости nleqreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnleqstate">
            <summary>Тип оболочки совместимости для alglib+nleqstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleqstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleqstate.#ctor(alglib.nleqstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleqstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnleqstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.Constructor">
            <summary>Задает оболочка совместимости nleqstate.nleqstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.Constructornleqalglibnleqstate">
            <summary>Задает оболочка совместимости nleqstate.nleqstate(nleqstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.fGet">
            <summary>Задает оболочка совместимости nleqstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.fSetDouble">
            <summary>Задает оболочка совместимости nleqstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.fiGet">
            <summary>Задает оболочка совместимости nleqstate.get_fi()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.innerobjGet">
            <summary>Задает оболочка совместимости nleqstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.jGet">
            <summary>Задает оболочка совместимости nleqstate.get_j()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.make_copy">
            <summary>Задает оболочка совместимости nleqstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.needfGet">
            <summary>Задает оболочка совместимости nleqstate.get_needf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.needfSetBoolean">
            <summary>Задает оболочка совместимости nleqstate.set_needf(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.needfijGet">
            <summary>Задает оболочка совместимости nleqstate.get_needfij()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.needfijSetBoolean">
            <summary>Задает оболочка совместимости nleqstate.set_needfij(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.xGet">
            <summary>Задает оболочка совместимости nleqstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.xupdatedGet">
            <summary>Задает оболочка совместимости nleqstate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости nleqstate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnleqstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.AllInstances.fGet">
            <summary>Задает оболочка совместимости nleqstate.get_f()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.AllInstances.fSetDouble">
            <summary>Задает оболочка совместимости nleqstate.set_f(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.AllInstances.fiGet">
            <summary>Задает оболочка совместимости nleqstate.get_fi()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости nleqstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.AllInstances.jGet">
            <summary>Задает оболочка совместимости nleqstate.get_j()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости nleqstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.AllInstances.needfGet">
            <summary>Задает оболочка совместимости nleqstate.get_needf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.AllInstances.needfSetBoolean">
            <summary>Задает оболочка совместимости nleqstate.set_needf(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.AllInstances.needfijGet">
            <summary>Задает оболочка совместимости nleqstate.get_needfij()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.AllInstances.needfijSetBoolean">
            <summary>Задает оболочка совместимости nleqstate.set_needfij(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.AllInstances.xGet">
            <summary>Задает оболочка совместимости nleqstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.AllInstances.xupdatedGet">
            <summary>Задает оболочка совместимости nleqstate.get_xupdated()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnleqstate.AllInstances.xupdatedSetBoolean">
            <summary>Задает оболочка совместимости nleqstate.set_xupdated(Boolean value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnormaldistr">
            <summary>Тип оболочки совместимости для alglib+normaldistr</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormaldistr.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormaldistr.#ctor(alglib.normaldistr)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormaldistr.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormaldistr.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormaldistr.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormaldistr.Constructor">
            <summary>Задает оболочка совместимости normaldistr.normaldistr()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormaldistr.errorfunctionDouble">
            <summary>Задает оболочка совместимости normaldistr.errorfunction(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormaldistr.errorfunctioncDouble">
            <summary>Задает оболочка совместимости normaldistr.errorfunctionc(Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormaldistr.inverfDouble">
            <summary>Задает оболочка совместимости normaldistr.inverf(Double e)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormaldistr.invnormaldistributionDouble">
            <summary>Задает оболочка совместимости normaldistr.invnormaldistribution(Double y0)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormaldistr.normaldistributionDouble">
            <summary>Задает оболочка совместимости normaldistr.normaldistribution(Double x)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnormaldistr.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnormestimator">
            <summary>Тип оболочки совместимости для alglib+normestimator</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormestimator.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormestimator.#ctor(alglib.normestimator)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormestimator.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormestimator.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimator.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimator.Constructor">
            <summary>Задает оболочка совместимости normestimator.normestimator()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimator.normestimatorcreateInt32Int32Int32Int32normestimatoralglibnormestimatorstate">
            <summary>Задает оболочка совместимости normestimator.normestimatorcreate(Int32 m, Int32 n, Int32 nstart, Int32 nits, normestimatorstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimator.normestimatorestimatesparsenormestimatoralglibnormestimatorstatesparsealglibsparsematrix">
            <summary>Задает оболочка совместимости normestimator.normestimatorestimatesparse(normestimatorstate state, sparsematrix a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimator.normestimatoriterationnormestimatoralglibnormestimatorstate">
            <summary>Задает оболочка совместимости normestimator.normestimatoriteration(normestimatorstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimator.normestimatorrestartnormestimatoralglibnormestimatorstate">
            <summary>Задает оболочка совместимости normestimator.normestimatorrestart(normestimatorstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimator.normestimatorresultsnormestimatoralglibnormestimatorstateDoubleRef">
            <summary>Задает оболочка совместимости normestimator.normestimatorresults(normestimatorstate state, Double&amp; nrm)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimator.normestimatorsetseednormestimatoralglibnormestimatorstateInt32">
            <summary>Задает оболочка совместимости normestimator.normestimatorsetseed(normestimatorstate state, Int32 seedval)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnormestimator.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnormestimator.Shimnormestimatorstate">
            <summary>Тип оболочки совместимости для alglib+normestimator+normestimatorstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormestimator.Shimnormestimatorstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormestimator.Shimnormestimatorstate.#ctor(alglib.normestimator.normestimatorstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormestimator.Shimnormestimatorstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormestimator.Shimnormestimatorstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimator.Shimnormestimatorstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimator.Shimnormestimatorstate.Constructor">
            <summary>Задает оболочка совместимости normestimatorstate.normestimatorstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimator.Shimnormestimatorstate.init">
            <summary>Задает оболочка совместимости normestimatorstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimator.Shimnormestimatorstate.make_copy">
            <summary>Задает оболочка совместимости normestimatorstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnormestimator.Shimnormestimatorstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimator.Shimnormestimatorstate.AllInstances.init">
            <summary>Задает оболочка совместимости normestimatorstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimator.Shimnormestimatorstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости normestimatorstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnormestimatorstate">
            <summary>Тип оболочки совместимости для alglib+normestimatorstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormestimatorstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormestimatorstate.#ctor(alglib.normestimatorstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormestimatorstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimnormestimatorstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimatorstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimatorstate.Constructor">
            <summary>Задает оболочка совместимости normestimatorstate.normestimatorstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimatorstate.Constructornormestimatoralglibnormestimatorstate">
            <summary>Задает оболочка совместимости normestimatorstate.normestimatorstate(normestimatorstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimatorstate.innerobjGet">
            <summary>Задает оболочка совместимости normestimatorstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimatorstate.make_copy">
            <summary>Задает оболочка совместимости normestimatorstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimnormestimatorstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimatorstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости normestimatorstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimnormestimatorstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости normestimatorstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimntheory">
            <summary>Тип оболочки совместимости для alglib+ntheory</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimntheory.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimntheory.#ctor(alglib.ntheory)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimntheory.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimntheory.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimntheory.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimntheory.Constructor">
            <summary>Задает оболочка совместимости ntheory.ntheory()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimntheory.findprimitiverootandinverseInt32Int32RefInt32Ref">
            <summary>Задает оболочка совместимости ntheory.findprimitiverootandinverse(Int32 n, Int32&amp; proot, Int32&amp; invproot)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimntheory.isprimeInt32">
            <summary>Задает оболочка совместимости ntheory.isprime(Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimntheory.modexpInt32Int32Int32">
            <summary>Задает оболочка совместимости ntheory.modexp(Int32 a, Int32 b, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimntheory.modmulInt32Int32Int32">
            <summary>Задает оболочка совместимости ntheory.modmul(Int32 a, Int32 b, Int32 n)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimntheory.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimodesolver">
            <summary>Тип оболочки совместимости для alglib+odesolver</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolver.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolver.#ctor(alglib.odesolver)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolver.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolver.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.Constructor">
            <summary>Задает оболочка совместимости odesolver.odesolver()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.odesolverinitInt32DoubleArrayInt32DoubleArrayInt32DoubleDoubleodesolveralglibodesolverstate">
            <summary>Задает оболочка совместимости odesolver.odesolverinit(Int32 solvertype, Double[] y, Int32 n, Double[] x, Int32 m, Double eps, Double h, odesolverstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.odesolveriterationodesolveralglibodesolverstate">
            <summary>Задает оболочка совместимости odesolver.odesolveriteration(odesolverstate state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.odesolverresultsodesolveralglibodesolverstateInt32RefDoubleArrayRefDoubleMdArray2Refodesolveralglibodesolverreport">
            <summary>Задает оболочка совместимости odesolver.odesolverresults(odesolverstate state, Int32&amp; m, Double[]&amp; xtbl, Double[,]&amp; ytbl, odesolverreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.odesolverrkckDoubleArrayInt32DoubleArrayInt32DoubleDoubleodesolveralglibodesolverstate">
            <summary>Задает оболочка совместимости odesolver.odesolverrkck(Double[] y, Int32 n, Double[] x, Int32 m, Double eps, Double h, odesolverstate state)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimodesolver.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverreport">
            <summary>Тип оболочки совместимости для alglib+odesolver+odesolverreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverreport.#ctor(alglib.odesolver.odesolverreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverreport.Constructor">
            <summary>Задает оболочка совместимости odesolverreport.odesolverreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverreport.init">
            <summary>Задает оболочка совместимости odesolverreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverreport.make_copy">
            <summary>Задает оболочка совместимости odesolverreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverreport.AllInstances.init">
            <summary>Задает оболочка совместимости odesolverreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости odesolverreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverstate">
            <summary>Тип оболочки совместимости для alglib+odesolver+odesolverstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverstate.#ctor(alglib.odesolver.odesolverstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverstate.Constructor">
            <summary>Задает оболочка совместимости odesolverstate.odesolverstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverstate.init">
            <summary>Задает оболочка совместимости odesolverstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverstate.make_copy">
            <summary>Задает оболочка совместимости odesolverstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverstate.AllInstances.init">
            <summary>Задает оболочка совместимости odesolverstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolver.Shimodesolverstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости odesolverstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimodesolverreport">
            <summary>Тип оболочки совместимости для alglib+odesolverreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolverreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolverreport.#ctor(alglib.odesolverreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolverreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolverreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverreport.Constructor">
            <summary>Задает оболочка совместимости odesolverreport.odesolverreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverreport.Constructorodesolveralglibodesolverreport">
            <summary>Задает оболочка совместимости odesolverreport.odesolverreport(odesolverreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverreport.innerobjGet">
            <summary>Задает оболочка совместимости odesolverreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverreport.make_copy">
            <summary>Задает оболочка совместимости odesolverreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverreport.nfevGet">
            <summary>Задает оболочка совместимости odesolverreport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverreport.nfevSetInt32">
            <summary>Задает оболочка совместимости odesolverreport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverreport.terminationtypeGet">
            <summary>Задает оболочка совместимости odesolverreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverreport.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости odesolverreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimodesolverreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости odesolverreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости odesolverreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverreport.AllInstances.nfevGet">
            <summary>Задает оболочка совместимости odesolverreport.get_nfev()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverreport.AllInstances.nfevSetInt32">
            <summary>Задает оболочка совместимости odesolverreport.set_nfev(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverreport.AllInstances.terminationtypeGet">
            <summary>Задает оболочка совместимости odesolverreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverreport.AllInstances.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости odesolverreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimodesolverstate">
            <summary>Тип оболочки совместимости для alglib+odesolverstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolverstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolverstate.#ctor(alglib.odesolverstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolverstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimodesolverstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.Constructor">
            <summary>Задает оболочка совместимости odesolverstate.odesolverstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.Constructorodesolveralglibodesolverstate">
            <summary>Задает оболочка совместимости odesolverstate.odesolverstate(odesolverstate obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.dyGet">
            <summary>Задает оболочка совместимости odesolverstate.get_dy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.innerobjGet">
            <summary>Задает оболочка совместимости odesolverstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.make_copy">
            <summary>Задает оболочка совместимости odesolverstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.needdyGet">
            <summary>Задает оболочка совместимости odesolverstate.get_needdy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.needdySetBoolean">
            <summary>Задает оболочка совместимости odesolverstate.set_needdy(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.xGet">
            <summary>Задает оболочка совместимости odesolverstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.xSetDouble">
            <summary>Задает оболочка совместимости odesolverstate.set_x(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.yGet">
            <summary>Задает оболочка совместимости odesolverstate.get_y()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimodesolverstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.AllInstances.dyGet">
            <summary>Задает оболочка совместимости odesolverstate.get_dy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости odesolverstate.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости odesolverstate.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.AllInstances.needdyGet">
            <summary>Задает оболочка совместимости odesolverstate.get_needdy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.AllInstances.needdySetBoolean">
            <summary>Задает оболочка совместимости odesolverstate.set_needdy(Boolean value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.AllInstances.xGet">
            <summary>Задает оболочка совместимости odesolverstate.get_x()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.AllInstances.xSetDouble">
            <summary>Задает оболочка совместимости odesolverstate.set_x(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimodesolverstate.AllInstances.yGet">
            <summary>Задает оболочка совместимости odesolverstate.get_y()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimoptserv">
            <summary>Тип оболочки совместимости для alglib+optserv</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimoptserv.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimoptserv.#ctor(alglib.optserv)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimoptserv.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimoptserv.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.Constructor">
            <summary>Задает оболочка совместимости optserv.optserv()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.applylowrankpreconditionerDoubleArrayoptservalglibprecbuflowrank">
            <summary>Задает оболочка совместимости optserv.applylowrankpreconditioner(Double[] s, precbuflowrank buf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.calculatestepboundDoubleArrayDoubleArrayDoubleDoubleArrayBooleanArrayDoubleArrayBooleanArrayInt32Int32Int32RefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости optserv.calculatestepbound(Double[] x, Double[] d, Double alpha, Double[] bndl, Boolean[] havebndl, Double[] bndu, Boolean[] havebndu, Int32 nmain, Int32 nslack, Int32&amp; variabletofreeze, Double&amp; valuetofreeze, Double&amp; maxsteplen)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.derivativecheckDoubleDoubleDoubleDoubleDoubleDoubleDouble">
            <summary>Задает оболочка совместимости optserv.derivativecheck(Double f0, Double df0, Double f1, Double df1, Double f, Double df, Double width)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.enforceboundaryconstraintsDoubleArrayRefDoubleArrayBooleanArrayDoubleArrayBooleanArrayInt32Int32">
            <summary>Задает оболочка совместимости optserv.enforceboundaryconstraints(Double[]&amp; x, Double[] bl, Boolean[] havebl, Double[] bu, Boolean[] havebu, Int32 nmain, Int32 nslack)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.estimateparabolicmodelDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt32RefInt32Ref">
            <summary>Задает оболочка совместимости optserv.estimateparabolicmodel(Double absasum, Double absasum2, Double mx, Double mb, Double md, Double d1, Double d2, Int32&amp; d1est, Int32&amp; d2est)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.filterdirectionDoubleArrayRefDoubleArrayDoubleArrayBooleanArrayDoubleArrayBooleanArrayDoubleArrayInt32Int32Double">
            <summary>Задает оболочка совместимости optserv.filterdirection(Double[]&amp; d, Double[] x, Double[] bndl, Boolean[] havebndl, Double[] bndu, Boolean[] havebndu, Double[] s, Int32 nmain, Int32 nslack, Double droptol)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.findfeasiblepointDoubleArrayRefDoubleArrayBooleanArrayDoubleArrayBooleanArrayInt32Int32DoubleMdArray2Int32DoubleInt32RefInt32Ref">
            <summary>Задает оболочка совместимости optserv.findfeasiblepoint(Double[]&amp; x, Double[] bndl, Boolean[] havebndl, Double[] bndu, Boolean[] havebndu, Int32 nmain, Int32 nslack, Double[,] ce, Int32 k, Double epsi, Int32&amp; qpits, Int32&amp; gpaits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.inexactlbfgspreconditionerDoubleArrayInt32DoubleArrayDoubleArrayDoubleMdArray2Int32optservalglibprecbuflbfgs">
            <summary>Задает оболочка совместимости optserv.inexactlbfgspreconditioner(Double[] s, Int32 n, Double[] d, Double[] c, Double[,] w, Int32 k, precbuflbfgs buf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.numberofchangedconstraintsDoubleArrayDoubleArrayDoubleArrayBooleanArrayDoubleArrayBooleanArrayInt32Int32">
            <summary>Задает оболочка совместимости optserv.numberofchangedconstraints(Double[] x, Double[] xprev, Double[] bndl, Boolean[] havebndl, Double[] bndu, Boolean[] havebndu, Int32 nmain, Int32 nslack)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.postprocessboundedstepDoubleArrayRefDoubleArrayDoubleArrayBooleanArrayDoubleArrayBooleanArrayInt32Int32Int32DoubleDoubleDouble">
            <summary>Задает оболочка совместимости optserv.postprocessboundedstep(Double[]&amp; x, Double[] xprev, Double[] bndl, Boolean[] havebndl, Double[] bndu, Boolean[] havebndu, Int32 nmain, Int32 nslack, Int32 variabletofreeze, Double valuetofreeze, Double steptaken, Double maxsteplen)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.preparelowrankpreconditionerDoubleArrayDoubleArrayDoubleMdArray2Int32Int32optservalglibprecbuflowrank">
            <summary>Задает оболочка совместимости optserv.preparelowrankpreconditioner(Double[] d, Double[] c, Double[,] w, Int32 n, Int32 k, precbuflowrank buf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.projectgradientintobcDoubleArrayDoubleArrayRefDoubleArrayBooleanArrayDoubleArrayBooleanArrayInt32Int32">
            <summary>Задает оболочка совместимости optserv.projectgradientintobc(Double[] x, Double[]&amp; g, Double[] bl, Boolean[] havebl, Double[] bu, Boolean[] havebu, Int32 nmain, Int32 nslack)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.trimfunctionDoubleRefDoubleArrayRefInt32Double">
            <summary>Задает оболочка совместимости optserv.trimfunction(Double&amp; f, Double[]&amp; g, Int32 n, Double threshold)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.trimprepareDoubleDoubleRef">
            <summary>Задает оболочка совместимости optserv.trimprepare(Double f, Double&amp; threshold)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimoptserv.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflbfgs">
            <summary>Тип оболочки совместимости для alglib+optserv+precbuflbfgs</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflbfgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflbfgs.#ctor(alglib.optserv.precbuflbfgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflbfgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflbfgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflbfgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflbfgs.Constructor">
            <summary>Задает оболочка совместимости precbuflbfgs.precbuflbfgs()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflbfgs.init">
            <summary>Задает оболочка совместимости precbuflbfgs.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflbfgs.make_copy">
            <summary>Задает оболочка совместимости precbuflbfgs.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflbfgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflbfgs.AllInstances.init">
            <summary>Задает оболочка совместимости precbuflbfgs.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflbfgs.AllInstances.make_copy">
            <summary>Задает оболочка совместимости precbuflbfgs.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflowrank">
            <summary>Тип оболочки совместимости для alglib+optserv+precbuflowrank</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflowrank.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflowrank.#ctor(alglib.optserv.precbuflowrank)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflowrank.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflowrank.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflowrank.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflowrank.Constructor">
            <summary>Задает оболочка совместимости precbuflowrank.precbuflowrank()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflowrank.init">
            <summary>Задает оболочка совместимости precbuflowrank.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflowrank.make_copy">
            <summary>Задает оболочка совместимости precbuflowrank.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflowrank.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflowrank.AllInstances.init">
            <summary>Задает оболочка совместимости precbuflowrank.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimoptserv.Shimprecbuflowrank.AllInstances.make_copy">
            <summary>Задает оболочка совместимости precbuflowrank.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimortfac">
            <summary>Тип оболочки совместимости для alglib+ortfac</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimortfac.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimortfac.#ctor(alglib.ortfac)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimortfac.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimortfac.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.Constructor">
            <summary>Задает оболочка совместимости ortfac.ortfac()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac._pexec_cmatrixlqalglibcomplexMdArray2RefInt32Int32alglibcomplexArrayRef">
            <summary>Задает оболочка совместимости ortfac._pexec_cmatrixlq(complex[,]&amp; a, Int32 m, Int32 n, complex[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac._pexec_cmatrixlqunpackqalglibcomplexMdArray2Int32Int32alglibcomplexArrayInt32alglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac._pexec_cmatrixlqunpackq(complex[,] a, Int32 m, Int32 n, complex[] tau, Int32 qrows, complex[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac._pexec_cmatrixqralglibcomplexMdArray2RefInt32Int32alglibcomplexArrayRef">
            <summary>Задает оболочка совместимости ortfac._pexec_cmatrixqr(complex[,]&amp; a, Int32 m, Int32 n, complex[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac._pexec_cmatrixqrunpackqalglibcomplexMdArray2Int32Int32alglibcomplexArrayInt32alglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac._pexec_cmatrixqrunpackq(complex[,] a, Int32 m, Int32 n, complex[] tau, Int32 qcolumns, complex[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac._pexec_rmatrixlqDoubleMdArray2RefInt32Int32DoubleArrayRef">
            <summary>Задает оболочка совместимости ortfac._pexec_rmatrixlq(Double[,]&amp; a, Int32 m, Int32 n, Double[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac._pexec_rmatrixlqunpackqDoubleMdArray2Int32Int32DoubleArrayInt32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac._pexec_rmatrixlqunpackq(Double[,] a, Int32 m, Int32 n, Double[] tau, Int32 qrows, Double[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac._pexec_rmatrixqrDoubleMdArray2RefInt32Int32DoubleArrayRef">
            <summary>Задает оболочка совместимости ortfac._pexec_rmatrixqr(Double[,]&amp; a, Int32 m, Int32 n, Double[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac._pexec_rmatrixqrunpackqDoubleMdArray2Int32Int32DoubleArrayInt32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac._pexec_rmatrixqrunpackq(Double[,] a, Int32 m, Int32 n, Double[] tau, Int32 qcolumns, Double[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.cmatrixblockreflectoralglibcomplexMdArray2RefalglibcomplexArrayRefBooleanInt32Int32alglibcomplexMdArray2RefalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости ortfac.cmatrixblockreflector(complex[,]&amp; a, complex[]&amp; tau, Boolean columnwisea, Int32 lengtha, Int32 blocksize, complex[,]&amp; t, complex[]&amp; work)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.cmatrixlqalglibcomplexMdArray2RefInt32Int32alglibcomplexArrayRef">
            <summary>Задает оболочка совместимости ortfac.cmatrixlq(complex[,]&amp; a, Int32 m, Int32 n, complex[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.cmatrixlqbasecasealglibcomplexMdArray2RefInt32Int32alglibcomplexArrayRefalglibcomplexArrayRefalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости ortfac.cmatrixlqbasecase(complex[,]&amp; a, Int32 m, Int32 n, complex[]&amp; work, complex[]&amp; t, complex[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.cmatrixlqunpacklalglibcomplexMdArray2Int32Int32alglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac.cmatrixlqunpackl(complex[,] a, Int32 m, Int32 n, complex[,]&amp; l)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.cmatrixlqunpackqalglibcomplexMdArray2Int32Int32alglibcomplexArrayInt32alglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac.cmatrixlqunpackq(complex[,] a, Int32 m, Int32 n, complex[] tau, Int32 qrows, complex[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.cmatrixqralglibcomplexMdArray2RefInt32Int32alglibcomplexArrayRef">
            <summary>Задает оболочка совместимости ortfac.cmatrixqr(complex[,]&amp; a, Int32 m, Int32 n, complex[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.cmatrixqrbasecasealglibcomplexMdArray2RefInt32Int32alglibcomplexArrayRefalglibcomplexArrayRefalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости ortfac.cmatrixqrbasecase(complex[,]&amp; a, Int32 m, Int32 n, complex[]&amp; work, complex[]&amp; t, complex[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.cmatrixqrunpackqalglibcomplexMdArray2Int32Int32alglibcomplexArrayInt32alglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac.cmatrixqrunpackq(complex[,] a, Int32 m, Int32 n, complex[] tau, Int32 qcolumns, complex[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.cmatrixqrunpackralglibcomplexMdArray2Int32Int32alglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac.cmatrixqrunpackr(complex[,] a, Int32 m, Int32 n, complex[,]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.hmatrixtdalglibcomplexMdArray2RefInt32BooleanalglibcomplexArrayRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости ortfac.hmatrixtd(complex[,]&amp; a, Int32 n, Boolean isupper, complex[]&amp; tau, Double[]&amp; d, Double[]&amp; e)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.hmatrixtdunpackqalglibcomplexMdArray2Int32BooleanalglibcomplexArrayalglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac.hmatrixtdunpackq(complex[,] a, Int32 n, Boolean isupper, complex[] tau, complex[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixbdDoubleMdArray2RefInt32Int32DoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости ortfac.rmatrixbd(Double[,]&amp; a, Int32 m, Int32 n, Double[]&amp; tauq, Double[]&amp; taup)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixbdmultiplybypDoubleMdArray2Int32Int32DoubleArrayDoubleMdArray2RefInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости ortfac.rmatrixbdmultiplybyp(Double[,] qp, Int32 m, Int32 n, Double[] taup, Double[,]&amp; z, Int32 zrows, Int32 zcolumns, Boolean fromtheright, Boolean dotranspose)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixbdmultiplybyqDoubleMdArray2Int32Int32DoubleArrayDoubleMdArray2RefInt32Int32BooleanBoolean">
            <summary>Задает оболочка совместимости ortfac.rmatrixbdmultiplybyq(Double[,] qp, Int32 m, Int32 n, Double[] tauq, Double[,]&amp; z, Int32 zrows, Int32 zcolumns, Boolean fromtheright, Boolean dotranspose)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixbdunpackdiagonalsDoubleMdArray2Int32Int32BooleanRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости ortfac.rmatrixbdunpackdiagonals(Double[,] b, Int32 m, Int32 n, Boolean&amp; isupper, Double[]&amp; d, Double[]&amp; e)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixbdunpackptDoubleMdArray2Int32Int32DoubleArrayInt32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac.rmatrixbdunpackpt(Double[,] qp, Int32 m, Int32 n, Double[] taup, Int32 ptrows, Double[,]&amp; pt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixbdunpackqDoubleMdArray2Int32Int32DoubleArrayInt32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac.rmatrixbdunpackq(Double[,] qp, Int32 m, Int32 n, Double[] tauq, Int32 qcolumns, Double[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixblockreflectorDoubleMdArray2RefDoubleArrayRefBooleanInt32Int32DoubleMdArray2RefDoubleArrayRef">
            <summary>Задает оболочка совместимости ortfac.rmatrixblockreflector(Double[,]&amp; a, Double[]&amp; tau, Boolean columnwisea, Int32 lengtha, Int32 blocksize, Double[,]&amp; t, Double[]&amp; work)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixhessenbergDoubleMdArray2RefInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости ortfac.rmatrixhessenberg(Double[,]&amp; a, Int32 n, Double[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixhessenbergunpackhDoubleMdArray2Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac.rmatrixhessenbergunpackh(Double[,] a, Int32 n, Double[,]&amp; h)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixhessenbergunpackqDoubleMdArray2Int32DoubleArrayDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac.rmatrixhessenbergunpackq(Double[,] a, Int32 n, Double[] tau, Double[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixlqDoubleMdArray2RefInt32Int32DoubleArrayRef">
            <summary>Задает оболочка совместимости ortfac.rmatrixlq(Double[,]&amp; a, Int32 m, Int32 n, Double[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixlqbasecaseDoubleMdArray2RefInt32Int32DoubleArrayRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости ortfac.rmatrixlqbasecase(Double[,]&amp; a, Int32 m, Int32 n, Double[]&amp; work, Double[]&amp; t, Double[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixlqunpacklDoubleMdArray2Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac.rmatrixlqunpackl(Double[,] a, Int32 m, Int32 n, Double[,]&amp; l)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixlqunpackqDoubleMdArray2Int32Int32DoubleArrayInt32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac.rmatrixlqunpackq(Double[,] a, Int32 m, Int32 n, Double[] tau, Int32 qrows, Double[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixqrDoubleMdArray2RefInt32Int32DoubleArrayRef">
            <summary>Задает оболочка совместимости ortfac.rmatrixqr(Double[,]&amp; a, Int32 m, Int32 n, Double[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixqrbasecaseDoubleMdArray2RefInt32Int32DoubleArrayRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости ortfac.rmatrixqrbasecase(Double[,]&amp; a, Int32 m, Int32 n, Double[]&amp; work, Double[]&amp; t, Double[]&amp; tau)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixqrunpackqDoubleMdArray2Int32Int32DoubleArrayInt32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac.rmatrixqrunpackq(Double[,] a, Int32 m, Int32 n, Double[] tau, Int32 qcolumns, Double[,]&amp; q)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.rmatrixqrunpackrDoubleMdArray2Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac.rmatrixqrunpackr(Double[,] a, Int32 m, Int32 n, Double[,]&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.smatrixtdDoubleMdArray2RefInt32BooleanDoubleArrayRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости ortfac.smatrixtd(Double[,]&amp; a, Int32 n, Boolean isupper, Double[]&amp; tau, Double[]&amp; d, Double[]&amp; e)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimortfac.smatrixtdunpackqDoubleMdArray2Int32BooleanDoubleArrayDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости ortfac.smatrixtdunpackq(Double[,] a, Int32 n, Boolean isupper, Double[] tau, Double[,]&amp; q)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimortfac.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimparametric">
            <summary>Тип оболочки совместимости для alglib+parametric</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimparametric.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimparametric.#ctor(alglib.parametric)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimparametric.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimparametric.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.Constructor">
            <summary>Задает оболочка совместимости parametric.parametric()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.parametricrdpfixedDoubleMdArray2Int32Int32Int32DoubleDoubleMdArray2RefInt32ArrayRefInt32Ref">
            <summary>Задает оболочка совместимости parametric.parametricrdpfixed(Double[,] x, Int32 n, Int32 d, Int32 stopm, Double stopeps, Double[,]&amp; x2, Int32[]&amp; idx2, Int32&amp; nsections)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline2arclengthparametricalglibpspline2interpolantDoubleDouble">
            <summary>Задает оболочка совместимости parametric.pspline2arclength(pspline2interpolant p, Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline2buildDoubleMdArray2Int32Int32Int32parametricalglibpspline2interpolant">
            <summary>Задает оболочка совместимости parametric.pspline2build(Double[,] xy, Int32 n, Int32 st, Int32 pt, pspline2interpolant p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline2buildperiodicDoubleMdArray2Int32Int32Int32parametricalglibpspline2interpolant">
            <summary>Задает оболочка совместимости parametric.pspline2buildperiodic(Double[,] xy, Int32 n, Int32 st, Int32 pt, pspline2interpolant p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline2calcparametricalglibpspline2interpolantDoubleDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости parametric.pspline2calc(pspline2interpolant p, Double t, Double&amp; x, Double&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline2diff2parametricalglibpspline2interpolantDoubleDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости parametric.pspline2diff2(pspline2interpolant p, Double t, Double&amp; x, Double&amp; dx, Double&amp; d2x, Double&amp; y, Double&amp; dy, Double&amp; d2y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline2diffparametricalglibpspline2interpolantDoubleDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости parametric.pspline2diff(pspline2interpolant p, Double t, Double&amp; x, Double&amp; dx, Double&amp; y, Double&amp; dy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline2parDoubleMdArray2Int32Int32DoubleArrayRef">
            <summary>Задает оболочка совместимости parametric.pspline2par(Double[,] xy, Int32 n, Int32 pt, Double[]&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline2parametervaluesparametricalglibpspline2interpolantInt32RefDoubleArrayRef">
            <summary>Задает оболочка совместимости parametric.pspline2parametervalues(pspline2interpolant p, Int32&amp; n, Double[]&amp; t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline2tangentparametricalglibpspline2interpolantDoubleDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости parametric.pspline2tangent(pspline2interpolant p, Double t, Double&amp; x, Double&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline3arclengthparametricalglibpspline3interpolantDoubleDouble">
            <summary>Задает оболочка совместимости parametric.pspline3arclength(pspline3interpolant p, Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline3buildDoubleMdArray2Int32Int32Int32parametricalglibpspline3interpolant">
            <summary>Задает оболочка совместимости parametric.pspline3build(Double[,] xy, Int32 n, Int32 st, Int32 pt, pspline3interpolant p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline3buildperiodicDoubleMdArray2Int32Int32Int32parametricalglibpspline3interpolant">
            <summary>Задает оболочка совместимости parametric.pspline3buildperiodic(Double[,] xy, Int32 n, Int32 st, Int32 pt, pspline3interpolant p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline3calcparametricalglibpspline3interpolantDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости parametric.pspline3calc(pspline3interpolant p, Double t, Double&amp; x, Double&amp; y, Double&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline3diff2parametricalglibpspline3interpolantDoubleDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости parametric.pspline3diff2(pspline3interpolant p, Double t, Double&amp; x, Double&amp; dx, Double&amp; d2x, Double&amp; y, Double&amp; dy, Double&amp; d2y, Double&amp; z, Double&amp; dz, Double&amp; d2z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline3diffparametricalglibpspline3interpolantDoubleDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости parametric.pspline3diff(pspline3interpolant p, Double t, Double&amp; x, Double&amp; dx, Double&amp; y, Double&amp; dy, Double&amp; z, Double&amp; dz)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline3parDoubleMdArray2Int32Int32DoubleArrayRef">
            <summary>Задает оболочка совместимости parametric.pspline3par(Double[,] xy, Int32 n, Int32 pt, Double[]&amp; p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline3parametervaluesparametricalglibpspline3interpolantInt32RefDoubleArrayRef">
            <summary>Задает оболочка совместимости parametric.pspline3parametervalues(pspline3interpolant p, Int32&amp; n, Double[]&amp; t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.pspline3tangentparametricalglibpspline3interpolantDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости parametric.pspline3tangent(pspline3interpolant p, Double t, Double&amp; x, Double&amp; y, Double&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.rdpanalyzesectionparDoubleMdArray2Int32Int32Int32Int32RefDoubleRef">
            <summary>Задает оболочка совместимости parametric.rdpanalyzesectionpar(Double[,] xy, Int32 i0, Int32 i1, Int32 d, Int32&amp; worstidx, Double&amp; worsterror)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimparametric.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimparametric.Shimpspline2interpolant">
            <summary>Тип оболочки совместимости для alglib+parametric+pspline2interpolant</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimparametric.Shimpspline2interpolant.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimparametric.Shimpspline2interpolant.#ctor(alglib.parametric.pspline2interpolant)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimparametric.Shimpspline2interpolant.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimparametric.Shimpspline2interpolant.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.Shimpspline2interpolant.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.Shimpspline2interpolant.Constructor">
            <summary>Задает оболочка совместимости pspline2interpolant.pspline2interpolant()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.Shimpspline2interpolant.init">
            <summary>Задает оболочка совместимости pspline2interpolant.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.Shimpspline2interpolant.make_copy">
            <summary>Задает оболочка совместимости pspline2interpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimparametric.Shimpspline2interpolant.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.Shimpspline2interpolant.AllInstances.init">
            <summary>Задает оболочка совместимости pspline2interpolant.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.Shimpspline2interpolant.AllInstances.make_copy">
            <summary>Задает оболочка совместимости pspline2interpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimparametric.Shimpspline3interpolant">
            <summary>Тип оболочки совместимости для alglib+parametric+pspline3interpolant</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimparametric.Shimpspline3interpolant.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimparametric.Shimpspline3interpolant.#ctor(alglib.parametric.pspline3interpolant)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimparametric.Shimpspline3interpolant.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimparametric.Shimpspline3interpolant.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.Shimpspline3interpolant.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.Shimpspline3interpolant.Constructor">
            <summary>Задает оболочка совместимости pspline3interpolant.pspline3interpolant()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.Shimpspline3interpolant.init">
            <summary>Задает оболочка совместимости pspline3interpolant.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.Shimpspline3interpolant.make_copy">
            <summary>Задает оболочка совместимости pspline3interpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimparametric.Shimpspline3interpolant.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.Shimpspline3interpolant.AllInstances.init">
            <summary>Задает оболочка совместимости pspline3interpolant.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimparametric.Shimpspline3interpolant.AllInstances.make_copy">
            <summary>Задает оболочка совместимости pspline3interpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpca">
            <summary>Тип оболочки совместимости для alglib+pca</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpca.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpca.#ctor(alglib.pca)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpca.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpca.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpca.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpca.Constructor">
            <summary>Задает оболочка совместимости pca.pca()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpca.pcabuildbasisDoubleMdArray2Int32Int32Int32RefDoubleArrayRefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости pca.pcabuildbasis(Double[,] x, Int32 npoints, Int32 nvars, Int32&amp; info, Double[]&amp; s2, Double[,]&amp; v)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpca.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpoissondistr">
            <summary>Тип оболочки совместимости для alglib+poissondistr</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpoissondistr.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpoissondistr.#ctor(alglib.poissondistr)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpoissondistr.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpoissondistr.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpoissondistr.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpoissondistr.Constructor">
            <summary>Задает оболочка совместимости poissondistr.poissondistr()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpoissondistr.invpoissondistributionInt32Double">
            <summary>Задает оболочка совместимости poissondistr.invpoissondistribution(Int32 k, Double y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpoissondistr.poissoncdistributionInt32Double">
            <summary>Задает оболочка совместимости poissondistr.poissoncdistribution(Int32 k, Double m)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpoissondistr.poissondistributionInt32Double">
            <summary>Задает оболочка совместимости poissondistr.poissondistribution(Int32 k, Double m)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpoissondistr.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpolint">
            <summary>Тип оболочки совместимости для alglib+polint</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolint.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolint.#ctor(alglib.polint)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolint.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolint.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolint.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolint.Constructor">
            <summary>Задает оболочка совместимости polint.polint()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolint.polynomialbar2chebratintalglibbarycentricinterpolantDoubleDoubleDoubleArrayRef">
            <summary>Задает оболочка совместимости polint.polynomialbar2cheb(barycentricinterpolant p, Double a, Double b, Double[]&amp; t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolint.polynomialbar2powratintalglibbarycentricinterpolantDoubleDoubleDoubleArrayRef">
            <summary>Задает оболочка совместимости polint.polynomialbar2pow(barycentricinterpolant p, Double c, Double s, Double[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolint.polynomialbuildDoubleArrayDoubleArrayInt32ratintalglibbarycentricinterpolant">
            <summary>Задает оболочка совместимости polint.polynomialbuild(Double[] x, Double[] y, Int32 n, barycentricinterpolant p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolint.polynomialbuildcheb1DoubleDoubleDoubleArrayInt32ratintalglibbarycentricinterpolant">
            <summary>Задает оболочка совместимости polint.polynomialbuildcheb1(Double a, Double b, Double[] y, Int32 n, barycentricinterpolant p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolint.polynomialbuildcheb2DoubleDoubleDoubleArrayInt32ratintalglibbarycentricinterpolant">
            <summary>Задает оболочка совместимости polint.polynomialbuildcheb2(Double a, Double b, Double[] y, Int32 n, barycentricinterpolant p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolint.polynomialbuildeqdistDoubleDoubleDoubleArrayInt32ratintalglibbarycentricinterpolant">
            <summary>Задает оболочка совместимости polint.polynomialbuildeqdist(Double a, Double b, Double[] y, Int32 n, barycentricinterpolant p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolint.polynomialcalccheb1DoubleDoubleDoubleArrayInt32Double">
            <summary>Задает оболочка совместимости polint.polynomialcalccheb1(Double a, Double b, Double[] f, Int32 n, Double t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolint.polynomialcalccheb2DoubleDoubleDoubleArrayInt32Double">
            <summary>Задает оболочка совместимости polint.polynomialcalccheb2(Double a, Double b, Double[] f, Int32 n, Double t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolint.polynomialcalceqdistDoubleDoubleDoubleArrayInt32Double">
            <summary>Задает оболочка совместимости polint.polynomialcalceqdist(Double a, Double b, Double[] f, Int32 n, Double t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolint.polynomialcheb2barDoubleArrayInt32DoubleDoubleratintalglibbarycentricinterpolant">
            <summary>Задает оболочка совместимости polint.polynomialcheb2bar(Double[] t, Int32 n, Double a, Double b, barycentricinterpolant p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolint.polynomialpow2barDoubleArrayInt32DoubleDoubleratintalglibbarycentricinterpolant">
            <summary>Задает оболочка совместимости polint.polynomialpow2bar(Double[] a, Int32 n, Double c, Double s, barycentricinterpolant p)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpolint.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpolynomialfitreport">
            <summary>Тип оболочки совместимости для alglib+polynomialfitreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialfitreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialfitreport.#ctor(alglib.polynomialfitreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialfitreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialfitreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.Constructor">
            <summary>Задает оболочка совместимости polynomialfitreport.polynomialfitreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.Constructorlsfitalglibpolynomialfitreport">
            <summary>Задает оболочка совместимости polynomialfitreport.polynomialfitreport(polynomialfitreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.avgerrorGet">
            <summary>Задает оболочка совместимости polynomialfitreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.avgerrorSetDouble">
            <summary>Задает оболочка совместимости polynomialfitreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.avgrelerrorGet">
            <summary>Задает оболочка совместимости polynomialfitreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости polynomialfitreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.innerobjGet">
            <summary>Задает оболочка совместимости polynomialfitreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.make_copy">
            <summary>Задает оболочка совместимости polynomialfitreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.maxerrorGet">
            <summary>Задает оболочка совместимости polynomialfitreport.get_maxerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.maxerrorSetDouble">
            <summary>Задает оболочка совместимости polynomialfitreport.set_maxerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.rmserrorGet">
            <summary>Задает оболочка совместимости polynomialfitreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.rmserrorSetDouble">
            <summary>Задает оболочка совместимости polynomialfitreport.set_rmserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.taskrcondGet">
            <summary>Задает оболочка совместимости polynomialfitreport.get_taskrcond()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.taskrcondSetDouble">
            <summary>Задает оболочка совместимости polynomialfitreport.set_taskrcond(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpolynomialfitreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.AllInstances.avgerrorGet">
            <summary>Задает оболочка совместимости polynomialfitreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.AllInstances.avgerrorSetDouble">
            <summary>Задает оболочка совместимости polynomialfitreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.AllInstances.avgrelerrorGet">
            <summary>Задает оболочка совместимости polynomialfitreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.AllInstances.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости polynomialfitreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости polynomialfitreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости polynomialfitreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.AllInstances.maxerrorGet">
            <summary>Задает оболочка совместимости polynomialfitreport.get_maxerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.AllInstances.maxerrorSetDouble">
            <summary>Задает оболочка совместимости polynomialfitreport.set_maxerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.AllInstances.rmserrorGet">
            <summary>Задает оболочка совместимости polynomialfitreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.AllInstances.rmserrorSetDouble">
            <summary>Задает оболочка совместимости polynomialfitreport.set_rmserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.AllInstances.taskrcondGet">
            <summary>Задает оболочка совместимости polynomialfitreport.get_taskrcond()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialfitreport.AllInstances.taskrcondSetDouble">
            <summary>Задает оболочка совместимости polynomialfitreport.set_taskrcond(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpolynomialsolver">
            <summary>Тип оболочки совместимости для alglib+polynomialsolver</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialsolver.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialsolver.#ctor(alglib.polynomialsolver)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialsolver.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialsolver.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolver.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolver.Constructor">
            <summary>Задает оболочка совместимости polynomialsolver.polynomialsolver()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolver.polynomialsolveDoubleArrayInt32alglibcomplexArrayRefpolynomialsolveralglibpolynomialsolverreport">
            <summary>Задает оболочка совместимости polynomialsolver.polynomialsolve(Double[] a, Int32 n, complex[]&amp; x, polynomialsolverreport rep)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpolynomialsolver.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpolynomialsolver.Shimpolynomialsolverreport">
            <summary>Тип оболочки совместимости для alglib+polynomialsolver+polynomialsolverreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialsolver.Shimpolynomialsolverreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialsolver.Shimpolynomialsolverreport.#ctor(alglib.polynomialsolver.polynomialsolverreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialsolver.Shimpolynomialsolverreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialsolver.Shimpolynomialsolverreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolver.Shimpolynomialsolverreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolver.Shimpolynomialsolverreport.Constructor">
            <summary>Задает оболочка совместимости polynomialsolverreport.polynomialsolverreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolver.Shimpolynomialsolverreport.init">
            <summary>Задает оболочка совместимости polynomialsolverreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolver.Shimpolynomialsolverreport.make_copy">
            <summary>Задает оболочка совместимости polynomialsolverreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpolynomialsolver.Shimpolynomialsolverreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolver.Shimpolynomialsolverreport.AllInstances.init">
            <summary>Задает оболочка совместимости polynomialsolverreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolver.Shimpolynomialsolverreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости polynomialsolverreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpolynomialsolverreport">
            <summary>Тип оболочки совместимости для alglib+polynomialsolverreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.#ctor(alglib.polynomialsolverreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.Constructor">
            <summary>Задает оболочка совместимости polynomialsolverreport.polynomialsolverreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.Constructorpolynomialsolveralglibpolynomialsolverreport">
            <summary>Задает оболочка совместимости polynomialsolverreport.polynomialsolverreport(polynomialsolverreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.innerobjGet">
            <summary>Задает оболочка совместимости polynomialsolverreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.make_copy">
            <summary>Задает оболочка совместимости polynomialsolverreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.maxerrGet">
            <summary>Задает оболочка совместимости polynomialsolverreport.get_maxerr()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.maxerrSetDouble">
            <summary>Задает оболочка совместимости polynomialsolverreport.set_maxerr(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости polynomialsolverreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости polynomialsolverreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.AllInstances.maxerrGet">
            <summary>Задает оболочка совместимости polynomialsolverreport.get_maxerr()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpolynomialsolverreport.AllInstances.maxerrSetDouble">
            <summary>Задает оболочка совместимости polynomialsolverreport.set_maxerr(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpsif">
            <summary>Тип оболочки совместимости для alglib+psif</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpsif.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpsif.#ctor(alglib.psif)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpsif.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpsif.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpsif.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpsif.Constructor">
            <summary>Задает оболочка совместимости psif.psif()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpsif.psiDouble">
            <summary>Задает оболочка совместимости psif.psi(Double x)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpsif.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpspline2interpolant">
            <summary>Тип оболочки совместимости для alglib+pspline2interpolant</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpspline2interpolant.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpspline2interpolant.#ctor(alglib.pspline2interpolant)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpspline2interpolant.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpspline2interpolant.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpspline2interpolant.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpspline2interpolant.Constructor">
            <summary>Задает оболочка совместимости pspline2interpolant.pspline2interpolant()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpspline2interpolant.Constructorparametricalglibpspline2interpolant">
            <summary>Задает оболочка совместимости pspline2interpolant.pspline2interpolant(pspline2interpolant obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpspline2interpolant.innerobjGet">
            <summary>Задает оболочка совместимости pspline2interpolant.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpspline2interpolant.make_copy">
            <summary>Задает оболочка совместимости pspline2interpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpspline2interpolant.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpspline2interpolant.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости pspline2interpolant.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpspline2interpolant.AllInstances.make_copy">
            <summary>Задает оболочка совместимости pspline2interpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpspline3interpolant">
            <summary>Тип оболочки совместимости для alglib+pspline3interpolant</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpspline3interpolant.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpspline3interpolant.#ctor(alglib.pspline3interpolant)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpspline3interpolant.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimpspline3interpolant.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpspline3interpolant.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpspline3interpolant.Constructor">
            <summary>Задает оболочка совместимости pspline3interpolant.pspline3interpolant()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpspline3interpolant.Constructorparametricalglibpspline3interpolant">
            <summary>Задает оболочка совместимости pspline3interpolant.pspline3interpolant(pspline3interpolant obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpspline3interpolant.innerobjGet">
            <summary>Задает оболочка совместимости pspline3interpolant.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpspline3interpolant.make_copy">
            <summary>Задает оболочка совместимости pspline3interpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimpspline3interpolant.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpspline3interpolant.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости pspline3interpolant.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimpspline3interpolant.AllInstances.make_copy">
            <summary>Задает оболочка совместимости pspline3interpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqpbleicsolver">
            <summary>Тип оболочки совместимости для alglib+qpbleicsolver</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpbleicsolver.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpbleicsolver.#ctor(alglib.qpbleicsolver)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpbleicsolver.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpbleicsolver.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.Constructor">
            <summary>Задает оболочка совместимости qpbleicsolver.qpbleicsolver()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.qpbleiccopysettingsqpbleicsolveralglibqpbleicsettingsqpbleicsolveralglibqpbleicsettings">
            <summary>Задает оболочка совместимости qpbleicsolver.qpbleiccopysettings(qpbleicsettings src, qpbleicsettings dst)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.qpbleicloaddefaultsInt32qpbleicsolveralglibqpbleicsettings">
            <summary>Задает оболочка совместимости qpbleicsolver.qpbleicloaddefaults(Int32 nmain, qpbleicsettings s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.qpbleicoptimizecqmodelsalglibconvexquadraticmodelsparsealglibsparsematrixInt32BooleanDoubleDoubleDoubleArrayDoubleArrayDoubleArrayDoubleArrayDoubleArrayInt32DoubleMdArray2Int32Int32qpbleicsolveralglibqpbleicsettingsqpbleicsolveralglibqpbleicbuffersBooleanR">
            <summary>Задает оболочка совместимости qpbleicsolver.qpbleicoptimize(convexquadraticmodel a, sparsematrix sparsea, Int32 akind, Boolean sparseaupper, Double absasum, Double absasum2, Double[] b, Double[] bndl, Double[] bndu, Double[] s, Double[] xorigin, Int32 n, Double[,] cleic, Int32 nec, Int32 nic, qpbleicsettings settings, qpbleicbuffers sstate, Boolean&amp; firstcall, Double[]&amp; xs, Int32&amp; terminationtype)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqpbleicsolver.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicbuffers">
            <summary>Тип оболочки совместимости для alglib+qpbleicsolver+qpbleicbuffers</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicbuffers.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicbuffers.#ctor(alglib.qpbleicsolver.qpbleicbuffers)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicbuffers.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicbuffers.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicbuffers.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicbuffers.Constructor">
            <summary>Задает оболочка совместимости qpbleicbuffers.qpbleicbuffers()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicbuffers.init">
            <summary>Задает оболочка совместимости qpbleicbuffers.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicbuffers.make_copy">
            <summary>Задает оболочка совместимости qpbleicbuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicbuffers.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicbuffers.AllInstances.init">
            <summary>Задает оболочка совместимости qpbleicbuffers.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicbuffers.AllInstances.make_copy">
            <summary>Задает оболочка совместимости qpbleicbuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicsettings">
            <summary>Тип оболочки совместимости для alglib+qpbleicsolver+qpbleicsettings</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicsettings.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicsettings.#ctor(alglib.qpbleicsolver.qpbleicsettings)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicsettings.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicsettings.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicsettings.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicsettings.Constructor">
            <summary>Задает оболочка совместимости qpbleicsettings.qpbleicsettings()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicsettings.init">
            <summary>Задает оболочка совместимости qpbleicsettings.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicsettings.make_copy">
            <summary>Задает оболочка совместимости qpbleicsettings.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicsettings.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicsettings.AllInstances.init">
            <summary>Задает оболочка совместимости qpbleicsettings.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpbleicsolver.Shimqpbleicsettings.AllInstances.make_copy">
            <summary>Задает оболочка совместимости qpbleicsettings.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqpcholeskysolver">
            <summary>Тип оболочки совместимости для alglib+qpcholeskysolver</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpcholeskysolver.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpcholeskysolver.#ctor(alglib.qpcholeskysolver)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpcholeskysolver.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpcholeskysolver.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Constructor">
            <summary>Задает оболочка совместимости qpcholeskysolver.qpcholeskysolver()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.boundedstepandactivationsactivesetsalglibsactivesetDoubleArrayInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости qpcholeskysolver.boundedstepandactivation(sactiveset sas, Double[] xn, Int32 n, Double[]&amp; buf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.constrainedoptimumsactivesetsalglibsactivesetcqmodelsalglibconvexquadraticmodelDoubleDoubleArrayDoubleArrayRefInt32DoubleArrayRefBooleanArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости qpcholeskysolver.constrainedoptimum(sactiveset sas, convexquadraticmodel a, Double anorm, Double[] b, Double[]&amp; xn, Int32 n, Double[]&amp; tmp, Boolean[]&amp; tmpb, Double[]&amp; lagrangec)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.modelvaluecqmodelsalglibconvexquadraticmodelDoubleArrayDoubleArrayInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости qpcholeskysolver.modelvalue(convexquadraticmodel a, Double[] b, Double[] xc, Int32 n, Double[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.qpcholeskycopysettingsqpcholeskysolveralglibqpcholeskysettingsqpcholeskysolveralglibqpcholeskysettings">
            <summary>Задает оболочка совместимости qpcholeskysolver.qpcholeskycopysettings(qpcholeskysettings src, qpcholeskysettings dst)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.qpcholeskyloaddefaultsInt32qpcholeskysolveralglibqpcholeskysettings">
            <summary>Задает оболочка совместимости qpcholeskysolver.qpcholeskyloaddefaults(Int32 nmain, qpcholeskysettings s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.qpcholeskyoptimizecqmodelsalglibconvexquadraticmodelDoubleDoubleArrayDoubleArrayDoubleArrayDoubleArrayDoubleArrayInt32DoubleMdArray2Int32Int32qpcholeskysolveralglibqpcholeskybuffersDoubleArrayRefInt32Ref">
            <summary>Задает оболочка совместимости qpcholeskysolver.qpcholeskyoptimize(convexquadraticmodel a, Double anorm, Double[] b, Double[] bndl, Double[] bndu, Double[] s, Double[] xorigin, Int32 n, Double[,] cleic, Int32 nec, Int32 nic, qpcholeskybuffers sstate, Double[]&amp; xsc, Int32&amp; terminationtype)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqpcholeskysolver.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskybuffers">
            <summary>Тип оболочки совместимости для alglib+qpcholeskysolver+qpcholeskybuffers</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskybuffers.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskybuffers.#ctor(alglib.qpcholeskysolver.qpcholeskybuffers)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskybuffers.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskybuffers.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskybuffers.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskybuffers.Constructor">
            <summary>Задает оболочка совместимости qpcholeskybuffers.qpcholeskybuffers()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskybuffers.init">
            <summary>Задает оболочка совместимости qpcholeskybuffers.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskybuffers.make_copy">
            <summary>Задает оболочка совместимости qpcholeskybuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskybuffers.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskybuffers.AllInstances.init">
            <summary>Задает оболочка совместимости qpcholeskybuffers.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskybuffers.AllInstances.make_copy">
            <summary>Задает оболочка совместимости qpcholeskybuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskysettings">
            <summary>Тип оболочки совместимости для alglib+qpcholeskysolver+qpcholeskysettings</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskysettings.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskysettings.#ctor(alglib.qpcholeskysolver.qpcholeskysettings)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskysettings.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskysettings.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskysettings.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskysettings.Constructor">
            <summary>Задает оболочка совместимости qpcholeskysettings.qpcholeskysettings()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskysettings.init">
            <summary>Задает оболочка совместимости qpcholeskysettings.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskysettings.make_copy">
            <summary>Задает оболочка совместимости qpcholeskysettings.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskysettings.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskysettings.AllInstances.init">
            <summary>Задает оболочка совместимости qpcholeskysettings.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqpcholeskysolver.Shimqpcholeskysettings.AllInstances.make_copy">
            <summary>Задает оболочка совместимости qpcholeskysettings.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqqpsolver">
            <summary>Тип оболочки совместимости для alglib+qqpsolver</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqqpsolver.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqqpsolver.#ctor(alglib.qqpsolver)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqqpsolver.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqqpsolver.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.Constructor">
            <summary>Задает оболочка совместимости qqpsolver.qqpsolver()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.cnewtonbuildqqpsolveralglibqqpbuffersInt32Int32Ref">
            <summary>Задает оболочка совместимости qqpsolver.cnewtonbuild(qqpbuffers sstate, Int32 sparsesolver, Int32&amp; ncholesky)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.cnewtonstepqqpsolveralglibqqpbuffersqqpsolveralglibqqpsettingsDoubleArray">
            <summary>Задает оболочка совместимости qqpsolver.cnewtonstep(qqpbuffers sstate, qqpsettings settings, Double[] gc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.cnewtonupdateqqpsolveralglibqqpbuffersqqpsolveralglibqqpsettingsInt32Ref">
            <summary>Задает оболочка совместимости qqpsolver.cnewtonupdate(qqpbuffers sstate, qqpsettings settings, Int32&amp; ncupdates)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.findbeststepandmoveqqpsolveralglibqqpbufferssactivesetsalglibsactivesetDoubleArrayDoubleBooleanInt32DoubleDoubleArrayInt32BooleanArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости qqpsolver.findbeststepandmove(qqpbuffers sstate, sactiveset sas, Double[] d, Double stp, Boolean needact, Int32 cidx, Double cval, Double[] addsteps, Int32 addstepscnt, Boolean[]&amp; activated, Double[]&amp; tmp0)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.projectedtargetfunctionqqpsolveralglibqqpbuffersDoubleArrayDoubleArrayDoubleDoubleArrayRef">
            <summary>Задает оболочка совместимости qqpsolver.projectedtargetfunction(qqpbuffers sstate, Double[] x, Double[] d, Double stp, Double[]&amp; tmp0)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.qqpcopysettingsqqpsolveralglibqqpsettingsqqpsolveralglibqqpsettings">
            <summary>Задает оболочка совместимости qqpsolver.qqpcopysettings(qqpsettings src, qqpsettings dst)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.qqploaddefaultsInt32qqpsolveralglibqqpsettings">
            <summary>Задает оболочка совместимости qqpsolver.qqploaddefaults(Int32 nmain, qqpsettings s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.qqpoptimizecqmodelsalglibconvexquadraticmodelsparsealglibsparsematrixInt32BooleanDoubleArrayDoubleArrayDoubleArrayDoubleArrayDoubleArrayInt32DoubleMdArray2Int32Int32qqpsolveralglibqqpsettingsqqpsolveralglibqqpbuffersDoubleArrayInt32Ref">
            <summary>Задает оболочка совместимости qqpsolver.qqpoptimize(convexquadraticmodel ac, sparsematrix sparseac, Int32 akind, Boolean sparseupper, Double[] bc, Double[] bndlc, Double[] bnduc, Double[] sc, Double[] xoriginc, Int32 nc, Double[,] cleicc, Int32 nec, Int32 nic, qqpsettings settings, qqpbuffers sstate, Double[] xs, Int32&amp; terminationtype)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.quadraticmodelqqpsolveralglibqqpbuffersDoubleArrayDoubleArrayDoubleArrayDoubleRefInt32RefDoubleRefInt32Ref">
            <summary>Задает оболочка совместимости qqpsolver.quadraticmodel(qqpbuffers sstate, Double[] x, Double[] d, Double[] g, Double&amp; d1, Int32&amp; d1est, Double&amp; d2, Int32&amp; d2est)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.targetgradientqqpsolveralglibqqpbuffersDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости qqpsolver.targetgradient(qqpbuffers sstate, Double[] x, Double[]&amp; g)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqqpsolver.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpbuffers">
            <summary>Тип оболочки совместимости для alglib+qqpsolver+qqpbuffers</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpbuffers.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpbuffers.#ctor(alglib.qqpsolver.qqpbuffers)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpbuffers.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpbuffers.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpbuffers.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpbuffers.Constructor">
            <summary>Задает оболочка совместимости qqpbuffers.qqpbuffers()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpbuffers.init">
            <summary>Задает оболочка совместимости qqpbuffers.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpbuffers.make_copy">
            <summary>Задает оболочка совместимости qqpbuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpbuffers.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpbuffers.AllInstances.init">
            <summary>Задает оболочка совместимости qqpbuffers.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpbuffers.AllInstances.make_copy">
            <summary>Задает оболочка совместимости qqpbuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpsettings">
            <summary>Тип оболочки совместимости для alglib+qqpsolver+qqpsettings</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpsettings.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpsettings.#ctor(alglib.qqpsolver.qqpsettings)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpsettings.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpsettings.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpsettings.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpsettings.Constructor">
            <summary>Задает оболочка совместимости qqpsettings.qqpsettings()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpsettings.init">
            <summary>Задает оболочка совместимости qqpsettings.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpsettings.make_copy">
            <summary>Задает оболочка совместимости qqpsettings.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpsettings.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpsettings.AllInstances.init">
            <summary>Задает оболочка совместимости qqpsettings.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimqqpsolver.Shimqqpsettings.AllInstances.make_copy">
            <summary>Задает оболочка совместимости qqpsettings.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimratint">
            <summary>Тип оболочки совместимости для alglib+ratint</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimratint.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimratint.#ctor(alglib.ratint)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimratint.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimratint.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.Constructor">
            <summary>Задает оболочка совместимости ratint.ratint()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.barycentricbuildfloaterhormannDoubleArrayDoubleArrayInt32Int32ratintalglibbarycentricinterpolant">
            <summary>Задает оболочка совместимости ratint.barycentricbuildfloaterhormann(Double[] x, Double[] y, Int32 n, Int32 d, barycentricinterpolant b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.barycentricbuildxywDoubleArrayDoubleArrayDoubleArrayInt32ratintalglibbarycentricinterpolant">
            <summary>Задает оболочка совместимости ratint.barycentricbuildxyw(Double[] x, Double[] y, Double[] w, Int32 n, barycentricinterpolant b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.barycentriccalcratintalglibbarycentricinterpolantDouble">
            <summary>Задает оболочка совместимости ratint.barycentriccalc(barycentricinterpolant b, Double t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.barycentriccopyratintalglibbarycentricinterpolantratintalglibbarycentricinterpolant">
            <summary>Задает оболочка совместимости ratint.barycentriccopy(barycentricinterpolant b, barycentricinterpolant b2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.barycentricdiff1ratintalglibbarycentricinterpolantDoubleDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости ratint.barycentricdiff1(barycentricinterpolant b, Double t, Double&amp; f, Double&amp; df)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.barycentricdiff2ratintalglibbarycentricinterpolantDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости ratint.barycentricdiff2(barycentricinterpolant b, Double t, Double&amp; f, Double&amp; df, Double&amp; d2f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.barycentriclintransxratintalglibbarycentricinterpolantDoubleDouble">
            <summary>Задает оболочка совместимости ratint.barycentriclintransx(barycentricinterpolant b, Double ca, Double cb)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.barycentriclintransyratintalglibbarycentricinterpolantDoubleDouble">
            <summary>Задает оболочка совместимости ratint.barycentriclintransy(barycentricinterpolant b, Double ca, Double cb)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.barycentricnormalizeratintalglibbarycentricinterpolant">
            <summary>Задает оболочка совместимости ratint.barycentricnormalize(barycentricinterpolant b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.barycentricunpackratintalglibbarycentricinterpolantInt32RefDoubleArrayRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости ratint.barycentricunpack(barycentricinterpolant b, Int32&amp; n, Double[]&amp; x, Double[]&amp; y, Double[]&amp; w)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimratint.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimratint.Shimbarycentricinterpolant">
            <summary>Тип оболочки совместимости для alglib+ratint+barycentricinterpolant</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimratint.Shimbarycentricinterpolant.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimratint.Shimbarycentricinterpolant.#ctor(alglib.ratint.barycentricinterpolant)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimratint.Shimbarycentricinterpolant.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimratint.Shimbarycentricinterpolant.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.Shimbarycentricinterpolant.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.Shimbarycentricinterpolant.Constructor">
            <summary>Задает оболочка совместимости barycentricinterpolant.barycentricinterpolant()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.Shimbarycentricinterpolant.init">
            <summary>Задает оболочка совместимости barycentricinterpolant.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.Shimbarycentricinterpolant.make_copy">
            <summary>Задает оболочка совместимости barycentricinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimratint.Shimbarycentricinterpolant.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.Shimbarycentricinterpolant.AllInstances.init">
            <summary>Задает оболочка совместимости barycentricinterpolant.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimratint.Shimbarycentricinterpolant.AllInstances.make_copy">
            <summary>Задает оболочка совместимости barycentricinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrbf">
            <summary>Тип оболочки совместимости для alglib+rbf</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbf.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbf.#ctor(alglib.rbf)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbf.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbf.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.Constructor">
            <summary>Задает оболочка совместимости rbf.rbf()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.buildlinearmodelDoubleMdArray2DoubleMdArray2RefInt32Int32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости rbf.buildlinearmodel(Double[,] x, Double[,]&amp; y, Int32 n, Int32 ny, Int32 modeltype, Double[,]&amp; v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.buildrbfmlayersmodellsqrDoubleMdArray2DoubleMdArray2RefDoubleMdArray2RefDoubleDoubleArrayRefInt32Int32RefInt32Int32nearestneighboralglibkdtreeDoubleDoubleInt32DoubleInt32RefDoubleMdArray2RefInt32RefInt32RefInt32Ref">
            <summary>Задает оболочка совместимости rbf.buildrbfmlayersmodellsqr(Double[,] x, Double[,]&amp; y, Double[,]&amp; xc, Double rval, Double[]&amp; r, Int32 n, Int32&amp; nc, Int32 ny, Int32 nlayers, kdtree centerstree, Double epsort, Double epserr, Int32 maxits, Double lambdav, Int32&amp; annz, Double[,]&amp; w, Int32&amp; info, Int32&amp; iterationscount, Int32&amp; nmv)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.buildrbfmodellsqrDoubleMdArray2DoubleMdArray2RefDoubleMdArray2DoubleArrayInt32Int32Int32nearestneighboralglibkdtreenearestneighboralglibkdtreeDoubleDoubleInt32Int32RefInt32RefDoubleMdArray2RefInt32RefInt32RefInt32Ref">
            <summary>Задает оболочка совместимости rbf.buildrbfmodellsqr(Double[,] x, Double[,]&amp; y, Double[,] xc, Double[] r, Int32 n, Int32 nc, Int32 ny, kdtree pointstree, kdtree centerstree, Double epsort, Double epserr, Int32 maxits, Int32&amp; gnnz, Int32&amp; snnz, Double[,]&amp; w, Int32&amp; info, Int32&amp; iterationscount, Int32&amp; nmv)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfallocalglibserializerrbfalglibrbfmodel">
            <summary>Задает оболочка совместимости rbf.rbfalloc(serializer s, rbfmodel model)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfbuildmodelrbfalglibrbfmodelrbfalglibrbfreport">
            <summary>Задает оболочка совместимости rbf.rbfbuildmodel(rbfmodel s, rbfreport rep)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfcalc2rbfalglibrbfmodelDoubleDouble">
            <summary>Задает оболочка совместимости rbf.rbfcalc2(rbfmodel s, Double x0, Double x1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfcalc3rbfalglibrbfmodelDoubleDoubleDouble">
            <summary>Задает оболочка совместимости rbf.rbfcalc3(rbfmodel s, Double x0, Double x1, Double x2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfcalcbufrbfalglibrbfmodelDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости rbf.rbfcalcbuf(rbfmodel s, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfcalcrbfalglibrbfmodelDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости rbf.rbfcalc(rbfmodel s, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfcreateInt32Int32rbfalglibrbfmodel">
            <summary>Задает оболочка совместимости rbf.rbfcreate(Int32 nx, Int32 ny, rbfmodel s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfgridcalc2rbfalglibrbfmodelDoubleArrayInt32DoubleArrayInt32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости rbf.rbfgridcalc2(rbfmodel s, Double[] x0, Int32 n0, Double[] x1, Int32 n1, Double[,]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfgridpointsrbfalglibrbfmodel">
            <summary>Задает оболочка совместимости rbf.rbfgridpoints(rbfmodel s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfradnnrbfalglibrbfmodelDoubleDouble">
            <summary>Задает оболочка совместимости rbf.rbfradnn(rbfmodel s, Double q, Double z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfserializealglibserializerrbfalglibrbfmodel">
            <summary>Задает оболочка совместимости rbf.rbfserialize(serializer s, rbfmodel model)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfsetalgomultilayerrbfalglibrbfmodelDoubleInt32Double">
            <summary>Задает оболочка совместимости rbf.rbfsetalgomultilayer(rbfmodel s, Double rbase, Int32 nlayers, Double lambdav)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfsetalgoqnnrbfalglibrbfmodelDoubleDouble">
            <summary>Задает оболочка совместимости rbf.rbfsetalgoqnn(rbfmodel s, Double q, Double z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfsetcondrbfalglibrbfmodelDoubleDoubleInt32">
            <summary>Задает оболочка совместимости rbf.rbfsetcond(rbfmodel s, Double epsort, Double epserr, Int32 maxits)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfsetconsttermrbfalglibrbfmodel">
            <summary>Задает оболочка совместимости rbf.rbfsetconstterm(rbfmodel s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfsetlintermrbfalglibrbfmodel">
            <summary>Задает оболочка совместимости rbf.rbfsetlinterm(rbfmodel s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfsetpointsrbfalglibrbfmodelDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости rbf.rbfsetpoints(rbfmodel s, Double[,] xy, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfsetzerotermrbfalglibrbfmodel">
            <summary>Задает оболочка совместимости rbf.rbfsetzeroterm(rbfmodel s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfunpackrbfalglibrbfmodelInt32RefInt32RefDoubleMdArray2RefInt32RefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости rbf.rbfunpack(rbfmodel s, Int32&amp; nx, Int32&amp; ny, Double[,]&amp; xwr, Int32&amp; nc, Double[,]&amp; v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.rbfunserializealglibserializerrbfalglibrbfmodel">
            <summary>Задает оболочка совместимости rbf.rbfunserialize(serializer s, rbfmodel model)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrbf.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrbf.Shimrbfmodel">
            <summary>Тип оболочки совместимости для alglib+rbf+rbfmodel</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbf.Shimrbfmodel.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbf.Shimrbfmodel.#ctor(alglib.rbf.rbfmodel)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbf.Shimrbfmodel.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbf.Shimrbfmodel.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.Shimrbfmodel.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.Shimrbfmodel.Constructor">
            <summary>Задает оболочка совместимости rbfmodel.rbfmodel()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.Shimrbfmodel.init">
            <summary>Задает оболочка совместимости rbfmodel.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.Shimrbfmodel.make_copy">
            <summary>Задает оболочка совместимости rbfmodel.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrbf.Shimrbfmodel.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.Shimrbfmodel.AllInstances.init">
            <summary>Задает оболочка совместимости rbfmodel.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.Shimrbfmodel.AllInstances.make_copy">
            <summary>Задает оболочка совместимости rbfmodel.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrbf.Shimrbfreport">
            <summary>Тип оболочки совместимости для alglib+rbf+rbfreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbf.Shimrbfreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbf.Shimrbfreport.#ctor(alglib.rbf.rbfreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbf.Shimrbfreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbf.Shimrbfreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.Shimrbfreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.Shimrbfreport.Constructor">
            <summary>Задает оболочка совместимости rbfreport.rbfreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.Shimrbfreport.init">
            <summary>Задает оболочка совместимости rbfreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.Shimrbfreport.make_copy">
            <summary>Задает оболочка совместимости rbfreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrbf.Shimrbfreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.Shimrbfreport.AllInstances.init">
            <summary>Задает оболочка совместимости rbfreport.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbf.Shimrbfreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости rbfreport.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrbfmodel">
            <summary>Тип оболочки совместимости для alglib+rbfmodel</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbfmodel.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbfmodel.#ctor(alglib.rbfmodel)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbfmodel.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbfmodel.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfmodel.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfmodel.Constructor">
            <summary>Задает оболочка совместимости rbfmodel.rbfmodel()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfmodel.Constructorrbfalglibrbfmodel">
            <summary>Задает оболочка совместимости rbfmodel.rbfmodel(rbfmodel obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfmodel.innerobjGet">
            <summary>Задает оболочка совместимости rbfmodel.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfmodel.make_copy">
            <summary>Задает оболочка совместимости rbfmodel.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrbfmodel.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfmodel.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости rbfmodel.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfmodel.AllInstances.make_copy">
            <summary>Задает оболочка совместимости rbfmodel.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrbfreport">
            <summary>Тип оболочки совместимости для alglib+rbfreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbfreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbfreport.#ctor(alglib.rbfreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbfreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrbfreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.Constructor">
            <summary>Задает оболочка совместимости rbfreport.rbfreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.Constructorrbfalglibrbfreport">
            <summary>Задает оболочка совместимости rbfreport.rbfreport(rbfreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.acolsGet">
            <summary>Задает оболочка совместимости rbfreport.get_acols()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.acolsSetInt32">
            <summary>Задает оболочка совместимости rbfreport.set_acols(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.annzGet">
            <summary>Задает оболочка совместимости rbfreport.get_annz()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.annzSetInt32">
            <summary>Задает оболочка совместимости rbfreport.set_annz(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.arowsGet">
            <summary>Задает оболочка совместимости rbfreport.get_arows()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.arowsSetInt32">
            <summary>Задает оболочка совместимости rbfreport.set_arows(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.innerobjGet">
            <summary>Задает оболочка совместимости rbfreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.iterationscountGet">
            <summary>Задает оболочка совместимости rbfreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.iterationscountSetInt32">
            <summary>Задает оболочка совместимости rbfreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.make_copy">
            <summary>Задает оболочка совместимости rbfreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.nmvGet">
            <summary>Задает оболочка совместимости rbfreport.get_nmv()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.nmvSetInt32">
            <summary>Задает оболочка совместимости rbfreport.set_nmv(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.terminationtypeGet">
            <summary>Задает оболочка совместимости rbfreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости rbfreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrbfreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.AllInstances.acolsGet">
            <summary>Задает оболочка совместимости rbfreport.get_acols()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.AllInstances.acolsSetInt32">
            <summary>Задает оболочка совместимости rbfreport.set_acols(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.AllInstances.annzGet">
            <summary>Задает оболочка совместимости rbfreport.get_annz()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.AllInstances.annzSetInt32">
            <summary>Задает оболочка совместимости rbfreport.set_annz(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.AllInstances.arowsGet">
            <summary>Задает оболочка совместимости rbfreport.get_arows()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.AllInstances.arowsSetInt32">
            <summary>Задает оболочка совместимости rbfreport.set_arows(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости rbfreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.AllInstances.iterationscountGet">
            <summary>Задает оболочка совместимости rbfreport.get_iterationscount()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.AllInstances.iterationscountSetInt32">
            <summary>Задает оболочка совместимости rbfreport.set_iterationscount(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости rbfreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.AllInstances.nmvGet">
            <summary>Задает оболочка совместимости rbfreport.get_nmv()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.AllInstances.nmvSetInt32">
            <summary>Задает оболочка совместимости rbfreport.set_nmv(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.AllInstances.terminationtypeGet">
            <summary>Задает оболочка совместимости rbfreport.get_terminationtype()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrbfreport.AllInstances.terminationtypeSetInt32">
            <summary>Задает оболочка совместимости rbfreport.set_terminationtype(Int32 value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrcommstate">
            <summary>Тип оболочки совместимости для alglib+rcommstate</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrcommstate.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrcommstate.#ctor(alglib.rcommstate)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrcommstate.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrcommstate.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcommstate.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcommstate.Constructor">
            <summary>Задает оболочка совместимости rcommstate.rcommstate()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcommstate.init">
            <summary>Задает оболочка совместимости rcommstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcommstate.make_copy">
            <summary>Задает оболочка совместимости rcommstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrcommstate.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcommstate.AllInstances.init">
            <summary>Задает оболочка совместимости rcommstate.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcommstate.AllInstances.make_copy">
            <summary>Задает оболочка совместимости rcommstate.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrcond">
            <summary>Тип оболочки совместимости для alglib+rcond</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrcond.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrcond.#ctor(alglib.rcond)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrcond.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrcond.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.Constructor">
            <summary>Задает оболочка совместимости rcond.rcond()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.cmatrixestimatenormInt32alglibcomplexArrayRefalglibcomplexArrayRefDoubleRefInt32RefInt32ArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости rcond.cmatrixestimatenorm(Int32 n, complex[]&amp; v, complex[]&amp; x, Double&amp; est, Int32&amp; kase, Int32[]&amp; isave, Double[]&amp; rsave)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.cmatrixlurcond1alglibcomplexMdArray2Int32">
            <summary>Задает оболочка совместимости rcond.cmatrixlurcond1(complex[,] lua, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.cmatrixlurcondinfalglibcomplexMdArray2Int32">
            <summary>Задает оболочка совместимости rcond.cmatrixlurcondinf(complex[,] lua, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.cmatrixrcond1alglibcomplexMdArray2Int32">
            <summary>Задает оболочка совместимости rcond.cmatrixrcond1(complex[,] a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.cmatrixrcondinfalglibcomplexMdArray2Int32">
            <summary>Задает оболочка совместимости rcond.cmatrixrcondinf(complex[,] a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.cmatrixrcondluinternalalglibcomplexMdArray2Int32BooleanBooleanDoubleDoubleRef">
            <summary>Задает оболочка совместимости rcond.cmatrixrcondluinternal(complex[,] lua, Int32 n, Boolean onenorm, Boolean isanormprovided, Double anorm, Double&amp; rc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.cmatrixrcondtrinternalalglibcomplexMdArray2Int32BooleanBooleanBooleanDoubleDoubleRef">
            <summary>Задает оболочка совместимости rcond.cmatrixrcondtrinternal(complex[,] a, Int32 n, Boolean isupper, Boolean isunit, Boolean onenorm, Double anorm, Double&amp; rc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.cmatrixtrrcond1alglibcomplexMdArray2Int32BooleanBoolean">
            <summary>Задает оболочка совместимости rcond.cmatrixtrrcond1(complex[,] a, Int32 n, Boolean isupper, Boolean isunit)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.cmatrixtrrcondinfalglibcomplexMdArray2Int32BooleanBoolean">
            <summary>Задает оболочка совместимости rcond.cmatrixtrrcondinf(complex[,] a, Int32 n, Boolean isupper, Boolean isunit)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.hpdmatrixcholeskyrcondalglibcomplexMdArray2Int32Boolean">
            <summary>Задает оболочка совместимости rcond.hpdmatrixcholeskyrcond(complex[,] a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.hpdmatrixrcondalglibcomplexMdArray2Int32Boolean">
            <summary>Задает оболочка совместимости rcond.hpdmatrixrcond(complex[,] a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.hpdmatrixrcondcholeskyinternalalglibcomplexMdArray2Int32BooleanBooleanDoubleDoubleRef">
            <summary>Задает оболочка совместимости rcond.hpdmatrixrcondcholeskyinternal(complex[,] cha, Int32 n, Boolean isupper, Boolean isnormprovided, Double anorm, Double&amp; rc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.internalcomplexrcondicmax1alglibcomplexArrayInt32">
            <summary>Задает оболочка совместимости rcond.internalcomplexrcondicmax1(complex[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.internalcomplexrcondloadallInt32ArrayRefDoubleArrayRefInt32RefInt32RefInt32RefInt32RefInt32RefDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости rcond.internalcomplexrcondloadall(Int32[]&amp; isave, Double[]&amp; rsave, Int32&amp; i, Int32&amp; iter, Int32&amp; j, Int32&amp; jlast, Int32&amp; jump, Double&amp; absxi, Double&amp; altsgn, Double&amp; estold, Double&amp; temp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.internalcomplexrcondsaveallInt32ArrayRefDoubleArrayRefInt32RefInt32RefInt32RefInt32RefInt32RefDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости rcond.internalcomplexrcondsaveall(Int32[]&amp; isave, Double[]&amp; rsave, Int32&amp; i, Int32&amp; iter, Int32&amp; j, Int32&amp; jlast, Int32&amp; jump, Double&amp; absxi, Double&amp; altsgn, Double&amp; estold, Double&amp; temp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.internalcomplexrcondscsum1alglibcomplexArrayInt32">
            <summary>Задает оболочка совместимости rcond.internalcomplexrcondscsum1(complex[] x, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.rcondthreshold">
            <summary>Задает оболочка совместимости rcond.rcondthreshold()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.rmatrixestimatenormInt32DoubleArrayRefDoubleArrayRefInt32ArrayRefDoubleRefInt32Ref">
            <summary>Задает оболочка совместимости rcond.rmatrixestimatenorm(Int32 n, Double[]&amp; v, Double[]&amp; x, Int32[]&amp; isgn, Double&amp; est, Int32&amp; kase)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.rmatrixlurcond1DoubleMdArray2Int32">
            <summary>Задает оболочка совместимости rcond.rmatrixlurcond1(Double[,] lua, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.rmatrixlurcondinfDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости rcond.rmatrixlurcondinf(Double[,] lua, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.rmatrixrcond1DoubleMdArray2Int32">
            <summary>Задает оболочка совместимости rcond.rmatrixrcond1(Double[,] a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.rmatrixrcondinfDoubleMdArray2Int32">
            <summary>Задает оболочка совместимости rcond.rmatrixrcondinf(Double[,] a, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.rmatrixrcondluinternalDoubleMdArray2Int32BooleanBooleanDoubleDoubleRef">
            <summary>Задает оболочка совместимости rcond.rmatrixrcondluinternal(Double[,] lua, Int32 n, Boolean onenorm, Boolean isanormprovided, Double anorm, Double&amp; rc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.rmatrixrcondtrinternalDoubleMdArray2Int32BooleanBooleanBooleanDoubleDoubleRef">
            <summary>Задает оболочка совместимости rcond.rmatrixrcondtrinternal(Double[,] a, Int32 n, Boolean isupper, Boolean isunit, Boolean onenorm, Double anorm, Double&amp; rc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.rmatrixtrrcond1DoubleMdArray2Int32BooleanBoolean">
            <summary>Задает оболочка совместимости rcond.rmatrixtrrcond1(Double[,] a, Int32 n, Boolean isupper, Boolean isunit)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.rmatrixtrrcondinfDoubleMdArray2Int32BooleanBoolean">
            <summary>Задает оболочка совместимости rcond.rmatrixtrrcondinf(Double[,] a, Int32 n, Boolean isupper, Boolean isunit)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.spdmatrixcholeskyrcondDoubleMdArray2Int32Boolean">
            <summary>Задает оболочка совместимости rcond.spdmatrixcholeskyrcond(Double[,] a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.spdmatrixrcondDoubleMdArray2Int32Boolean">
            <summary>Задает оболочка совместимости rcond.spdmatrixrcond(Double[,] a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrcond.spdmatrixrcondcholeskyinternalDoubleMdArray2Int32BooleanBooleanDoubleDoubleRef">
            <summary>Задает оболочка совместимости rcond.spdmatrixrcondcholeskyinternal(Double[,] cha, Int32 n, Boolean isupper, Boolean isnormprovided, Double anorm, Double&amp; rc)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrcond.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimreflections">
            <summary>Тип оболочки совместимости для alglib+reflections</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimreflections.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimreflections.#ctor(alglib.reflections)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimreflections.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimreflections.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimreflections.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimreflections.Constructor">
            <summary>Задает оболочка совместимости reflections.reflections()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimreflections.applyreflectionfromtheleftDoubleMdArray2RefDoubleDoubleArrayInt32Int32Int32Int32DoubleArrayRef">
            <summary>Задает оболочка совместимости reflections.applyreflectionfromtheleft(Double[,]&amp; c, Double tau, Double[] v, Int32 m1, Int32 m2, Int32 n1, Int32 n2, Double[]&amp; work)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimreflections.applyreflectionfromtherightDoubleMdArray2RefDoubleDoubleArrayInt32Int32Int32Int32DoubleArrayRef">
            <summary>Задает оболочка совместимости reflections.applyreflectionfromtheright(Double[,]&amp; c, Double tau, Double[] v, Int32 m1, Int32 m2, Int32 n1, Int32 n2, Double[]&amp; work)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimreflections.generatereflectionDoubleArrayRefInt32DoubleRef">
            <summary>Задает оболочка совместимости reflections.generatereflection(Double[]&amp; x, Int32 n, Double&amp; tau)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimreflections.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrotations">
            <summary>Тип оболочки совместимости для alglib+rotations</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrotations.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrotations.#ctor(alglib.rotations)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrotations.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimrotations.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrotations.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrotations.Constructor">
            <summary>Задает оболочка совместимости rotations.rotations()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrotations.applyrotationsfromtheleftBooleanInt32Int32Int32Int32DoubleArrayDoubleArrayDoubleMdArray2DoubleArray">
            <summary>Задает оболочка совместимости rotations.applyrotationsfromtheleft(Boolean isforward, Int32 m1, Int32 m2, Int32 n1, Int32 n2, Double[] c, Double[] s, Double[,] a, Double[] work)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrotations.applyrotationsfromtherightBooleanInt32Int32Int32Int32DoubleArrayDoubleArrayDoubleMdArray2DoubleArray">
            <summary>Задает оболочка совместимости rotations.applyrotationsfromtheright(Boolean isforward, Int32 m1, Int32 m2, Int32 n1, Int32 n2, Double[] c, Double[] s, Double[,] a, Double[] work)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimrotations.generaterotationDoubleDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости rotations.generaterotation(Double f, Double g, Double&amp; cs, Double&amp; sn, Double&amp; r)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimrotations.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsactivesets">
            <summary>Тип оболочки совместимости для alglib+sactivesets</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsactivesets.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsactivesets.#ctor(alglib.sactivesets)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsactivesets.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsactivesets.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.Constructor">
            <summary>Задает оболочка совместимости sactivesets.sactivesets()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.constraineddescentsactivesetsalglibsactivesetDoubleArrayDoubleArrayDoubleMdArray2BooleanDoubleArrayRef">
            <summary>Задает оболочка совместимости sactivesets.constraineddescent(sactiveset state, Double[] g, Double[] h, Double[,] ha, Boolean normalize, Double[]&amp; d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.reactivateconstraintssactivesetsalglibsactivesetDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости sactivesets.reactivateconstraints(sactiveset state, Double[] gc, Double[] h)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sasactivelcpenalty1sactivesetsalglibsactivesetDoubleArray">
            <summary>Задает оболочка совместимости sactivesets.sasactivelcpenalty1(sactiveset state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sasconstraineddescentprecsactivesetsalglibsactivesetDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости sactivesets.sasconstraineddescentprec(sactiveset state, Double[] g, Double[]&amp; d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sasconstraineddescentsactivesetsalglibsactivesetDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости sactivesets.sasconstraineddescent(sactiveset state, Double[] g, Double[]&amp; d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sasconstraineddirectionprecsactivesetsalglibsactivesetDoubleArrayRef">
            <summary>Задает оболочка совместимости sactivesets.sasconstraineddirectionprec(sactiveset state, Double[]&amp; d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sasconstraineddirectionsactivesetsalglibsactivesetDoubleArrayRef">
            <summary>Задает оболочка совместимости sactivesets.sasconstraineddirection(sactiveset state, Double[]&amp; d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sascorrectionsactivesetsalglibsactivesetDoubleArrayDoubleRef">
            <summary>Задает оболочка совместимости sactivesets.sascorrection(sactiveset state, Double[] x, Double&amp; penalty)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sasexploredirectionsactivesetsalglibsactivesetDoubleArrayDoubleRefInt32RefDoubleRef">
            <summary>Задает оболочка совместимости sactivesets.sasexploredirection(sactiveset state, Double[] d, Double&amp; stpmax, Int32&amp; cidx, Double&amp; vval)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sasimmediateactivationsactivesetsalglibsactivesetInt32Double">
            <summary>Задает оболочка совместимости sactivesets.sasimmediateactivation(sactiveset state, Int32 cidx, Double cval)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sasinitInt32sactivesetsalglibsactiveset">
            <summary>Задает оболочка совместимости sactivesets.sasinit(Int32 n, sactiveset s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sasmovetosactivesetsalglibsactivesetDoubleArrayBooleanInt32Double">
            <summary>Задает оболочка совместимости sactivesets.sasmoveto(sactiveset state, Double[] xn, Boolean needact, Int32 cidx, Double cval)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sasreactivateconstraintsprecsactivesetsalglibsactivesetDoubleArray">
            <summary>Задает оболочка совместимости sactivesets.sasreactivateconstraintsprec(sactiveset state, Double[] gc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sasreactivateconstraintssactivesetsalglibsactivesetDoubleArray">
            <summary>Задает оболочка совместимости sactivesets.sasreactivateconstraints(sactiveset state, Double[] gc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sasrebuildbasissactivesetsalglibsactiveset">
            <summary>Задает оболочка совместимости sactivesets.sasrebuildbasis(sactiveset state)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sasscaledconstrainednormsactivesetsalglibsactivesetDoubleArray">
            <summary>Задает оболочка совместимости sactivesets.sasscaledconstrainednorm(sactiveset state, Double[] d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sassetbcsactivesetsalglibsactivesetDoubleArrayDoubleArray">
            <summary>Задает оболочка совместимости sactivesets.sassetbc(sactiveset state, Double[] bndl, Double[] bndu)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sassetlcsactivesetsalglibsactivesetDoubleMdArray2Int32ArrayInt32">
            <summary>Задает оболочка совместимости sactivesets.sassetlc(sactiveset state, Double[,] c, Int32[] ct, Int32 k)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sassetlcxsactivesetsalglibsactivesetDoubleMdArray2Int32Int32">
            <summary>Задает оболочка совместимости sactivesets.sassetlcx(sactiveset state, Double[,] cleic, Int32 nec, Int32 nic)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sassetprecdiagsactivesetsalglibsactivesetDoubleArray">
            <summary>Задает оболочка совместимости sactivesets.sassetprecdiag(sactiveset state, Double[] d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sassetscalesactivesetsalglibsactivesetDoubleArray">
            <summary>Задает оболочка совместимости sactivesets.sassetscale(sactiveset state, Double[] s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sasstartoptimizationsactivesetsalglibsactivesetDoubleArray">
            <summary>Задает оболочка совместимости sactivesets.sasstartoptimization(sactiveset state, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.sasstopoptimizationsactivesetsalglibsactiveset">
            <summary>Задает оболочка совместимости sactivesets.sasstopoptimization(sactiveset state)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsactivesets.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsactivesets.Shimsactiveset">
            <summary>Тип оболочки совместимости для alglib+sactivesets+sactiveset</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsactivesets.Shimsactiveset.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsactivesets.Shimsactiveset.#ctor(alglib.sactivesets.sactiveset)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsactivesets.Shimsactiveset.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsactivesets.Shimsactiveset.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.Shimsactiveset.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.Shimsactiveset.Constructor">
            <summary>Задает оболочка совместимости sactiveset.sactiveset()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.Shimsactiveset.init">
            <summary>Задает оболочка совместимости sactiveset.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.Shimsactiveset.make_copy">
            <summary>Задает оболочка совместимости sactiveset.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsactivesets.Shimsactiveset.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.Shimsactiveset.AllInstances.init">
            <summary>Задает оболочка совместимости sactiveset.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsactivesets.Shimsactiveset.AllInstances.make_copy">
            <summary>Задает оболочка совместимости sactiveset.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsafesolve">
            <summary>Тип оболочки совместимости для alglib+safesolve</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsafesolve.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsafesolve.#ctor(alglib.safesolve)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsafesolve.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsafesolve.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsafesolve.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsafesolve.Constructor">
            <summary>Задает оболочка совместимости safesolve.safesolve()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsafesolve.cbasicsolveandupdatealglibcomplexalglibcomplexDoubleDoubleDoubleDoubleRefalglibcomplexRef">
            <summary>Задает оболочка совместимости safesolve.cbasicsolveandupdate(complex alpha, complex beta, Double lnmax, Double bnorm, Double maxgrowth, Double&amp; xnorm, complex&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsafesolve.cmatrixscaledtrsafesolvealglibcomplexMdArray2DoubleInt32alglibcomplexArrayRefBooleanInt32BooleanDouble">
            <summary>Задает оболочка совместимости safesolve.cmatrixscaledtrsafesolve(complex[,] a, Double sa, Int32 n, complex[]&amp; x, Boolean isupper, Int32 trans, Boolean isunit, Double maxgrowth)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsafesolve.rmatrixscaledtrsafesolveDoubleMdArray2DoubleInt32DoubleArrayRefBooleanInt32BooleanDouble">
            <summary>Задает оболочка совместимости safesolve.rmatrixscaledtrsafesolve(Double[,] a, Double sa, Int32 n, Double[]&amp; x, Boolean isupper, Int32 trans, Boolean isunit, Double maxgrowth)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsafesolve.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsblas">
            <summary>Тип оболочки совместимости для alglib+sblas</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsblas.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsblas.#ctor(alglib.sblas)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsblas.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsblas.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsblas.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsblas.Constructor">
            <summary>Задает оболочка совместимости sblas.sblas()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsblas.symmetricmatrixvectormultiplyDoubleMdArray2BooleanInt32Int32DoubleArrayDoubleDoubleArrayRef">
            <summary>Задает оболочка совместимости sblas.symmetricmatrixvectormultiply(Double[,] a, Boolean isupper, Int32 i1, Int32 i2, Double[] x, Double alpha, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsblas.symmetricrank2updateDoubleMdArray2RefBooleanInt32Int32DoubleArrayDoubleArrayDoubleArrayRefDouble">
            <summary>Задает оболочка совместимости sblas.symmetricrank2update(Double[,]&amp; a, Boolean isupper, Int32 i1, Int32 i2, Double[] x, Double[] y, Double[]&amp; t, Double alpha)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsblas.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimschur">
            <summary>Тип оболочки совместимости для alglib+schur</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimschur.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimschur.#ctor(alglib.schur)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimschur.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimschur.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimschur.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimschur.Constructor">
            <summary>Задает оболочка совместимости schur.schur()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimschur.rmatrixschurDoubleMdArray2RefInt32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости schur.rmatrixschur(Double[,]&amp; a, Int32 n, Double[,]&amp; s)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimschur.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimscodes">
            <summary>Тип оболочки совместимости для alglib+scodes</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimscodes.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimscodes.#ctor(alglib.scodes)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimscodes.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimscodes.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimscodes.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimscodes.Constructor">
            <summary>Задает оболочка совместимости scodes.scodes()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimscodes.getkdtreeserializationcode">
            <summary>Задает оболочка совместимости scodes.getkdtreeserializationcode()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimscodes.getmlpeserializationcode">
            <summary>Задает оболочка совместимости scodes.getmlpeserializationcode()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimscodes.getmlpserializationcode">
            <summary>Задает оболочка совместимости scodes.getmlpserializationcode()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimscodes.getrbfserializationcode">
            <summary>Задает оболочка совместимости scodes.getrbfserializationcode()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimscodes.getrdfserializationcode">
            <summary>Задает оболочка совместимости scodes.getrdfserializationcode()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimscodes.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimserializer">
            <summary>Тип оболочки совместимости для alglib+serializer</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimserializer.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimserializer.#ctor(alglib.serializer)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimserializer.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimserializer.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.Constructor">
            <summary>Задает оболочка совместимости serializer.serializer()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.StaticConstructor">
            <summary>Задает оболочка совместимости serializer.serializer()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.alloc_entry">
            <summary>Задает оболочка совместимости serializer.alloc_entry()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.alloc_start">
            <summary>Задает оболочка совместимости serializer.alloc_start()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.bool2strBooleanCharArrayInt32Ref">
            <summary>Задает оболочка совместимости serializer.bool2str(Boolean v, Char[] buf, Int32&amp; offs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.char2sixbitsChar">
            <summary>Задает оболочка совместимости serializer.char2sixbits(Char c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.double2strDoubleCharArrayInt32Ref">
            <summary>Задает оболочка совместимости serializer.double2str(Double v, Char[] buf, Int32&amp; offs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.foursixbits2threebytesInt32ArrayInt32ByteArrayInt32">
            <summary>Задает оболочка совместимости serializer.foursixbits2threebytes(Int32[] src, Int32 src_offs, Byte[] dst, Int32 dst_offs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.get_alloc_size">
            <summary>Задает оболочка совместимости serializer.get_alloc_size()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.get_string">
            <summary>Задает оболочка совместимости serializer.get_string()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.int2strInt32CharArrayInt32Ref">
            <summary>Задает оболочка совместимости serializer.int2str(Int32 v, Char[] buf, Int32&amp; offs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.serialize_boolBoolean">
            <summary>Задает оболочка совместимости serializer.serialize_bool(Boolean v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.serialize_doubleDouble">
            <summary>Задает оболочка совместимости serializer.serialize_double(Double v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.serialize_intInt32">
            <summary>Задает оболочка совместимости serializer.serialize_int(Int32 v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.sixbits2charInt32">
            <summary>Задает оболочка совместимости serializer.sixbits2char(Int32 v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.sstart_str">
            <summary>Задает оболочка совместимости serializer.sstart_str()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.stop">
            <summary>Задает оболочка совместимости serializer.stop()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.str2boolCharArrayInt32Ref">
            <summary>Задает оболочка совместимости serializer.str2bool(Char[] buf, Int32&amp; offs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.str2doubleCharArrayInt32Ref">
            <summary>Задает оболочка совместимости serializer.str2double(Char[] buf, Int32&amp; offs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.str2intCharArrayInt32Ref">
            <summary>Задает оболочка совместимости serializer.str2int(Char[] buf, Int32&amp; offs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.threebytes2foursixbitsByteArrayInt32Int32ArrayInt32">
            <summary>Задает оболочка совместимости serializer.threebytes2foursixbits(Byte[] src, Int32 src_offs, Int32[] dst, Int32 dst_offs)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.unserialize_bool">
            <summary>Задает оболочка совместимости serializer.unserialize_bool()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.unserialize_double">
            <summary>Задает оболочка совместимости serializer.unserialize_double()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.unserialize_int">
            <summary>Задает оболочка совместимости serializer.unserialize_int()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.ustart_strString">
            <summary>Задает оболочка совместимости serializer.ustart_str(String s)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimserializer.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.AllInstances.alloc_entry">
            <summary>Задает оболочка совместимости serializer.alloc_entry()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.AllInstances.alloc_start">
            <summary>Задает оболочка совместимости serializer.alloc_start()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.AllInstances.get_alloc_size">
            <summary>Задает оболочка совместимости serializer.get_alloc_size()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.AllInstances.get_string">
            <summary>Задает оболочка совместимости serializer.get_string()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.AllInstances.serialize_boolBoolean">
            <summary>Задает оболочка совместимости serializer.serialize_bool(Boolean v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.AllInstances.serialize_doubleDouble">
            <summary>Задает оболочка совместимости serializer.serialize_double(Double v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.AllInstances.serialize_intInt32">
            <summary>Задает оболочка совместимости serializer.serialize_int(Int32 v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.AllInstances.sstart_str">
            <summary>Задает оболочка совместимости serializer.sstart_str()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.AllInstances.stop">
            <summary>Задает оболочка совместимости serializer.stop()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.AllInstances.unserialize_bool">
            <summary>Задает оболочка совместимости serializer.unserialize_bool()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.AllInstances.unserialize_double">
            <summary>Задает оболочка совместимости serializer.unserialize_double()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.AllInstances.unserialize_int">
            <summary>Задает оболочка совместимости serializer.unserialize_int()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimserializer.AllInstances.ustart_strString">
            <summary>Задает оболочка совместимости serializer.ustart_str(String s)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsmp">
            <summary>Тип оболочки совместимости для alglib+smp</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.#ctor(alglib.smp)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.ae_shared_pool_first_recycledOf1smpalglibshared_poolM0Ref``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{alglib.smp.shared_pool,``0})">
            <summary>Задает оболочка совместимости smp.ae_shared_pool_first_recycled(shared_pool pool, !!0&amp; obj)</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.ae_shared_pool_next_recycledOf1smpalglibshared_poolM0Ref``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{alglib.smp.shared_pool,``0})">
            <summary>Задает оболочка совместимости smp.ae_shared_pool_next_recycled(shared_pool pool, !!0&amp; obj)</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.ae_shared_pool_recycleOf1smpalglibshared_poolM0Ref``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{alglib.smp.shared_pool,``0})">
            <summary>Задает оболочка совместимости smp.ae_shared_pool_recycle(shared_pool pool, !!0&amp; obj)</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.ae_shared_pool_retrieveOf1smpalglibshared_poolM0Ref``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{alglib.smp.shared_pool,``0})">
            <summary>Задает оболочка совместимости smp.ae_shared_pool_retrieve(shared_pool pool, !!0&amp; obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.Constructor">
            <summary>Задает оболочка совместимости smp.smp()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.StaticConstructor">
            <summary>Задает оболочка совместимости smp.smp()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.ae_acquire_locksmpalglibae_lock">
            <summary>Задает оболочка совместимости smp.ae_acquire_lock(ae_lock obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.ae_free_locksmpalglibae_lockRef">
            <summary>Задает оболочка совместимости smp.ae_free_lock(ae_lock&amp; obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.ae_init_locksmpalglibae_lockRef">
            <summary>Задает оболочка совместимости smp.ae_init_lock(ae_lock&amp; obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.ae_release_locksmpalglibae_lock">
            <summary>Задает оболочка совместимости smp.ae_release_lock(ae_lock obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.ae_shared_pool_clear_recycledsmpalglibshared_pool">
            <summary>Задает оболочка совместимости smp.ae_shared_pool_clear_recycled(shared_pool pool)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.ae_shared_pool_is_initializedsmpalglibshared_pool">
            <summary>Задает оболочка совместимости smp.ae_shared_pool_is_initialized(shared_pool dst)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.ae_shared_pool_resetsmpalglibshared_pool">
            <summary>Задает оболочка совместимости smp.ae_shared_pool_reset(shared_pool pool)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.ae_shared_pool_set_seedsmpalglibshared_poolalglibapobject">
            <summary>Задает оболочка совместимости smp.ae_shared_pool_set_seed(shared_pool dst, apobject seed_object)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.ae_spin_waitInt32">
            <summary>Задает оболочка совместимости smp.ae_spin_wait(Int32 cnt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.ae_yield">
            <summary>Задает оболочка совместимости smp.ae_yield()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsmp.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsmp.Shimae_lock">
            <summary>Тип оболочки совместимости для alglib+smp+ae_lock</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.Shimae_lock.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.Shimae_lock.#ctor(alglib.smp.ae_lock)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.Shimae_lock.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.Shimae_lock.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.Shimae_lock.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.Shimae_lock.Constructor">
            <summary>Задает оболочка совместимости ae_lock.ae_lock()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsmp.Shimae_lock.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsmp.Shimshared_pool">
            <summary>Тип оболочки совместимости для alglib+smp+shared_pool</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.Shimshared_pool.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.Shimshared_pool.#ctor(alglib.smp.shared_pool)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.Shimshared_pool.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.Shimshared_pool.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.Shimshared_pool.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.Shimshared_pool.Constructor">
            <summary>Задает оболочка совместимости shared_pool.shared_pool()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.Shimshared_pool.init">
            <summary>Задает оболочка совместимости shared_pool.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.Shimshared_pool.make_copy">
            <summary>Задает оболочка совместимости shared_pool.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsmp.Shimshared_pool.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.Shimshared_pool.AllInstances.init">
            <summary>Задает оболочка совместимости shared_pool.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.Shimshared_pool.AllInstances.make_copy">
            <summary>Задает оболочка совместимости shared_pool.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsmp.Shimsharedpoolentry">
            <summary>Тип оболочки совместимости для alglib+smp+sharedpoolentry</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.Shimsharedpoolentry.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.Shimsharedpoolentry.#ctor(alglib.smp.sharedpoolentry)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.Shimsharedpoolentry.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmp.Shimsharedpoolentry.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.Shimsharedpoolentry.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmp.Shimsharedpoolentry.Constructor">
            <summary>Задает оболочка совместимости sharedpoolentry.sharedpoolentry()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsmp.Shimsharedpoolentry.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsmpselftests">
            <summary>Тип оболочки совместимости для alglib+smpselftests</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmpselftests.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmpselftests.#ctor(alglib.smpselftests)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmpselftests.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsmpselftests.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmpselftests.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmpselftests.Constructor">
            <summary>Задает оболочка совместимости smpselftests.smpselftests()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsmpselftests.runtests">
            <summary>Задает оболочка совместимости smpselftests.runtests()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsmpselftests.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsnnls">
            <summary>Тип оболочки совместимости для alglib+snnls</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsnnls.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsnnls.#ctor(alglib.snnls)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsnnls.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsnnls.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsnnls.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsnnls.Constructor">
            <summary>Задает оболочка совместимости snnls.snnls()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsnnls.boundedstepandactivationDoubleArrayDoubleArrayBooleanArrayInt32">
            <summary>Задает оболочка совместимости snnls.boundedstepandactivation(Double[] xc, Double[] xn, Boolean[] nnc, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsnnls.snnlsdropnncsnnlsalglibsnnlssolverInt32">
            <summary>Задает оболочка совместимости snnls.snnlsdropnnc(snnlssolver s, Int32 idx)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsnnls.snnlsinitInt32Int32Int32snnlsalglibsnnlssolver">
            <summary>Задает оболочка совместимости snnls.snnlsinit(Int32 nsmax, Int32 ndmax, Int32 nrmax, snnlssolver s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsnnls.snnlssetproblemsnnlsalglibsnnlssolverDoubleMdArray2DoubleArrayInt32Int32Int32">
            <summary>Задает оболочка совместимости snnls.snnlssetproblem(snnlssolver s, Double[,] a, Double[] b, Int32 ns, Int32 nd, Int32 nr)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsnnls.snnlssolvesnnlsalglibsnnlssolverDoubleArrayRef">
            <summary>Задает оболочка совместимости snnls.snnlssolve(snnlssolver s, Double[]&amp; x)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsnnls.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsnnls.Shimsnnlssolver">
            <summary>Тип оболочки совместимости для alglib+snnls+snnlssolver</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsnnls.Shimsnnlssolver.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsnnls.Shimsnnlssolver.#ctor(alglib.snnls.snnlssolver)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsnnls.Shimsnnlssolver.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsnnls.Shimsnnlssolver.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsnnls.Shimsnnlssolver.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsnnls.Shimsnnlssolver.Constructor">
            <summary>Задает оболочка совместимости snnlssolver.snnlssolver()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsnnls.Shimsnnlssolver.init">
            <summary>Задает оболочка совместимости snnlssolver.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsnnls.Shimsnnlssolver.make_copy">
            <summary>Задает оболочка совместимости snnlssolver.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsnnls.Shimsnnlssolver.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsnnls.Shimsnnlssolver.AllInstances.init">
            <summary>Задает оболочка совместимости snnlssolver.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsnnls.Shimsnnlssolver.AllInstances.make_copy">
            <summary>Задает оболочка совместимости snnlssolver.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsparse">
            <summary>Тип оболочки совместимости для alglib+sparse</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparse.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparse.#ctor(alglib.sparse)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparse.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparse.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.Constructor">
            <summary>Задает оболочка совместимости sparse.sparse()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.hashInt32Int32Int32">
            <summary>Задает оболочка совместимости sparse.hash(Int32 i, Int32 j, Int32 tabsize)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparseaddsparsealglibsparsematrixInt32Int32Double">
            <summary>Задает оболочка совместимости sparse.sparseadd(sparsematrix s, Int32 i, Int32 j, Double v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparseconverttocrssparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparseconverttocrs(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparseconverttohashsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparseconverttohash(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparseconverttoskssparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparseconverttosks(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparseconverttosparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости sparse.sparseconvertto(sparsematrix s0, Int32 fmt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsecopybufsparsealglibsparsematrixsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsecopybuf(sparsematrix s0, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsecopysparsealglibsparsematrixsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsecopy(sparsematrix s0, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsecopytobufsparsealglibsparsematrixInt32sparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsecopytobuf(sparsematrix s0, Int32 fmt, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsecopytocrsbufsparsealglibsparsematrixsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsecopytocrsbuf(sparsematrix s0, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsecopytocrssparsealglibsparsematrixsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsecopytocrs(sparsematrix s0, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsecopytohashbufsparsealglibsparsematrixsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsecopytohashbuf(sparsematrix s0, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsecopytohashsparsealglibsparsematrixsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsecopytohash(sparsematrix s0, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsecopytosksbufsparsealglibsparsematrixsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsecopytosksbuf(sparsematrix s0, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsecopytoskssparsealglibsparsematrixsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsecopytosks(sparsematrix s0, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsecreateInt32Int32Int32sparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsecreate(Int32 m, Int32 n, Int32 k, sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsecreatebufInt32Int32Int32sparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsecreatebuf(Int32 m, Int32 n, Int32 k, sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsecreatecrsInt32Int32Int32Arraysparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsecreatecrs(Int32 m, Int32 n, Int32[] ner, sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsecreatecrsbufInt32Int32Int32Arraysparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsecreatecrsbuf(Int32 m, Int32 n, Int32[] ner, sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsecreatesksInt32Int32Int32ArrayInt32Arraysparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsecreatesks(Int32 m, Int32 n, Int32[] d, Int32[] u, sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsecreatesksbufInt32Int32Int32ArrayInt32Arraysparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsecreatesksbuf(Int32 m, Int32 n, Int32[] d, Int32[] u, sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparseenumeratesparsealglibsparsematrixInt32RefInt32RefInt32RefInt32RefDoubleRef">
            <summary>Задает оболочка совместимости sparse.sparseenumerate(sparsematrix s, Int32&amp; t0, Int32&amp; t1, Int32&amp; i, Int32&amp; j, Double&amp; v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsefreesparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsefree(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsegetaveragelengthofchainsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsegetaveragelengthofchain(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsegetcompressedrowsparsealglibsparsematrixInt32Int32ArrayRefDoubleArrayRefInt32Ref">
            <summary>Задает оболочка совместимости sparse.sparsegetcompressedrow(sparsematrix s, Int32 i, Int32[]&amp; colidx, Double[]&amp; vals, Int32&amp; nzcnt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsegetdiagonalsparsealglibsparsematrixInt32">
            <summary>Задает оболочка совместимости sparse.sparsegetdiagonal(sparsematrix s, Int32 i)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsegetlowercountsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsegetlowercount(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsegetmatrixtypesparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsegetmatrixtype(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsegetncolssparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsegetncols(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsegetnrowssparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsegetnrows(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsegetrowsparsealglibsparsematrixInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости sparse.sparsegetrow(sparsematrix s, Int32 i, Double[]&amp; irow)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsegetsparsealglibsparsematrixInt32Int32">
            <summary>Задает оболочка совместимости sparse.sparseget(sparsematrix s, Int32 i, Int32 j)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsegetuppercountsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsegetuppercount(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparseinitduidxsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparseinitduidx(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparseiscrssparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparseiscrs(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparseishashsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparseishash(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparseisskssparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparseissks(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsemm2sparsealglibsparsematrixDoubleMdArray2Int32DoubleMdArray2RefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости sparse.sparsemm2(sparsematrix s, Double[,] a, Int32 k, Double[,]&amp; b0, Double[,]&amp; b1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsemmsparsealglibsparsematrixDoubleMdArray2Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости sparse.sparsemm(sparsematrix s, Double[,] a, Int32 k, Double[,]&amp; b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsemtmsparsealglibsparsematrixDoubleMdArray2Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости sparse.sparsemtm(sparsematrix s, Double[,] a, Int32 k, Double[,]&amp; b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsemtvsparsealglibsparsematrixDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости sparse.sparsemtv(sparsematrix s, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsemv2sparsealglibsparsematrixDoubleArrayDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости sparse.sparsemv2(sparsematrix s, Double[] x, Double[]&amp; y0, Double[]&amp; y1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsemvsparsealglibsparsematrixDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости sparse.sparsemv(sparsematrix s, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparseresizematrixsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparseresizematrix(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparserewriteexistingsparsealglibsparsematrixInt32Int32Double">
            <summary>Задает оболочка совместимости sparse.sparserewriteexisting(sparsematrix s, Int32 i, Int32 j, Double v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsesetsparsealglibsparsematrixInt32Int32Double">
            <summary>Задает оболочка совместимости sparse.sparseset(sparsematrix s, Int32 i, Int32 j, Double v)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsesmmsparsealglibsparsematrixBooleanDoubleMdArray2Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости sparse.sparsesmm(sparsematrix s, Boolean isupper, Double[,] a, Int32 k, Double[,]&amp; b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsesmvsparsealglibsparsematrixBooleanDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости sparse.sparsesmv(sparsematrix s, Boolean isupper, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparseswapsparsealglibsparsematrixsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparseswap(sparsematrix s0, sparsematrix s1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsetransposeskssparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparse.sparsetransposesks(sparsematrix s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsetrmvsparsealglibsparsematrixBooleanBooleanInt32DoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости sparse.sparsetrmv(sparsematrix s, Boolean isupper, Boolean isunit, Int32 optype, Double[] x, Double[]&amp; y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsetrsvsparsealglibsparsematrixBooleanBooleanInt32DoubleArray">
            <summary>Задает оболочка совместимости sparse.sparsetrsv(sparsematrix s, Boolean isupper, Boolean isunit, Int32 optype, Double[] x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.sparsevsmvsparsealglibsparsematrixBooleanDoubleArray">
            <summary>Задает оболочка совместимости sparse.sparsevsmv(sparsematrix s, Boolean isupper, Double[] x)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsparse.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsparse.Shimsparsebuffers">
            <summary>Тип оболочки совместимости для alglib+sparse+sparsebuffers</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparse.Shimsparsebuffers.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparse.Shimsparsebuffers.#ctor(alglib.sparse.sparsebuffers)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparse.Shimsparsebuffers.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparse.Shimsparsebuffers.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.Shimsparsebuffers.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.Shimsparsebuffers.Constructor">
            <summary>Задает оболочка совместимости sparsebuffers.sparsebuffers()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.Shimsparsebuffers.init">
            <summary>Задает оболочка совместимости sparsebuffers.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.Shimsparsebuffers.make_copy">
            <summary>Задает оболочка совместимости sparsebuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsparse.Shimsparsebuffers.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.Shimsparsebuffers.AllInstances.init">
            <summary>Задает оболочка совместимости sparsebuffers.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.Shimsparsebuffers.AllInstances.make_copy">
            <summary>Задает оболочка совместимости sparsebuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsparse.Shimsparsematrix">
            <summary>Тип оболочки совместимости для alglib+sparse+sparsematrix</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparse.Shimsparsematrix.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparse.Shimsparsematrix.#ctor(alglib.sparse.sparsematrix)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparse.Shimsparsematrix.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparse.Shimsparsematrix.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.Shimsparsematrix.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.Shimsparsematrix.Constructor">
            <summary>Задает оболочка совместимости sparsematrix.sparsematrix()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.Shimsparsematrix.init">
            <summary>Задает оболочка совместимости sparsematrix.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.Shimsparsematrix.make_copy">
            <summary>Задает оболочка совместимости sparsematrix.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsparse.Shimsparsematrix.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.Shimsparsematrix.AllInstances.init">
            <summary>Задает оболочка совместимости sparsematrix.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparse.Shimsparsematrix.AllInstances.make_copy">
            <summary>Задает оболочка совместимости sparsematrix.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsparsebuffers">
            <summary>Тип оболочки совместимости для alglib+sparsebuffers</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparsebuffers.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparsebuffers.#ctor(alglib.sparsebuffers)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparsebuffers.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparsebuffers.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparsebuffers.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparsebuffers.Constructor">
            <summary>Задает оболочка совместимости sparsebuffers.sparsebuffers()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparsebuffers.Constructorsparsealglibsparsebuffers">
            <summary>Задает оболочка совместимости sparsebuffers.sparsebuffers(sparsebuffers obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparsebuffers.innerobjGet">
            <summary>Задает оболочка совместимости sparsebuffers.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparsebuffers.make_copy">
            <summary>Задает оболочка совместимости sparsebuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsparsebuffers.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparsebuffers.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости sparsebuffers.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparsebuffers.AllInstances.make_copy">
            <summary>Задает оболочка совместимости sparsebuffers.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsparsematrix">
            <summary>Тип оболочки совместимости для alglib+sparsematrix</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparsematrix.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparsematrix.#ctor(alglib.sparsematrix)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparsematrix.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsparsematrix.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparsematrix.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparsematrix.Constructor">
            <summary>Задает оболочка совместимости sparsematrix.sparsematrix()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparsematrix.Constructorsparsealglibsparsematrix">
            <summary>Задает оболочка совместимости sparsematrix.sparsematrix(sparsematrix obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparsematrix.innerobjGet">
            <summary>Задает оболочка совместимости sparsematrix.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparsematrix.make_copy">
            <summary>Задает оболочка совместимости sparsematrix.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsparsematrix.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparsematrix.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости sparsematrix.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsparsematrix.AllInstances.make_copy">
            <summary>Задает оболочка совместимости sparsematrix.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspdgevd">
            <summary>Тип оболочки совместимости для alglib+spdgevd</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspdgevd.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspdgevd.#ctor(alglib.spdgevd)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspdgevd.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspdgevd.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspdgevd.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspdgevd.Constructor">
            <summary>Задает оболочка совместимости spdgevd.spdgevd()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspdgevd.smatrixgevdDoubleMdArray2Int32BooleanDoubleMdArray2BooleanInt32Int32DoubleArrayRefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости spdgevd.smatrixgevd(Double[,] a, Int32 n, Boolean isuppera, Double[,] b, Boolean isupperb, Int32 zneeded, Int32 problemtype, Double[]&amp; d, Double[,]&amp; z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspdgevd.smatrixgevdreduceDoubleMdArray2RefInt32BooleanDoubleMdArray2BooleanInt32DoubleMdArray2RefBooleanRef">
            <summary>Задает оболочка совместимости spdgevd.smatrixgevdreduce(Double[,]&amp; a, Int32 n, Boolean isuppera, Double[,] b, Boolean isupperb, Int32 problemtype, Double[,]&amp; r, Boolean&amp; isupperr)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspdgevd.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline1d">
            <summary>Тип оболочки совместимости для alglib+spline1d</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1d.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1d.#ctor(alglib.spline1d)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1d.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1d.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.Constructor">
            <summary>Задает оболочка совместимости spline1d.spline1d()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.bisectmethodDoubleDoubleDoubleDoubleDoubleDoubleDoubleRef">
            <summary>Задает оболочка совместимости spline1d.bisectmethod(Double pa, Double ma, Double pb, Double mb, Double a, Double b, Double&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.diffthreepointDoubleDoubleDoubleDoubleDoubleDoubleDouble">
            <summary>Задает оболочка совместимости spline1d.diffthreepoint(Double t, Double x0, Double f0, Double x1, Double f1, Double x2, Double f2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.heapsortdpointsDoubleArrayRefDoubleArrayRefDoubleArrayRefInt32">
            <summary>Задает оболочка совместимости spline1d.heapsortdpoints(Double[]&amp; x, Double[]&amp; y, Double[]&amp; d, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.heapsortpointsDoubleArrayRefDoubleArrayRefInt32">
            <summary>Задает оболочка совместимости spline1d.heapsortpoints(Double[]&amp; x, Double[]&amp; y, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.heapsortppointsDoubleArrayRefDoubleArrayRefInt32ArrayRefInt32">
            <summary>Задает оболочка совместимости spline1d.heapsortppoints(Double[]&amp; x, Double[]&amp; y, Int32[]&amp; p, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.hermitecalcDoubleDoubleDoubleDoubleDoubleDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости spline1d.hermitecalc(Double p0, Double m0, Double p1, Double m1, Double t, Double&amp; s, Double&amp; ds)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.rescalevalDoubleDoubleDoubleDoubleDouble">
            <summary>Задает оболочка совместимости spline1d.rescaleval(Double a0, Double b0, Double a1, Double b1, Double t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.solvecubicpolinomDoubleDoubleDoubleDoubleDoubleDoubleDoubleRefDoubleRefDoubleRefDoubleRefDoubleRefInt32RefInt32RefDoubleArrayRef">
            <summary>Задает оболочка совместимости spline1d.solvecubicpolinom(Double pa, Double ma, Double pb, Double mb, Double a, Double b, Double&amp; x0, Double&amp; x1, Double&amp; x2, Double&amp; ex0, Double&amp; ex1, Int32&amp; nr, Int32&amp; ne, Double[]&amp; tempdata)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.solvecyclictridiagonalDoubleArrayDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости spline1d.solvecyclictridiagonal(Double[] a, Double[] b, Double[] c, Double[] d, Int32 n, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.solvepolinom2DoubleDoubleDoubleDoubleDoubleRefDoubleRefInt32Ref">
            <summary>Задает оболочка совместимости spline1d.solvepolinom2(Double p0, Double m0, Double p1, Double m1, Double&amp; x0, Double&amp; x1, Int32&amp; nr)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.solvetridiagonalDoubleArrayDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости spline1d.solvetridiagonal(Double[] a, Double[] b, Double[] c, Double[] d, Int32 n, Double[]&amp; x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dbuildakimaDoubleArrayDoubleArrayInt32spline1dalglibspline1dinterpolant">
            <summary>Задает оболочка совместимости spline1d.spline1dbuildakima(Double[] x, Double[] y, Int32 n, spline1dinterpolant c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dbuildcatmullromDoubleArrayDoubleArrayInt32Int32Doublespline1dalglibspline1dinterpolant">
            <summary>Задает оболочка совместимости spline1d.spline1dbuildcatmullrom(Double[] x, Double[] y, Int32 n, Int32 boundtype, Double tension, spline1dinterpolant c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dbuildcubicDoubleArrayDoubleArrayInt32Int32DoubleInt32Doublespline1dalglibspline1dinterpolant">
            <summary>Задает оболочка совместимости spline1d.spline1dbuildcubic(Double[] x, Double[] y, Int32 n, Int32 boundltype, Double boundl, Int32 boundrtype, Double boundr, spline1dinterpolant c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dbuildhermiteDoubleArrayDoubleArrayDoubleArrayInt32spline1dalglibspline1dinterpolant">
            <summary>Задает оболочка совместимости spline1d.spline1dbuildhermite(Double[] x, Double[] y, Double[] d, Int32 n, spline1dinterpolant c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dbuildlinearDoubleArrayDoubleArrayInt32spline1dalglibspline1dinterpolant">
            <summary>Задает оболочка совместимости spline1d.spline1dbuildlinear(Double[] x, Double[] y, Int32 n, spline1dinterpolant c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dbuildmonotoneDoubleArrayDoubleArrayInt32spline1dalglibspline1dinterpolant">
            <summary>Задает оболочка совместимости spline1d.spline1dbuildmonotone(Double[] x, Double[] y, Int32 n, spline1dinterpolant c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dcalcspline1dalglibspline1dinterpolantDouble">
            <summary>Задает оболочка совместимости spline1d.spline1dcalc(spline1dinterpolant c, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dconvcubicDoubleArrayDoubleArrayInt32Int32DoubleInt32DoubleDoubleArrayInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости spline1d.spline1dconvcubic(Double[] x, Double[] y, Int32 n, Int32 boundltype, Double boundl, Int32 boundrtype, Double boundr, Double[] x2, Int32 n2, Double[]&amp; y2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dconvdiff2cubicDoubleArrayDoubleArrayInt32Int32DoubleInt32DoubleDoubleArrayInt32DoubleArrayRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости spline1d.spline1dconvdiff2cubic(Double[] x, Double[] y, Int32 n, Int32 boundltype, Double boundl, Int32 boundrtype, Double boundr, Double[] x2, Int32 n2, Double[]&amp; y2, Double[]&amp; d2, Double[]&amp; dd2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dconvdiffcubicDoubleArrayDoubleArrayInt32Int32DoubleInt32DoubleDoubleArrayInt32DoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости spline1d.spline1dconvdiffcubic(Double[] x, Double[] y, Int32 n, Int32 boundltype, Double boundl, Int32 boundrtype, Double boundr, Double[] x2, Int32 n2, Double[]&amp; y2, Double[]&amp; d2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dconvdiffinternalDoubleArrayDoubleArrayDoubleArrayInt32DoubleArrayInt32DoubleArrayRefBooleanDoubleArrayRefBooleanDoubleArrayRefBoolean">
            <summary>Задает оболочка совместимости spline1d.spline1dconvdiffinternal(Double[] xold, Double[] yold, Double[] dold, Int32 n, Double[] x2, Int32 n2, Double[]&amp; y, Boolean needy, Double[]&amp; d1, Boolean needd1, Double[]&amp; d2, Boolean needd2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dcopyspline1dalglibspline1dinterpolantspline1dalglibspline1dinterpolant">
            <summary>Задает оболочка совместимости spline1d.spline1dcopy(spline1dinterpolant c, spline1dinterpolant cc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1ddiffspline1dalglibspline1dinterpolantDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости spline1d.spline1ddiff(spline1dinterpolant c, Double x, Double&amp; s, Double&amp; ds, Double&amp; d2s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dgriddiff2cubicDoubleArrayDoubleArrayInt32Int32DoubleInt32DoubleDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости spline1d.spline1dgriddiff2cubic(Double[] x, Double[] y, Int32 n, Int32 boundltype, Double boundl, Int32 boundrtype, Double boundr, Double[]&amp; d1, Double[]&amp; d2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dgriddiffcubicDoubleArrayDoubleArrayInt32Int32DoubleInt32DoubleDoubleArrayRef">
            <summary>Задает оболочка совместимости spline1d.spline1dgriddiffcubic(Double[] x, Double[] y, Int32 n, Int32 boundltype, Double boundl, Int32 boundrtype, Double boundr, Double[]&amp; d)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dgriddiffcubicinternalDoubleArrayDoubleArrayRefInt32Int32DoubleInt32DoubleDoubleArrayRefDoubleArrayRefDoubleArrayRefDoubleArrayRefDoubleArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости spline1d.spline1dgriddiffcubicinternal(Double[] x, Double[]&amp; y, Int32 n, Int32 boundltype, Double boundl, Int32 boundrtype, Double boundr, Double[]&amp; d, Double[]&amp; a1, Double[]&amp; a2, Double[]&amp; a3, Double[]&amp; b, Double[]&amp; dt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dintegratespline1dalglibspline1dinterpolantDouble">
            <summary>Задает оболочка совместимости spline1d.spline1dintegrate(spline1dinterpolant c, Double x)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dlintransxspline1dalglibspline1dinterpolantDoubleDouble">
            <summary>Задает оболочка совместимости spline1d.spline1dlintransx(spline1dinterpolant c, Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dlintransyspline1dalglibspline1dinterpolantDoubleDouble">
            <summary>Задает оболочка совместимости spline1d.spline1dlintransy(spline1dinterpolant c, Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1drootsandextremaspline1dalglibspline1dinterpolantDoubleArrayRefInt32RefBooleanRefDoubleArrayRefInt32ArrayRefInt32RefBooleanRef">
            <summary>Задает оболочка совместимости spline1d.spline1drootsandextrema(spline1dinterpolant c, Double[]&amp; r, Int32&amp; nr, Boolean&amp; dr, Double[]&amp; e, Int32[]&amp; et, Int32&amp; ne, Boolean&amp; de)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.spline1dunpackspline1dalglibspline1dinterpolantInt32RefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости spline1d.spline1dunpack(spline1dinterpolant c, Int32&amp; n, Double[,]&amp; tbl)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline1d.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline1d.Shimspline1dinterpolant">
            <summary>Тип оболочки совместимости для alglib+spline1d+spline1dinterpolant</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1d.Shimspline1dinterpolant.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1d.Shimspline1dinterpolant.#ctor(alglib.spline1d.spline1dinterpolant)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1d.Shimspline1dinterpolant.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1d.Shimspline1dinterpolant.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.Shimspline1dinterpolant.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.Shimspline1dinterpolant.Constructor">
            <summary>Задает оболочка совместимости spline1dinterpolant.spline1dinterpolant()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.Shimspline1dinterpolant.init">
            <summary>Задает оболочка совместимости spline1dinterpolant.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.Shimspline1dinterpolant.make_copy">
            <summary>Задает оболочка совместимости spline1dinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline1d.Shimspline1dinterpolant.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.Shimspline1dinterpolant.AllInstances.init">
            <summary>Задает оболочка совместимости spline1dinterpolant.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1d.Shimspline1dinterpolant.AllInstances.make_copy">
            <summary>Задает оболочка совместимости spline1dinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline1dfitreport">
            <summary>Тип оболочки совместимости для alglib+spline1dfitreport</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1dfitreport.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1dfitreport.#ctor(alglib.spline1dfitreport)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1dfitreport.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1dfitreport.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.Constructor">
            <summary>Задает оболочка совместимости spline1dfitreport.spline1dfitreport()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.Constructorlsfitalglibspline1dfitreport">
            <summary>Задает оболочка совместимости spline1dfitreport.spline1dfitreport(spline1dfitreport obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.avgerrorGet">
            <summary>Задает оболочка совместимости spline1dfitreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.avgerrorSetDouble">
            <summary>Задает оболочка совместимости spline1dfitreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.avgrelerrorGet">
            <summary>Задает оболочка совместимости spline1dfitreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости spline1dfitreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.innerobjGet">
            <summary>Задает оболочка совместимости spline1dfitreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.make_copy">
            <summary>Задает оболочка совместимости spline1dfitreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.maxerrorGet">
            <summary>Задает оболочка совместимости spline1dfitreport.get_maxerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.maxerrorSetDouble">
            <summary>Задает оболочка совместимости spline1dfitreport.set_maxerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.rmserrorGet">
            <summary>Задает оболочка совместимости spline1dfitreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.rmserrorSetDouble">
            <summary>Задает оболочка совместимости spline1dfitreport.set_rmserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.taskrcondGet">
            <summary>Задает оболочка совместимости spline1dfitreport.get_taskrcond()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.taskrcondSetDouble">
            <summary>Задает оболочка совместимости spline1dfitreport.set_taskrcond(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline1dfitreport.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.AllInstances.avgerrorGet">
            <summary>Задает оболочка совместимости spline1dfitreport.get_avgerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.AllInstances.avgerrorSetDouble">
            <summary>Задает оболочка совместимости spline1dfitreport.set_avgerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.AllInstances.avgrelerrorGet">
            <summary>Задает оболочка совместимости spline1dfitreport.get_avgrelerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.AllInstances.avgrelerrorSetDouble">
            <summary>Задает оболочка совместимости spline1dfitreport.set_avgrelerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости spline1dfitreport.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.AllInstances.make_copy">
            <summary>Задает оболочка совместимости spline1dfitreport.make_copy()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.AllInstances.maxerrorGet">
            <summary>Задает оболочка совместимости spline1dfitreport.get_maxerror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.AllInstances.maxerrorSetDouble">
            <summary>Задает оболочка совместимости spline1dfitreport.set_maxerror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.AllInstances.rmserrorGet">
            <summary>Задает оболочка совместимости spline1dfitreport.get_rmserror()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.AllInstances.rmserrorSetDouble">
            <summary>Задает оболочка совместимости spline1dfitreport.set_rmserror(Double value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.AllInstances.taskrcondGet">
            <summary>Задает оболочка совместимости spline1dfitreport.get_taskrcond()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dfitreport.AllInstances.taskrcondSetDouble">
            <summary>Задает оболочка совместимости spline1dfitreport.set_taskrcond(Double value)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline1dinterpolant">
            <summary>Тип оболочки совместимости для alglib+spline1dinterpolant</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1dinterpolant.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1dinterpolant.#ctor(alglib.spline1dinterpolant)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1dinterpolant.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline1dinterpolant.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dinterpolant.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dinterpolant.Constructor">
            <summary>Задает оболочка совместимости spline1dinterpolant.spline1dinterpolant()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dinterpolant.Constructorspline1dalglibspline1dinterpolant">
            <summary>Задает оболочка совместимости spline1dinterpolant.spline1dinterpolant(spline1dinterpolant obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dinterpolant.innerobjGet">
            <summary>Задает оболочка совместимости spline1dinterpolant.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dinterpolant.make_copy">
            <summary>Задает оболочка совместимости spline1dinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline1dinterpolant.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dinterpolant.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости spline1dinterpolant.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline1dinterpolant.AllInstances.make_copy">
            <summary>Задает оболочка совместимости spline1dinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline2d">
            <summary>Тип оболочки совместимости для alglib+spline2d</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline2d.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline2d.#ctor(alglib.spline2d)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline2d.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline2d.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.Constructor">
            <summary>Задает оболочка совместимости spline2d.spline2d()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.bicubiccalcderivativesDoubleMdArray2DoubleArrayDoubleArrayInt32Int32DoubleMdArray2RefDoubleMdArray2RefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости spline2d.bicubiccalcderivatives(Double[,] a, Double[] x, Double[] y, Int32 m, Int32 n, Double[,]&amp; dx, Double[,]&amp; dy, Double[,]&amp; dxy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.spline2dbuildbicubicDoubleArrayDoubleArrayDoubleMdArray2Int32Int32spline2dalglibspline2dinterpolant">
            <summary>Задает оболочка совместимости spline2d.spline2dbuildbicubic(Double[] x, Double[] y, Double[,] f, Int32 m, Int32 n, spline2dinterpolant c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.spline2dbuildbicubicvDoubleArrayInt32DoubleArrayInt32DoubleArrayInt32spline2dalglibspline2dinterpolant">
            <summary>Задает оболочка совместимости spline2d.spline2dbuildbicubicv(Double[] x, Int32 n, Double[] y, Int32 m, Double[] f, Int32 d, spline2dinterpolant c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.spline2dbuildbilinearDoubleArrayDoubleArrayDoubleMdArray2Int32Int32spline2dalglibspline2dinterpolant">
            <summary>Задает оболочка совместимости spline2d.spline2dbuildbilinear(Double[] x, Double[] y, Double[,] f, Int32 m, Int32 n, spline2dinterpolant c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.spline2dbuildbilinearvDoubleArrayInt32DoubleArrayInt32DoubleArrayInt32spline2dalglibspline2dinterpolant">
            <summary>Задает оболочка совместимости spline2d.spline2dbuildbilinearv(Double[] x, Int32 n, Double[] y, Int32 m, Double[] f, Int32 d, spline2dinterpolant c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.spline2dcalcspline2dalglibspline2dinterpolantDoubleDouble">
            <summary>Задает оболочка совместимости spline2d.spline2dcalc(spline2dinterpolant c, Double x, Double y)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.spline2dcalcvbufspline2dalglibspline2dinterpolantDoubleDoubleDoubleArrayRef">
            <summary>Задает оболочка совместимости spline2d.spline2dcalcvbuf(spline2dinterpolant c, Double x, Double y, Double[]&amp; f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.spline2dcalcvspline2dalglibspline2dinterpolantDoubleDoubleDoubleArrayRef">
            <summary>Задает оболочка совместимости spline2d.spline2dcalcv(spline2dinterpolant c, Double x, Double y, Double[]&amp; f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.spline2dcopyspline2dalglibspline2dinterpolantspline2dalglibspline2dinterpolant">
            <summary>Задает оболочка совместимости spline2d.spline2dcopy(spline2dinterpolant c, spline2dinterpolant cc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.spline2ddiffspline2dalglibspline2dinterpolantDoubleDoubleDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости spline2d.spline2ddiff(spline2dinterpolant c, Double x, Double y, Double&amp; f, Double&amp; fx, Double&amp; fy, Double&amp; fxy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.spline2dlintransfspline2dalglibspline2dinterpolantDoubleDouble">
            <summary>Задает оболочка совместимости spline2d.spline2dlintransf(spline2dinterpolant c, Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.spline2dlintransxyspline2dalglibspline2dinterpolantDoubleDoubleDoubleDouble">
            <summary>Задает оболочка совместимости spline2d.spline2dlintransxy(spline2dinterpolant c, Double ax, Double bx, Double ay, Double by)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.spline2dresamplebicubicDoubleMdArray2Int32Int32DoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости spline2d.spline2dresamplebicubic(Double[,] a, Int32 oldheight, Int32 oldwidth, Double[,]&amp; b, Int32 newheight, Int32 newwidth)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.spline2dresamplebilinearDoubleMdArray2Int32Int32DoubleMdArray2RefInt32Int32">
            <summary>Задает оболочка совместимости spline2d.spline2dresamplebilinear(Double[,] a, Int32 oldheight, Int32 oldwidth, Double[,]&amp; b, Int32 newheight, Int32 newwidth)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.spline2dunpackspline2dalglibspline2dinterpolantInt32RefInt32RefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости spline2d.spline2dunpack(spline2dinterpolant c, Int32&amp; m, Int32&amp; n, Double[,]&amp; tbl)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.spline2dunpackvspline2dalglibspline2dinterpolantInt32RefInt32RefInt32RefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости spline2d.spline2dunpackv(spline2dinterpolant c, Int32&amp; m, Int32&amp; n, Int32&amp; d, Double[,]&amp; tbl)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline2d.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline2d.Shimspline2dinterpolant">
            <summary>Тип оболочки совместимости для alglib+spline2d+spline2dinterpolant</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline2d.Shimspline2dinterpolant.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline2d.Shimspline2dinterpolant.#ctor(alglib.spline2d.spline2dinterpolant)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline2d.Shimspline2dinterpolant.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline2d.Shimspline2dinterpolant.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.Shimspline2dinterpolant.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.Shimspline2dinterpolant.Constructor">
            <summary>Задает оболочка совместимости spline2dinterpolant.spline2dinterpolant()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.Shimspline2dinterpolant.init">
            <summary>Задает оболочка совместимости spline2dinterpolant.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.Shimspline2dinterpolant.make_copy">
            <summary>Задает оболочка совместимости spline2dinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline2d.Shimspline2dinterpolant.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.Shimspline2dinterpolant.AllInstances.init">
            <summary>Задает оболочка совместимости spline2dinterpolant.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2d.Shimspline2dinterpolant.AllInstances.make_copy">
            <summary>Задает оболочка совместимости spline2dinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline2dinterpolant">
            <summary>Тип оболочки совместимости для alglib+spline2dinterpolant</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline2dinterpolant.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline2dinterpolant.#ctor(alglib.spline2dinterpolant)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline2dinterpolant.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline2dinterpolant.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2dinterpolant.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2dinterpolant.Constructor">
            <summary>Задает оболочка совместимости spline2dinterpolant.spline2dinterpolant()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2dinterpolant.Constructorspline2dalglibspline2dinterpolant">
            <summary>Задает оболочка совместимости spline2dinterpolant.spline2dinterpolant(spline2dinterpolant obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2dinterpolant.innerobjGet">
            <summary>Задает оболочка совместимости spline2dinterpolant.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2dinterpolant.make_copy">
            <summary>Задает оболочка совместимости spline2dinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline2dinterpolant.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2dinterpolant.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости spline2dinterpolant.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline2dinterpolant.AllInstances.make_copy">
            <summary>Задает оболочка совместимости spline2dinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline3d">
            <summary>Тип оболочки совместимости для alglib+spline3d</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline3d.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline3d.#ctor(alglib.spline3d)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline3d.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline3d.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.Constructor">
            <summary>Задает оболочка совместимости spline3d.spline3d()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.spline3dbuildtrilinearvDoubleArrayInt32DoubleArrayInt32DoubleArrayInt32DoubleArrayInt32spline3dalglibspline3dinterpolant">
            <summary>Задает оболочка совместимости spline3d.spline3dbuildtrilinearv(Double[] x, Int32 n, Double[] y, Int32 m, Double[] z, Int32 l, Double[] f, Int32 d, spline3dinterpolant c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.spline3dcalcspline3dalglibspline3dinterpolantDoubleDoubleDouble">
            <summary>Задает оболочка совместимости spline3d.spline3dcalc(spline3dinterpolant c, Double x, Double y, Double z)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.spline3dcalcvbufspline3dalglibspline3dinterpolantDoubleDoubleDoubleDoubleArrayRef">
            <summary>Задает оболочка совместимости spline3d.spline3dcalcvbuf(spline3dinterpolant c, Double x, Double y, Double z, Double[]&amp; f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.spline3dcalcvspline3dalglibspline3dinterpolantDoubleDoubleDoubleDoubleArrayRef">
            <summary>Задает оболочка совместимости spline3d.spline3dcalcv(spline3dinterpolant c, Double x, Double y, Double z, Double[]&amp; f)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.spline3dcopyspline3dalglibspline3dinterpolantspline3dalglibspline3dinterpolant">
            <summary>Задает оболочка совместимости spline3d.spline3dcopy(spline3dinterpolant c, spline3dinterpolant cc)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.spline3ddiffspline3dalglibspline3dinterpolantDoubleDoubleDoubleDoubleRefDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости spline3d.spline3ddiff(spline3dinterpolant c, Double x, Double y, Double z, Double&amp; f, Double&amp; fx, Double&amp; fy, Double&amp; fxy)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.spline3dlintransfspline3dalglibspline3dinterpolantDoubleDouble">
            <summary>Задает оболочка совместимости spline3d.spline3dlintransf(spline3dinterpolant c, Double a, Double b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.spline3dlintransxyzspline3dalglibspline3dinterpolantDoubleDoubleDoubleDoubleDoubleDouble">
            <summary>Задает оболочка совместимости spline3d.spline3dlintransxyz(spline3dinterpolant c, Double ax, Double bx, Double ay, Double by, Double az, Double bz)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.spline3dresampletrilinearDoubleArrayInt32Int32Int32Int32Int32Int32DoubleArrayRef">
            <summary>Задает оболочка совместимости spline3d.spline3dresampletrilinear(Double[] a, Int32 oldzcount, Int32 oldycount, Int32 oldxcount, Int32 newzcount, Int32 newycount, Int32 newxcount, Double[]&amp; b)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.spline3dunpackvspline3dalglibspline3dinterpolantInt32RefInt32RefInt32RefInt32RefInt32RefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости spline3d.spline3dunpackv(spline3dinterpolant c, Int32&amp; n, Int32&amp; m, Int32&amp; l, Int32&amp; d, Int32&amp; stype, Double[,]&amp; tbl)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline3d.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline3d.Shimspline3dinterpolant">
            <summary>Тип оболочки совместимости для alglib+spline3d+spline3dinterpolant</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline3d.Shimspline3dinterpolant.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline3d.Shimspline3dinterpolant.#ctor(alglib.spline3d.spline3dinterpolant)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline3d.Shimspline3dinterpolant.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline3d.Shimspline3dinterpolant.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.Shimspline3dinterpolant.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.Shimspline3dinterpolant.Constructor">
            <summary>Задает оболочка совместимости spline3dinterpolant.spline3dinterpolant()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.Shimspline3dinterpolant.init">
            <summary>Задает оболочка совместимости spline3dinterpolant.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.Shimspline3dinterpolant.make_copy">
            <summary>Задает оболочка совместимости spline3dinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline3d.Shimspline3dinterpolant.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.Shimspline3dinterpolant.AllInstances.init">
            <summary>Задает оболочка совместимости spline3dinterpolant.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3d.Shimspline3dinterpolant.AllInstances.make_copy">
            <summary>Задает оболочка совместимости spline3dinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline3dinterpolant">
            <summary>Тип оболочки совместимости для alglib+spline3dinterpolant</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline3dinterpolant.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline3dinterpolant.#ctor(alglib.spline3dinterpolant)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline3dinterpolant.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimspline3dinterpolant.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3dinterpolant.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3dinterpolant.Constructor">
            <summary>Задает оболочка совместимости spline3dinterpolant.spline3dinterpolant()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3dinterpolant.Constructorspline3dalglibspline3dinterpolant">
            <summary>Задает оболочка совместимости spline3dinterpolant.spline3dinterpolant(spline3dinterpolant obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3dinterpolant.innerobjGet">
            <summary>Задает оболочка совместимости spline3dinterpolant.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3dinterpolant.make_copy">
            <summary>Задает оболочка совместимости spline3dinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimspline3dinterpolant.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3dinterpolant.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости spline3dinterpolant.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimspline3dinterpolant.AllInstances.make_copy">
            <summary>Задает оболочка совместимости spline3dinterpolant.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimstest">
            <summary>Тип оболочки совместимости для alglib+stest</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimstest.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimstest.#ctor(alglib.stest)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimstest.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimstest.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimstest.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimstest.Constructor">
            <summary>Задает оболочка совместимости stest.stest()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimstest.onesamplesigntestDoubleArrayInt32DoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости stest.onesamplesigntest(Double[] x, Int32 n, Double median, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimstest.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimstudenttdistr">
            <summary>Тип оболочки совместимости для alglib+studenttdistr</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimstudenttdistr.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimstudenttdistr.#ctor(alglib.studenttdistr)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimstudenttdistr.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimstudenttdistr.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimstudenttdistr.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimstudenttdistr.Constructor">
            <summary>Задает оболочка совместимости studenttdistr.studenttdistr()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimstudenttdistr.invstudenttdistributionInt32Double">
            <summary>Задает оболочка совместимости studenttdistr.invstudenttdistribution(Int32 k, Double p)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimstudenttdistr.studenttdistributionInt32Double">
            <summary>Задает оболочка совместимости studenttdistr.studenttdistribution(Int32 k, Double t)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimstudenttdistr.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimstudentttests">
            <summary>Тип оболочки совместимости для alglib+studentttests</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimstudentttests.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimstudentttests.#ctor(alglib.studentttests)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimstudentttests.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimstudentttests.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimstudentttests.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimstudentttests.Constructor">
            <summary>Задает оболочка совместимости studentttests.studentttests()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimstudentttests.studentttest1DoubleArrayInt32DoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости studentttests.studentttest1(Double[] x, Int32 n, Double mean, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimstudentttests.studentttest2DoubleArrayInt32DoubleArrayInt32DoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости studentttests.studentttest2(Double[] x, Int32 n, Double[] y, Int32 m, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimstudentttests.unequalvariancettestDoubleArrayInt32DoubleArrayInt32DoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости studentttests.unequalvariancettest(Double[] x, Int32 n, Double[] y, Int32 m, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimstudentttests.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsvd">
            <summary>Тип оболочки совместимости для alglib+svd</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsvd.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsvd.#ctor(alglib.svd)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsvd.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimsvd.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsvd.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsvd.Constructor">
            <summary>Задает оболочка совместимости svd.svd()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsvd._pexec_rmatrixsvdDoubleMdArray2Int32Int32Int32Int32Int32DoubleArrayRefDoubleMdArray2RefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости svd._pexec_rmatrixsvd(Double[,] a, Int32 m, Int32 n, Int32 uneeded, Int32 vtneeded, Int32 additionalmemory, Double[]&amp; w, Double[,]&amp; u, Double[,]&amp; vt)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimsvd.rmatrixsvdDoubleMdArray2Int32Int32Int32Int32Int32DoubleArrayRefDoubleMdArray2RefDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости svd.rmatrixsvd(Double[,] a, Int32 m, Int32 n, Int32 uneeded, Int32 vtneeded, Int32 additionalmemory, Double[]&amp; w, Double[,]&amp; u, Double[,]&amp; vt)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimsvd.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimtrfac">
            <summary>Тип оболочки совместимости для alglib+trfac</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtrfac.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtrfac.#ctor(alglib.trfac)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtrfac.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtrfac.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.Constructor">
            <summary>Задает оболочка совместимости trfac.trfac()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac._pexec_cmatrixlualglibcomplexMdArray2RefInt32Int32Int32ArrayRef">
            <summary>Задает оболочка совместимости trfac._pexec_cmatrixlu(complex[,]&amp; a, Int32 m, Int32 n, Int32[]&amp; pivots)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac._pexec_hpdmatrixcholeskyalglibcomplexMdArray2RefInt32Boolean">
            <summary>Задает оболочка совместимости trfac._pexec_hpdmatrixcholesky(complex[,]&amp; a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac._pexec_rmatrixluDoubleMdArray2RefInt32Int32Int32ArrayRef">
            <summary>Задает оболочка совместимости trfac._pexec_rmatrixlu(Double[,]&amp; a, Int32 m, Int32 n, Int32[]&amp; pivots)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac._pexec_spdmatrixcholeskyDoubleMdArray2RefInt32Boolean">
            <summary>Задает оболочка совместимости trfac._pexec_spdmatrixcholesky(Double[,]&amp; a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.cmatrixlualglibcomplexMdArray2RefInt32Int32Int32ArrayRef">
            <summary>Задает оболочка совместимости trfac.cmatrixlu(complex[,]&amp; a, Int32 m, Int32 n, Int32[]&amp; pivots)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.cmatrixlup2alglibcomplexMdArray2RefInt32Int32Int32Int32ArrayRefalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости trfac.cmatrixlup2(complex[,]&amp; a, Int32 offs, Int32 m, Int32 n, Int32[]&amp; pivots, complex[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.cmatrixlupalglibcomplexMdArray2RefInt32Int32Int32ArrayRef">
            <summary>Задает оболочка совместимости trfac.cmatrixlup(complex[,]&amp; a, Int32 m, Int32 n, Int32[]&amp; pivots)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.cmatrixluprecalglibcomplexMdArray2RefInt32Int32Int32Int32ArrayRefalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости trfac.cmatrixluprec(complex[,]&amp; a, Int32 offs, Int32 m, Int32 n, Int32[]&amp; pivots, complex[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.cmatrixplu2alglibcomplexMdArray2RefInt32Int32Int32Int32ArrayRefalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости trfac.cmatrixplu2(complex[,]&amp; a, Int32 offs, Int32 m, Int32 n, Int32[]&amp; pivots, complex[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.cmatrixplualglibcomplexMdArray2RefInt32Int32Int32ArrayRef">
            <summary>Задает оболочка совместимости trfac.cmatrixplu(complex[,]&amp; a, Int32 m, Int32 n, Int32[]&amp; pivots)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.cmatrixplurecalglibcomplexMdArray2RefInt32Int32Int32Int32ArrayRefalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости trfac.cmatrixplurec(complex[,]&amp; a, Int32 offs, Int32 m, Int32 n, Int32[]&amp; pivots, complex[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.hpdmatrixcholesky2alglibcomplexMdArray2RefInt32Int32BooleanalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости trfac.hpdmatrixcholesky2(complex[,]&amp; aaa, Int32 offs, Int32 n, Boolean isupper, complex[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.hpdmatrixcholeskyalglibcomplexMdArray2RefInt32Boolean">
            <summary>Задает оболочка совместимости trfac.hpdmatrixcholesky(complex[,]&amp; a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.hpdmatrixcholeskyrecalglibcomplexMdArray2RefInt32Int32BooleanalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости trfac.hpdmatrixcholeskyrec(complex[,]&amp; a, Int32 offs, Int32 n, Boolean isupper, complex[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.rmatrixluDoubleMdArray2RefInt32Int32Int32ArrayRef">
            <summary>Задает оболочка совместимости trfac.rmatrixlu(Double[,]&amp; a, Int32 m, Int32 n, Int32[]&amp; pivots)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.rmatrixlup2DoubleMdArray2RefInt32Int32Int32Int32ArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости trfac.rmatrixlup2(Double[,]&amp; a, Int32 offs, Int32 m, Int32 n, Int32[]&amp; pivots, Double[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.rmatrixlupDoubleMdArray2RefInt32Int32Int32ArrayRef">
            <summary>Задает оболочка совместимости trfac.rmatrixlup(Double[,]&amp; a, Int32 m, Int32 n, Int32[]&amp; pivots)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.rmatrixluprecDoubleMdArray2RefInt32Int32Int32Int32ArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости trfac.rmatrixluprec(Double[,]&amp; a, Int32 offs, Int32 m, Int32 n, Int32[]&amp; pivots, Double[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.rmatrixplu2DoubleMdArray2RefInt32Int32Int32Int32ArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости trfac.rmatrixplu2(Double[,]&amp; a, Int32 offs, Int32 m, Int32 n, Int32[]&amp; pivots, Double[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.rmatrixpluDoubleMdArray2RefInt32Int32Int32ArrayRef">
            <summary>Задает оболочка совместимости trfac.rmatrixplu(Double[,]&amp; a, Int32 m, Int32 n, Int32[]&amp; pivots)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.rmatrixplurecDoubleMdArray2RefInt32Int32Int32Int32ArrayRefDoubleArrayRef">
            <summary>Задает оболочка совместимости trfac.rmatrixplurec(Double[,]&amp; a, Int32 offs, Int32 m, Int32 n, Int32[]&amp; pivots, Double[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.sparsecholeskyskylinesparsealglibsparsematrixInt32Boolean">
            <summary>Задает оболочка совместимости trfac.sparsecholeskyskyline(sparsematrix a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.sparsecholeskyxsparsealglibsparsematrixInt32BooleanInt32ArrayRefInt32ArrayRefInt32Int32Int32sparsealglibsparsebufferssparsealglibsparsematrix">
            <summary>Задает оболочка совместимости trfac.sparsecholeskyx(sparsematrix a, Int32 n, Boolean isupper, Int32[]&amp; p0, Int32[]&amp; p1, Int32 ordering, Int32 algo, Int32 fmt, sparsebuffers buf, sparsematrix c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.spdmatrixcholesky2DoubleMdArray2RefInt32Int32BooleanDoubleArrayRef">
            <summary>Задает оболочка совместимости trfac.spdmatrixcholesky2(Double[,]&amp; aaa, Int32 offs, Int32 n, Boolean isupper, Double[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.spdmatrixcholeskyDoubleMdArray2RefInt32Boolean">
            <summary>Задает оболочка совместимости trfac.spdmatrixcholesky(Double[,]&amp; a, Int32 n, Boolean isupper)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.spdmatrixcholeskyrecDoubleMdArray2RefInt32Int32BooleanDoubleArrayRef">
            <summary>Задает оболочка совместимости trfac.spdmatrixcholeskyrec(Double[,]&amp; a, Int32 offs, Int32 n, Boolean isupper, Double[]&amp; tmp)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.spdmatrixcholeskyupdateadd1DoubleMdArray2Int32BooleanDoubleArray">
            <summary>Задает оболочка совместимости trfac.spdmatrixcholeskyupdateadd1(Double[,] a, Int32 n, Boolean isupper, Double[] u)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.spdmatrixcholeskyupdateadd1bufDoubleMdArray2Int32BooleanDoubleArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости trfac.spdmatrixcholeskyupdateadd1buf(Double[,] a, Int32 n, Boolean isupper, Double[] u, Double[]&amp; bufr)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.spdmatrixcholeskyupdatefixDoubleMdArray2Int32BooleanBooleanArray">
            <summary>Задает оболочка совместимости trfac.spdmatrixcholeskyupdatefix(Double[,] a, Int32 n, Boolean isupper, Boolean[] fix)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrfac.spdmatrixcholeskyupdatefixbufDoubleMdArray2Int32BooleanBooleanArrayDoubleArrayRef">
            <summary>Задает оболочка совместимости trfac.spdmatrixcholeskyupdatefixbuf(Double[,] a, Int32 n, Boolean isupper, Boolean[] fix, Double[]&amp; bufr)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimtrfac.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimtrigintegrals">
            <summary>Тип оболочки совместимости для alglib+trigintegrals</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtrigintegrals.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtrigintegrals.#ctor(alglib.trigintegrals)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtrigintegrals.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtrigintegrals.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrigintegrals.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrigintegrals.Constructor">
            <summary>Задает оболочка совместимости trigintegrals.trigintegrals()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrigintegrals.chebiterationshichiDoubleDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости trigintegrals.chebiterationshichi(Double x, Double c, Double&amp; b0, Double&amp; b1, Double&amp; b2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrigintegrals.hyperbolicsinecosineintegralsDoubleDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости trigintegrals.hyperbolicsinecosineintegrals(Double x, Double&amp; shi, Double&amp; chi)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrigintegrals.sinecosineintegralsDoubleDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости trigintegrals.sinecosineintegrals(Double x, Double&amp; si, Double&amp; ci)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimtrigintegrals.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimtrlinsolve">
            <summary>Тип оболочки совместимости для alglib+trlinsolve</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtrlinsolve.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtrlinsolve.#ctor(alglib.trlinsolve)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtrlinsolve.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtrlinsolve.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrlinsolve.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrlinsolve.Constructor">
            <summary>Задает оболочка совместимости trlinsolve.trlinsolve()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrlinsolve.rmatrixtrsafesolveDoubleMdArray2Int32DoubleArrayRefDoubleRefBooleanBooleanBoolean">
            <summary>Задает оболочка совместимости trlinsolve.rmatrixtrsafesolve(Double[,] a, Int32 n, Double[]&amp; x, Double&amp; s, Boolean isupper, Boolean istrans, Boolean isunit)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtrlinsolve.safesolvetriangularDoubleMdArray2Int32DoubleArrayRefDoubleRefBooleanBooleanBooleanBooleanDoubleArrayRef">
            <summary>Задает оболочка совместимости trlinsolve.safesolvetriangular(Double[,] a, Int32 n, Double[]&amp; x, Double&amp; s, Boolean isupper, Boolean istrans, Boolean isunit, Boolean normin, Double[]&amp; cnorm)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimtrlinsolve.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimtsort">
            <summary>Тип оболочки совместимости для alglib+tsort</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtsort.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtsort.#ctor(alglib.tsort)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtsort.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimtsort.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.Constructor">
            <summary>Задает оболочка совместимости tsort.tsort()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.lowerboundDoubleArrayInt32Double">
            <summary>Задает оболочка совместимости tsort.lowerbound(Double[] a, Int32 n, Double t)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.tagheappopiDoubleArrayRefInt32ArrayRefInt32Ref">
            <summary>Задает оболочка совместимости tsort.tagheappopi(Double[]&amp; a, Int32[]&amp; b, Int32&amp; n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.tagheappushiDoubleArrayRefInt32ArrayRefInt32RefDoubleInt32">
            <summary>Задает оболочка совместимости tsort.tagheappushi(Double[]&amp; a, Int32[]&amp; b, Int32&amp; n, Double va, Int32 vb)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.tagheapreplacetopiDoubleArrayRefInt32ArrayRefInt32DoubleInt32">
            <summary>Задает оболочка совместимости tsort.tagheapreplacetopi(Double[]&amp; a, Int32[]&amp; b, Int32 n, Double va, Int32 vb)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.tagsortDoubleArrayRefInt32Int32ArrayRefInt32ArrayRef">
            <summary>Задает оболочка совместимости tsort.tagsort(Double[]&amp; a, Int32 n, Int32[]&amp; p1, Int32[]&amp; p2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.tagsortbufDoubleArrayRefInt32Int32ArrayRefInt32ArrayRefapservalglibapbuffers">
            <summary>Задает оболочка совместимости tsort.tagsortbuf(Double[]&amp; a, Int32 n, Int32[]&amp; p1, Int32[]&amp; p2, apbuffers buf)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.tagsortfastDoubleArrayRefDoubleArrayRefInt32">
            <summary>Задает оболочка совместимости tsort.tagsortfast(Double[]&amp; a, Double[]&amp; bufa, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.tagsortfastiDoubleArrayRefInt32ArrayRefDoubleArrayRefInt32ArrayRefInt32">
            <summary>Задает оболочка совместимости tsort.tagsortfasti(Double[]&amp; a, Int32[]&amp; b, Double[]&amp; bufa, Int32[]&amp; bufb, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.tagsortfastirecDoubleArrayRefInt32ArrayRefDoubleArrayRefInt32ArrayRefInt32Int32">
            <summary>Задает оболочка совместимости tsort.tagsortfastirec(Double[]&amp; a, Int32[]&amp; b, Double[]&amp; bufa, Int32[]&amp; bufb, Int32 i1, Int32 i2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.tagsortfastrDoubleArrayRefDoubleArrayRefDoubleArrayRefDoubleArrayRefInt32">
            <summary>Задает оболочка совместимости tsort.tagsortfastr(Double[]&amp; a, Double[]&amp; b, Double[]&amp; bufa, Double[]&amp; bufb, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.tagsortfastrecDoubleArrayRefDoubleArrayRefInt32Int32">
            <summary>Задает оболочка совместимости tsort.tagsortfastrec(Double[]&amp; a, Double[]&amp; bufa, Int32 i1, Int32 i2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.tagsortfastrrecDoubleArrayRefDoubleArrayRefDoubleArrayRefDoubleArrayRefInt32Int32">
            <summary>Задает оболочка совместимости tsort.tagsortfastrrec(Double[]&amp; a, Double[]&amp; b, Double[]&amp; bufa, Double[]&amp; bufb, Int32 i1, Int32 i2)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.tagsortmiddleirInt32ArrayRefDoubleArrayRefInt32Int32">
            <summary>Задает оболочка совместимости tsort.tagsortmiddleir(Int32[]&amp; a, Double[]&amp; b, Int32 offset, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimtsort.upperboundDoubleArrayInt32Double">
            <summary>Задает оболочка совместимости tsort.upperbound(Double[] a, Int32 n, Double t)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimtsort.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimvariancetests">
            <summary>Тип оболочки совместимости для alglib+variancetests</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimvariancetests.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimvariancetests.#ctor(alglib.variancetests)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimvariancetests.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimvariancetests.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimvariancetests.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimvariancetests.Constructor">
            <summary>Задает оболочка совместимости variancetests.variancetests()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimvariancetests.ftestDoubleArrayInt32DoubleArrayInt32DoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости variancetests.ftest(Double[] x, Int32 n, Double[] y, Int32 m, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimvariancetests.onesamplevariancetestDoubleArrayInt32DoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости variancetests.onesamplevariancetest(Double[] x, Int32 n, Double variance, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimvariancetests.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimwsr">
            <summary>Тип оболочки совместимости для alglib+wsr</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimwsr.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimwsr.#ctor(alglib.wsr)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimwsr.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimwsr.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.Constructor">
            <summary>Задает оболочка совместимости wsr.wsr()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w10Double">
            <summary>Задает оболочка совместимости wsr.w10(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w11Double">
            <summary>Задает оболочка совместимости wsr.w11(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w120Double">
            <summary>Задает оболочка совместимости wsr.w120(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w12Double">
            <summary>Задает оболочка совместимости wsr.w12(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w13Double">
            <summary>Задает оболочка совместимости wsr.w13(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w14Double">
            <summary>Задает оболочка совместимости wsr.w14(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w15Double">
            <summary>Задает оболочка совместимости wsr.w15(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w16Double">
            <summary>Задает оболочка совместимости wsr.w16(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w17Double">
            <summary>Задает оболочка совместимости wsr.w17(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w18Double">
            <summary>Задает оболочка совместимости wsr.w18(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w19Double">
            <summary>Задает оболочка совместимости wsr.w19(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w200Double">
            <summary>Задает оболочка совместимости wsr.w200(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w20Double">
            <summary>Задает оболочка совместимости wsr.w20(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w21Double">
            <summary>Задает оболочка совместимости wsr.w21(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w22Double">
            <summary>Задает оболочка совместимости wsr.w22(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w23Double">
            <summary>Задает оболочка совместимости wsr.w23(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w24Double">
            <summary>Задает оболочка совместимости wsr.w24(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w25Double">
            <summary>Задает оболочка совместимости wsr.w25(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w26Double">
            <summary>Задает оболочка совместимости wsr.w26(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w27Double">
            <summary>Задает оболочка совместимости wsr.w27(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w28Double">
            <summary>Задает оболочка совместимости wsr.w28(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w29Double">
            <summary>Задает оболочка совместимости wsr.w29(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w30Double">
            <summary>Задает оболочка совместимости wsr.w30(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w40Double">
            <summary>Задает оболочка совместимости wsr.w40(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w5Double">
            <summary>Задает оболочка совместимости wsr.w5(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w60Double">
            <summary>Задает оболочка совместимости wsr.w60(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w6Double">
            <summary>Задает оболочка совместимости wsr.w6(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w7Double">
            <summary>Задает оболочка совместимости wsr.w7(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w8Double">
            <summary>Задает оболочка совместимости wsr.w8(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.w9Double">
            <summary>Задает оболочка совместимости wsr.w9(Double s)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.wchebDoubleDoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости wsr.wcheb(Double x, Double c, Double&amp; tj, Double&amp; tj1, Double&amp; r)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.wilcoxonsignedranktestDoubleArrayInt32DoubleDoubleRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости wsr.wilcoxonsignedranktest(Double[] x, Int32 n, Double e, Double&amp; bothtails, Double&amp; lefttail, Double&amp; righttail)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimwsr.wsigmaDoubleInt32">
            <summary>Задает оболочка совместимости wsr.wsigma(Double s, Int32 n)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimwsr.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimxblas">
            <summary>Тип оболочки совместимости для alglib+xblas</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxblas.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxblas.#ctor(alglib.xblas)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxblas.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxblas.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxblas.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxblas.Constructor">
            <summary>Задает оболочка совместимости xblas.xblas()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxblas.xcdotalglibcomplexArrayalglibcomplexArrayInt32DoubleArrayRefalglibcomplexRefDoubleRef">
            <summary>Задает оболочка совместимости xblas.xcdot(complex[] a, complex[] b, Int32 n, Double[]&amp; temp, complex&amp; r, Double&amp; rerr)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxblas.xdotDoubleArrayDoubleArrayInt32DoubleArrayRefDoubleRefDoubleRef">
            <summary>Задает оболочка совместимости xblas.xdot(Double[] a, Double[] b, Int32 n, Double[]&amp; temp, Double&amp; r, Double&amp; rerr)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxblas.xfastpowDoubleInt32">
            <summary>Задает оболочка совместимости xblas.xfastpow(Double r, Int32 n)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxblas.xsumDoubleArrayRefDoubleInt32DoubleRefDoubleRef">
            <summary>Задает оболочка совместимости xblas.xsum(Double[]&amp; w, Double mx, Int32 n, Double&amp; r, Double&amp; rerr)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimxblas.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimxdebug">
            <summary>Тип оболочки совместимости для alglib+xdebug</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxdebug.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxdebug.#ctor(alglib.xdebug)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxdebug.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxdebug.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.Constructor">
            <summary>Задает оболочка совместимости xdebug.xdebug()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugb1appendcopyBooleanArrayRef">
            <summary>Задает оболочка совместимости xdebug.xdebugb1appendcopy(Boolean[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugb1countBooleanArray">
            <summary>Задает оболочка совместимости xdebug.xdebugb1count(Boolean[] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugb1notBooleanArray">
            <summary>Задает оболочка совместимости xdebug.xdebugb1not(Boolean[] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugb1outevenInt32BooleanArrayRef">
            <summary>Задает оболочка совместимости xdebug.xdebugb1outeven(Int32 n, Boolean[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugb2countBooleanMdArray2">
            <summary>Задает оболочка совместимости xdebug.xdebugb2count(Boolean[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugb2notBooleanMdArray2">
            <summary>Задает оболочка совместимости xdebug.xdebugb2not(Boolean[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugb2outsinInt32Int32BooleanMdArray2Ref">
            <summary>Задает оболочка совместимости xdebug.xdebugb2outsin(Int32 m, Int32 n, Boolean[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugb2transposeBooleanMdArray2Ref">
            <summary>Задает оболочка совместимости xdebug.xdebugb2transpose(Boolean[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugc1appendcopyalglibcomplexArrayRef">
            <summary>Задает оболочка совместимости xdebug.xdebugc1appendcopy(complex[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugc1negalglibcomplexArray">
            <summary>Задает оболочка совместимости xdebug.xdebugc1neg(complex[] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugc1outevenInt32alglibcomplexArrayRef">
            <summary>Задает оболочка совместимости xdebug.xdebugc1outeven(Int32 n, complex[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugc1sumalglibcomplexArray">
            <summary>Задает оболочка совместимости xdebug.xdebugc1sum(complex[] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugc2negalglibcomplexMdArray2">
            <summary>Задает оболочка совместимости xdebug.xdebugc2neg(complex[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugc2outsincosInt32Int32alglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости xdebug.xdebugc2outsincos(Int32 m, Int32 n, complex[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugc2sumalglibcomplexMdArray2">
            <summary>Задает оболочка совместимости xdebug.xdebugc2sum(complex[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugc2transposealglibcomplexMdArray2Ref">
            <summary>Задает оболочка совместимости xdebug.xdebugc2transpose(complex[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugi1appendcopyInt32ArrayRef">
            <summary>Задает оболочка совместимости xdebug.xdebugi1appendcopy(Int32[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugi1negInt32Array">
            <summary>Задает оболочка совместимости xdebug.xdebugi1neg(Int32[] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugi1outevenInt32Int32ArrayRef">
            <summary>Задает оболочка совместимости xdebug.xdebugi1outeven(Int32 n, Int32[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugi1sumInt32Array">
            <summary>Задает оболочка совместимости xdebug.xdebugi1sum(Int32[] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugi2negInt32MdArray2">
            <summary>Задает оболочка совместимости xdebug.xdebugi2neg(Int32[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugi2outsinInt32Int32Int32MdArray2Ref">
            <summary>Задает оболочка совместимости xdebug.xdebugi2outsin(Int32 m, Int32 n, Int32[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugi2sumInt32MdArray2">
            <summary>Задает оболочка совместимости xdebug.xdebugi2sum(Int32[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugi2transposeInt32MdArray2Ref">
            <summary>Задает оболочка совместимости xdebug.xdebugi2transpose(Int32[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebuginitrecord1xdebugalglibxdebugrecord1">
            <summary>Задает оболочка совместимости xdebug.xdebuginitrecord1(xdebugrecord1 rec1)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugmaskedbiasedproductsumInt32Int32DoubleMdArray2DoubleMdArray2BooleanMdArray2">
            <summary>Задает оболочка совместимости xdebug.xdebugmaskedbiasedproductsum(Int32 m, Int32 n, Double[,] a, Double[,] b, Boolean[,] c)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugr1appendcopyDoubleArrayRef">
            <summary>Задает оболочка совместимости xdebug.xdebugr1appendcopy(Double[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugr1negDoubleArray">
            <summary>Задает оболочка совместимости xdebug.xdebugr1neg(Double[] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugr1outevenInt32DoubleArrayRef">
            <summary>Задает оболочка совместимости xdebug.xdebugr1outeven(Int32 n, Double[]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugr1sumDoubleArray">
            <summary>Задает оболочка совместимости xdebug.xdebugr1sum(Double[] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugr2negDoubleMdArray2">
            <summary>Задает оболочка совместимости xdebug.xdebugr2neg(Double[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugr2outsinInt32Int32DoubleMdArray2Ref">
            <summary>Задает оболочка совместимости xdebug.xdebugr2outsin(Int32 m, Int32 n, Double[,]&amp; a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugr2sumDoubleMdArray2">
            <summary>Задает оболочка совместимости xdebug.xdebugr2sum(Double[,] a)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.xdebugr2transposeDoubleMdArray2Ref">
            <summary>Задает оболочка совместимости xdebug.xdebugr2transpose(Double[,]&amp; a)</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimxdebug.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimxdebug.Shimxdebugrecord1">
            <summary>Тип оболочки совместимости для alglib+xdebug+xdebugrecord1</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxdebug.Shimxdebugrecord1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxdebug.Shimxdebugrecord1.#ctor(alglib.xdebug.xdebugrecord1)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxdebug.Shimxdebugrecord1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxdebug.Shimxdebugrecord1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.Shimxdebugrecord1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.Shimxdebugrecord1.Constructor">
            <summary>Задает оболочка совместимости xdebugrecord1.xdebugrecord1()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.Shimxdebugrecord1.init">
            <summary>Задает оболочка совместимости xdebugrecord1.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.Shimxdebugrecord1.make_copy">
            <summary>Задает оболочка совместимости xdebugrecord1.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimxdebug.Shimxdebugrecord1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.Shimxdebugrecord1.AllInstances.init">
            <summary>Задает оболочка совместимости xdebugrecord1.init()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebug.Shimxdebugrecord1.AllInstances.make_copy">
            <summary>Задает оболочка совместимости xdebugrecord1.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimxdebugrecord1">
            <summary>Тип оболочки совместимости для alglib+xdebugrecord1</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxdebugrecord1.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxdebugrecord1.#ctor(alglib.xdebugrecord1)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxdebugrecord1.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:Global.Fakes.Shimalglib.Shimxdebugrecord1.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.Constructor">
            <summary>Задает оболочка совместимости xdebugrecord1.xdebugrecord1()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.Constructorxdebugalglibxdebugrecord1">
            <summary>Задает оболочка совместимости xdebugrecord1.xdebugrecord1(xdebugrecord1 obj)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.aGet">
            <summary>Задает оболочка совместимости xdebugrecord1.get_a()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.aSetDoubleArray">
            <summary>Задает оболочка совместимости xdebugrecord1.set_a(Double[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.cGet">
            <summary>Задает оболочка совместимости xdebugrecord1.get_c()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.cSetalglibcomplex">
            <summary>Задает оболочка совместимости xdebugrecord1.set_c(complex value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.iGet">
            <summary>Задает оболочка совместимости xdebugrecord1.get_i()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.iSetInt32">
            <summary>Задает оболочка совместимости xdebugrecord1.set_i(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.innerobjGet">
            <summary>Задает оболочка совместимости xdebugrecord1.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.make_copy">
            <summary>Задает оболочка совместимости xdebugrecord1.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Shimalglib.Shimxdebugrecord1.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.AllInstances.aGet">
            <summary>Задает оболочка совместимости xdebugrecord1.get_a()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.AllInstances.aSetDoubleArray">
            <summary>Задает оболочка совместимости xdebugrecord1.set_a(Double[] value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.AllInstances.cGet">
            <summary>Задает оболочка совместимости xdebugrecord1.get_c()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.AllInstances.cSetalglibcomplex">
            <summary>Задает оболочка совместимости xdebugrecord1.set_c(complex value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.AllInstances.iGet">
            <summary>Задает оболочка совместимости xdebugrecord1.get_i()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.AllInstances.iSetInt32">
            <summary>Задает оболочка совместимости xdebugrecord1.set_i(Int32 value)</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.AllInstances.innerobjGet">
            <summary>Задает оболочка совместимости xdebugrecord1.get_innerobj()</summary>
        </member>
        <member name="P:Global.Fakes.Shimalglib.Shimxdebugrecord1.AllInstances.make_copy">
            <summary>Задает оболочка совместимости xdebugrecord1.make_copy()</summary>
        </member>
        <member name="T:Global.Fakes.Stubalglib">
            <summary>Тип заглушки alglib</summary>
        </member>
        <member name="M:Global.Fakes.Stubalglib.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:Global.Fakes.Stubalglib.InitializeStub">
            <summary>Инициализирует новый экземпляр type Stubalglib</summary>
        </member>
        <member name="P:Global.Fakes.Stubalglib.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:Global.Fakes.Stubalglib.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:Global.Fakes.Stubalglib.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.Alglibnet2Delegates">
            <summary>Содержит пользовательские делегаты для заглушек и оболочек совместимости alglibnet2</summary>
        </member>
    </members>
</doc>
